<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stardew Valley</name>
    </assembly>
    <members>
        <member name="M:StardewValley.BellsAndWhistles.Lexicon.getRandomNegativeItemSlanderNoun">
             <summary>
            
             A noun to represent some kind of "bad" object. Kind of has connotations of it being disgusting or cheap. preface with "that" or "such"
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:StardewValley.BellsAndWhistles.Lexicon.prependArticle(System.String)">
            <summary>In English only, prepend an article like 'a' or 'an' to a word.</summary>
            <param name="word">The word for which to prepend an article.</param>
        </member>
        <member name="M:StardewValley.BellsAndWhistles.Lexicon.prependTokenizedArticle(System.String)">
            <summary>In English only, prepend an article like 'a' or 'an' to a word as a <see cref="T:StardewValley.TokenizableStrings.TokenParser">tokenizable string</see>.</summary>
            <param name="word">The tokenizable string which returns the word for which to prepend an article.</param>
        </member>
        <member name="M:StardewValley.BellsAndWhistles.Lexicon.getRandomPositiveAdjectiveForEventOrPerson(StardewValley.NPC)">
             <summary>
            
             Adjectives like "wonderful" "amazing" "excellent", prefaced with "are"  "is"  "was" "will be" "usually is", etc.
             these wouldn't really make sense for an object, more for a person,place, or event
             </summary>
             <returns></returns>
        </member>
        <member name="M:StardewValley.BellsAndWhistles.Lexicon.getRandomDeliciousAdjective(StardewValley.NPC)">
             <summary>
            
             An adjective to represent something tasty, like "delicious", "tasty", "wonderful", "satisfying"
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:StardewValley.BellsAndWhistles.Lexicon.getRandomNegativeFoodAdjective(StardewValley.NPC)">
             <summary>
            
             Adjective to describe something that is not tasty. "gross", "disgusting", "nasty"
             </summary>
             <returns></returns>
        </member>
        <member name="M:StardewValley.BellsAndWhistles.Lexicon.getRandomSlightlyPositiveAdjectiveForEdibleNoun(StardewValley.NPC)">
             <summary>
            
             Adjectives like "decent" "good"
             </summary>
             <returns></returns>
        </member>
        <member name="M:StardewValley.BellsAndWhistles.Lexicon.getGenderedChildTerm(System.Boolean)">
            <summary>Get a generic term for a child of a given gender (i.e. "boy" or "girl").</summary>
            <param name="isMale">Whether the child is male.</param>
        </member>
        <member name="M:StardewValley.BellsAndWhistles.Lexicon.getTokenizedGenderedChildTerm(System.Boolean)">
            <summary>Get a generic term for a child of a given gender (i.e. "boy" or "girl"), as a <see cref="T:StardewValley.TokenizableStrings.TokenParser">tokenizable string</see>.</summary>
            <param name="isMale">Whether the child is male.</param>
        </member>
        <member name="M:StardewValley.BellsAndWhistles.Lexicon.getPronoun(System.Boolean)">
            <summary>Get a gendered pronoun (i.e. "him" or "her").</summary>
            <param name="isMale">Whether to get a male pronoun.</param>
        </member>
        <member name="M:StardewValley.BellsAndWhistles.Lexicon.getTokenizedPronoun(System.Boolean)">
            <summary>Get a gendered pronoun (i.e. "him" or "her"), as a <see cref="T:StardewValley.TokenizableStrings.TokenParser">tokenizable string</see>.</summary>
            <param name="isMale">Whether to get a male pronoun.</param>
        </member>
        <member name="M:StardewValley.BellsAndWhistles.Lexicon.getPossessivePronoun(System.Boolean)">
            <summary>Get a possessive gendered pronoun (i.e. "his" or "her").</summary>
            <param name="isMale">Whether to get a male pronoun.</param>
        </member>
        <member name="M:StardewValley.BellsAndWhistles.Lexicon.getTokenizedPossessivePronoun(System.Boolean)">
            <summary>Get a possessive gendered pronoun (i.e. "his" or "her"), as a <see cref="T:StardewValley.TokenizableStrings.TokenParser">tokenizable string</see>.</summary>
            <param name="isMale">Whether to get a male pronoun.</param>
        </member>
        <member name="F:StardewValley.BellsAndWhistles.MoneyDial.ShouldShakeMainMoneyBox">
            <summary>Whether to shake the money display in <see cref="F:StardewValley.Game1.dayTimeMoneyBox"/> when the money amount changes.</summary>
        </member>
        <member name="M:StardewValley.BellsAndWhistles.PlayerStatusList.TryGetStatusText(System.Int64,System.String@)">
            <summary>Try to get the status text for a player.</summary>
            <param name="id">The unique multiplayer ID for the player whose status to get.</param>
            <param name="statusText">The status text if found, else <c>null</c>.</param>
            <returns>Whether the status was found.</returns>
        </member>
        <member name="M:StardewValley.BellsAndWhistles.PlayerStatusList.GetStatusText(System.Int64,System.String)">
            <summary>Get the string representation of a player's status.</summary>
            <param name="id">The unique multiplayer ID for the player whose status to get.</param>
            <param name="fallback">The value to return if no status is found for the player.</param>
            <returns>The string representation of the player's status, or <paramref name="fallback" /> if not found.</returns>
        </member>
        <member name="M:StardewValley.BellsAndWhistles.PlayerStatusList.GetStatusInt(System.Int64,System.Int32)">
            <summary>Get the integer representation of a player's status (e.g. number of eggs found at the Egg Festival).</summary>
            <param name="id">The unique multiplayer ID for the player whose status to get.</param>
            <param name="fallback">The value to return if no status is found for the player.</param>
            <returns>The integer representation of the player's status, or <paramref name="fallback" /> if not found.</returns>
        </member>
        <member name="M:StardewValley.Enchantments.BaseEnchantment.ResetEnchantments">
            <summary>Reset cached enchantment data.</summary>
        </member>
        <member name="F:StardewValley.Menus.AnimalPage.AnimalEntries">
            <summary>The players and social NPCs shown in the list.</summary>
        </member>
        <member name="F:StardewValley.Menus.AnimalPage.sprites">
            <summary>The character portrait components.</summary>
        </member>
        <member name="F:StardewValley.Menus.AnimalPage.slotPosition">
            <summary>The index of the <see cref="F:StardewValley.Menus.AnimalPage.AnimalEntries"/> entry shown at the top of the scrolled view.</summary>
        </member>
        <member name="F:StardewValley.Menus.AnimalPage.characterSlots">
            <summary>The clickable slots over which character info is drawn.</summary>
        </member>
        <member name="M:StardewValley.Menus.AnimalPage.FindAnimals">
            <summary>Find all social NPCs which should be shown on the social page.</summary>
        </member>
        <member name="M:StardewValley.Menus.AnimalPage.GetAllAnimals">
            <summary>Get all animals from the world and friendship data.</summary>
        </member>
        <member name="M:StardewValley.Menus.AnimalPage.CreateComponents">
            <summary>Load the clickable components to display.</summary>
        </member>
        <member name="M:StardewValley.Menus.AnimalPage.CreateSpriteComponent(StardewValley.Menus.AnimalPage.AnimalEntry,System.Int32)">
            <summary>Create the clickable texture component for a character's portrait.</summary>
            <param name="entry">The social character to render.</param>
            <param name="index">The index in the list of entries.</param>
        </member>
        <member name="M:StardewValley.Menus.AnimalPage.GetSocialEntry(System.Int32)">
            <summary>Get the social entry from its index in the list.</summary>
            <param name="index">The index in the social list.</param>
        </member>
        <member name="T:StardewValley.Menus.AnimalPage.AnimalEntry">
            <summary>An entry on the social page.</summary>
        </member>
        <member name="F:StardewValley.Menus.AnimalPage.AnimalEntry.Animal">
            <summary>The character instance.</summary>
        </member>
        <member name="F:StardewValley.Menus.AnimalPage.AnimalEntry.InternalName">
            <summary>The unique multiplayer ID for a player, or the internal name for an NPC.</summary>
        </member>
        <member name="F:StardewValley.Menus.AnimalPage.AnimalEntry.DisplayName">
            <summary>The translated display name.</summary>
        </member>
        <member name="F:StardewValley.Menus.AnimalPage.AnimalEntry.FriendshipLevel">
            <summary>The current player's heart level with this animal. -1 means friendship is not tracked.</summary>
        </member>
        <member name="F:StardewValley.Menus.AnimalPage.AnimalEntry.WasPetYet">
            <summary>
            0 is no, 1 is auto-pet, 2 is hand pet
            </summary>
        </member>
        <member name="M:StardewValley.Menus.AnimalPage.AnimalEntry.#ctor(StardewValley.Character)">
            <summary>Construct an instance.</summary>
            <param name="player">The player for which to create an entry.</param>
            <param name="friendship">The current player's friendship with this character.</param>
        </member>
        <member name="F:StardewValley.Menus.Billboard.calendarDayData">
            <summary>The events to show on the calendar for each day.</summary>
            <remarks>This only has entries for days that have events.</remarks>
        </member>
        <member name="M:StardewValley.Menus.Billboard.GetBirthdays">
            <summary>Get all NPC birthdays that should be shown on the calendar this month, indexed by day.</summary>
        </member>
        <member name="M:StardewValley.Menus.Billboard.GetEventsForDay(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{StardewValley.NPC}})">
            <summary>Get the events to show on a given calendar day.</summary>
            <param name="day">The day of month.</param>
            <param name="birthdays">A cached lookup of birthdays by day.</param>
        </member>
        <member name="T:StardewValley.Menus.Billboard.BillboardEventType">
            <summary>An event type that can be shown in the calendar.</summary>
        </member>
        <member name="F:StardewValley.Menus.Billboard.BillboardEventType.None">
            <summary>No event.</summary>
        </member>
        <member name="F:StardewValley.Menus.Billboard.BillboardEventType.Birthday">
            <summary>An NPC's birthday.</summary>
        </member>
        <member name="F:StardewValley.Menus.Billboard.BillboardEventType.Festival">
            <summary>A non-passive festival.</summary>
        </member>
        <member name="F:StardewValley.Menus.Billboard.BillboardEventType.FishingDerby">
            <summary>A fishing derby like Trophy Derby or Squidfest.</summary>
        </member>
        <member name="F:StardewValley.Menus.Billboard.BillboardEventType.PassiveFestival">
            <summary>A passive festival.</summary>
        </member>
        <member name="F:StardewValley.Menus.Billboard.BillboardEventType.Wedding">
            <summary>A wedding between a player and a player/NPC.</summary>
        </member>
        <member name="F:StardewValley.Menus.Billboard.BillboardEventType.Bookseller">
            <summary>A day that Marcello's Books will be in town</summary>
        </member>
        <member name="T:StardewValley.Menus.Billboard.BillboardDay">
            <summary>The cached data for a calendar day.</summary>
        </member>
        <member name="P:StardewValley.Menus.Billboard.BillboardDay.Type">
            <summary>The event types on this day.</summary>
        </member>
        <member name="P:StardewValley.Menus.Billboard.BillboardDay.Events">
            <summary>The events on this day.</summary>
        </member>
        <member name="P:StardewValley.Menus.Billboard.BillboardDay.HoverText">
            <summary>The combined hover text for the events on this day.</summary>
        </member>
        <member name="P:StardewValley.Menus.Billboard.BillboardDay.Texture">
            <summary>The texture to show for the calendar slot, if any.</summary>
        </member>
        <member name="P:StardewValley.Menus.Billboard.BillboardDay.TextureSourceRect">
            <summary>The pixel area to draw within the <see cref="P:StardewValley.Menus.Billboard.BillboardDay.Texture"/>, if applicable.</summary>
        </member>
        <member name="M:StardewValley.Menus.Billboard.BillboardDay.#ctor(StardewValley.Menus.Billboard.BillboardEvent[])">
            <summary>Construct an instance.</summary>
            <param name="events">The events on this day.</param>
        </member>
        <member name="T:StardewValley.Menus.Billboard.BillboardEvent">
            <summary>An event shown on the calendar.</summary>
        </member>
        <member name="P:StardewValley.Menus.Billboard.BillboardEvent.Type">
            <summary>The event type.</summary>
        </member>
        <member name="P:StardewValley.Menus.Billboard.BillboardEvent.Arguments">
            <summary>The values related to the event (like the names of the players or NPCs getting married).</summary>
        </member>
        <member name="P:StardewValley.Menus.Billboard.BillboardEvent.DisplayName">
            <summary>The name to show on the calendar.</summary>
        </member>
        <member name="P:StardewValley.Menus.Billboard.BillboardEvent.Texture">
            <summary>The texture to show for the calendar slot, if any.</summary>
        </member>
        <member name="P:StardewValley.Menus.Billboard.BillboardEvent.TextureSourceRect">
            <summary>The pixel area to draw within the <see cref="P:StardewValley.Menus.Billboard.BillboardEvent.Texture"/>, if applicable.</summary>
        </member>
        <member name="F:StardewValley.Menus.Billboard.BillboardEvent.locked">
            <summary>If this event is currently unavailable. (e.g. Desert festival before desert is open)</summary>
        </member>
        <member name="M:StardewValley.Menus.Billboard.BillboardEvent.#ctor(StardewValley.Menus.Billboard.BillboardEventType,System.String[],System.String,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle)">
            <summary>Construct an instance.</summary>
            <param name="type">The event type.</param>
            <param name="arguments">The values related to the event (like the names of the players or NPCs getting married).</param>
            <param name="displayName">The name to show on the calendar.</param>
            <param name="texture">The texture to show for the calendar slot, if any.</param>
            <param name="sourceRect">The pixel area to draw within the <paramref name="texture"/>, if applicable.</param>
        </member>
        <member name="F:StardewValley.Menus.BobberBar.distanceFromCatchPenaltyModifier">
            <summary>A modifier that only affects the "damage" for not having the fish in the bobber bar.</summary>
        </member>
        <member name="F:StardewValley.Menus.BobberBar.setFlagOnCatch">
            <summary>The mail flag to set for the current player when the current <see cref="F:StardewValley.Menus.BobberBar.whichFish"/> is successfully caught.</summary>
        </member>
        <member name="F:StardewValley.Menus.BuffsDisplay.displayAttributes">
            <summary>The buff attributes shown for buffs which don't have their own icon or description.</summary>
            <remarks>For example, a food buff which adds +2 fishing and +1 luck will show two buff icons using this data. A buff which has its own icon but no description will show a single icon with a combined description based on this data.</remarks>
        </member>
        <member name="F:StardewValley.Menus.BuffsDisplay.updatedIDs">
            <summary>The buff IDs added or renewed since the last icon render.</summary>
        </member>
        <member name="F:StardewValley.Menus.BuildingPaintMenu.regions">
            <summary>The paint regions for the building.</summary>
        </member>
        <member name="T:StardewValley.Menus.BuildingPaintMenu.RegionData">
            <summary>The data model for a paint region.</summary>
        </member>
        <member name="P:StardewValley.Menus.BuildingPaintMenu.RegionData.Id">
            <summary>The unique region ID within the building's paint regions.</summary>
        </member>
        <member name="P:StardewValley.Menus.BuildingPaintMenu.RegionData.DisplayName">
            <summary>The localized display name.</summary>
        </member>
        <member name="P:StardewValley.Menus.BuildingPaintMenu.RegionData.MinBrightness">
            <summary>The minimum brightness allowed.</summary>
        </member>
        <member name="P:StardewValley.Menus.BuildingPaintMenu.RegionData.MaxBrightness">
            <summary>The maximum brightness allowed.</summary>
        </member>
        <member name="M:StardewValley.Menus.BuildingPaintMenu.RegionData.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>Construct an instance.</summary>
            <param name="id">The unique region ID within the building's paint regions.</param>
            <param name="displayName">The localized display name.</param>
            <param name="minBrightness">The minimum brightness allowed.</param>
            <param name="maxBrightness">The maximum brightness allowed.</param>
        </member>
        <member name="F:StardewValley.Menus.BuildingSkinMenu.Building">
            <summary>The building whose skin to change.</summary>
        </member>
        <member name="F:StardewValley.Menus.BuildingSkinMenu.Skins">
            <summary>The building skins available in the menu.</summary>
        </member>
        <member name="F:StardewValley.Menus.BuildingSkinMenu.Skin">
            <summary>The current building skin shown in the menu.</summary>
        </member>
        <member name="M:StardewValley.Menus.BuildingSkinMenu.#ctor(StardewValley.Buildings.Building,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="targetBuilding">The building whose skin to change.</param>
            <param name="ignoreSeparateConstructionEntries">Whether to ignore skins with <see cref="F:StardewValley.GameData.Buildings.BuildingSkin.ShowAsSeparateConstructionEntry"/> set to true.</param>
        </member>
        <member name="T:StardewValley.Menus.BuildingSkinMenu.SkinEntry">
            <summary>Metadata for a skin shown in the menu.</summary>
        </member>
        <member name="F:StardewValley.Menus.BuildingSkinMenu.SkinEntry.Index">
            <summary>The index of the skin in the menu's list.</summary>
        </member>
        <member name="F:StardewValley.Menus.BuildingSkinMenu.SkinEntry.Id">
            <summary>The skin ID in <c>Data/Buildings</c>.</summary>
        </member>
        <member name="F:StardewValley.Menus.BuildingSkinMenu.SkinEntry.DisplayName">
            <summary>The translated display name.</summary>
        </member>
        <member name="F:StardewValley.Menus.BuildingSkinMenu.SkinEntry.Description">
            <summary>The translated description.</summary>
        </member>
        <member name="F:StardewValley.Menus.BuildingSkinMenu.SkinEntry.Data">
            <summary>The skin data from <c>Data/Buildings</c>.</summary>
        </member>
        <member name="M:StardewValley.Menus.BuildingSkinMenu.SkinEntry.#ctor(System.Int32,StardewValley.GameData.Buildings.BuildingSkin)">
            <summary>Construct an instance.</summary>
            <param name="index">The index of the skin in the menu's list.</param>
            <param name="skin">The skin ID in <c>Data/Buildings</c>.</param>
        </member>
        <member name="M:StardewValley.Menus.BuildingSkinMenu.SkinEntry.#ctor(System.Int32,StardewValley.GameData.Buildings.BuildingSkin,System.String,System.String)">
            <summary>Construct an instance.</summary>
            <param name="index">The index of the skin in the menu's list.</param>
            <param name="skin">The skin data from <c>Data/Buildings</c>.</param>
            <param name="displayName">The translated display name.</param>
            <param name="description">The translated description.</param>
        </member>
        <member name="F:StardewValley.Menus.CarpenterMenu.Builder">
            <summary>The name of the NPC whose building menu is being shown (the vanilla values are <see cref="F:StardewValley.Game1.builder_robin"/> and <see cref="F:StardewValley.Game1.builder_wizard"/>). This affects which buildings are available to build based on the <see cref="F:StardewValley.GameData.Buildings.BuildingData.Builder"/> value.</summary>
        </member>
        <member name="F:StardewValley.Menus.CarpenterMenu.BuilderLocationName">
            <summary>The name of the location to return to after exiting the farm view.</summary>
        </member>
        <member name="F:StardewValley.Menus.CarpenterMenu.BuilderViewport">
            <summary>The viewport position to return to after exiting the farm view.</summary>
        </member>
        <member name="F:StardewValley.Menus.CarpenterMenu.TargetLocation">
            <summary>The location in which to construct or manage buildings.</summary>
        </member>
        <member name="F:StardewValley.Menus.CarpenterMenu.TargetViewportCenterOnTile">
            <summary>The tile to center on when switching to the <see cref="F:StardewValley.Menus.CarpenterMenu.TargetLocation"/>, or <c>null</c> to apply the default behavior.</summary>
        </member>
        <member name="F:StardewValley.Menus.CarpenterMenu.Blueprints">
            <summary>The blueprints available in the menu.</summary>
        </member>
        <member name="F:StardewValley.Menus.CarpenterMenu.Blueprint">
            <summary>The current blueprint shown in the menu.</summary>
        </member>
        <member name="F:StardewValley.Menus.CarpenterMenu.ingredients">
            <summary>The materials needed to build the <see cref="F:StardewValley.Menus.CarpenterMenu.currentBuilding"/>, if any. The stack size for each item is the number required.</summary>
        </member>
        <member name="F:StardewValley.Menus.CarpenterMenu.onFarm">
            <summary>Whether the menu is currently showing the target location (regardless of whether it's the farm), so the player can choose a building or position.</summary>
        </member>
        <member name="M:StardewValley.Menus.CarpenterMenu.#ctor(System.String,StardewValley.GameLocation)">
            <summary>Construct an instance.</summary>
            <param name="builder">The name of the NPC whose building menu is being shown (the vanilla values are <see cref="F:StardewValley.Game1.builder_robin"/> and <see cref="F:StardewValley.Game1.builder_wizard"/>). This affects which buildings are available to build based on the <see cref="F:StardewValley.GameData.Buildings.BuildingData.Builder"/> value.</param>
            <param name="targetLocation">The location in which to construct the building, or <c>null</c> for the farm.</param>
        </member>
        <member name="M:StardewValley.Menus.CarpenterMenu.GetInitialBuildingPlacementViewport(StardewValley.GameLocation)">
            <summary>Get the viewport to set when we start building placement.</summary>
            <param name="location">The location for which to get a viewport.</param>
        </member>
        <member name="M:StardewValley.Menus.CarpenterMenu.IsValidBuildingForLocation(System.String,StardewValley.GameData.Buildings.BuildingData,StardewValley.GameLocation)">
            <summary>Get whether a building can ever be built in the target location.</summary>
            <param name="typeId">The building type ID in <c>Data/Buildings</c>.</param>
            <param name="data">The building data from <c>Data/Buildings</c>.</param>
            <param name="targetLocation">The location it would be built in.</param>
        </member>
        <member name="M:StardewValley.Menus.CarpenterMenu.CanBuildCurrentBlueprint">
            <summary>Get whether the player can build the current blueprint now.</summary>
        </member>
        <member name="M:StardewValley.Menus.CarpenterMenu.CanDemolishThis">
            <summary>Get whether it's safe to demolish the current building.</summary>
        </member>
        <member name="M:StardewValley.Menus.CarpenterMenu.CanDemolishThis(StardewValley.Buildings.Building)">
            <summary>Get whether it's safe to demolish a given building.</summary>
            <param name="building">The building to check.</param>
        </member>
        <member name="M:StardewValley.Menus.CarpenterMenu.ConsumeResources">
            <summary>Deduct the money and materials from the player's inventory to construct the current blueprint.</summary>
        </member>
        <member name="M:StardewValley.Menus.CarpenterMenu.DoesFarmerHaveEnoughResourcesToBuild">
            <summary>Get whether the player has the money and materials needed to construct the current blueprint.</summary>
        </member>
        <member name="T:StardewValley.Menus.CarpenterMenu.BlueprintEntry">
            <summary>Metadata for a building shown in the construction menu.</summary>
        </member>
        <member name="P:StardewValley.Menus.CarpenterMenu.BlueprintEntry.Index">
            <summary>The index of the blueprint in the construction menu's list.</summary>
        </member>
        <member name="P:StardewValley.Menus.CarpenterMenu.BlueprintEntry.Id">
            <summary>The building type ID in <c>Data/Buildings</c>.</summary>
        </member>
        <member name="P:StardewValley.Menus.CarpenterMenu.BlueprintEntry.Data">
            <summary>The building data from <c>Data/Buildings</c>.</summary>
        </member>
        <member name="P:StardewValley.Menus.CarpenterMenu.BlueprintEntry.Skin">
            <summary>The building skin to apply from <c>Data/Buildings</c>, if applicable.</summary>
        </member>
        <member name="P:StardewValley.Menus.CarpenterMenu.BlueprintEntry.DisplayName">
            <summary>The translated display name.</summary>
        </member>
        <member name="P:StardewValley.Menus.CarpenterMenu.BlueprintEntry.TokenizedDisplayName">
            <summary>The translated display name as a <see cref="T:StardewValley.TokenizableStrings.TokenParser">tokenizable string</see>.</summary>
        </member>
        <member name="P:StardewValley.Menus.CarpenterMenu.BlueprintEntry.Description">
            <summary>The translated description.</summary>
        </member>
        <member name="P:StardewValley.Menus.CarpenterMenu.BlueprintEntry.TilesWide">
            <summary>The number of tiles horizontally for the constructed building's collision box.</summary>
        </member>
        <member name="P:StardewValley.Menus.CarpenterMenu.BlueprintEntry.TilesHigh">
            <summary>The number of tiles vertically for the constructed building's collision box.</summary>
        </member>
        <member name="P:StardewValley.Menus.CarpenterMenu.BlueprintEntry.IsUpgrade">
            <inheritdoc cref="F:StardewValley.GameData.Buildings.BuildingData.BuildingToUpgrade"/>
        </member>
        <member name="P:StardewValley.Menus.CarpenterMenu.BlueprintEntry.BuildDays">
            <inheritdoc cref="F:StardewValley.GameData.Buildings.BuildingData.BuildDays"/>
        </member>
        <member name="P:StardewValley.Menus.CarpenterMenu.BlueprintEntry.BuildCost">
            <inheritdoc cref="F:StardewValley.GameData.Buildings.BuildingData.BuildCost"/>
        </member>
        <member name="P:StardewValley.Menus.CarpenterMenu.BlueprintEntry.BuildMaterials">
            <inheritdoc cref="F:StardewValley.GameData.Buildings.BuildingData.BuildMaterials"/>
        </member>
        <member name="P:StardewValley.Menus.CarpenterMenu.BlueprintEntry.UpgradeFrom">
            <inheritdoc cref="F:StardewValley.GameData.Buildings.BuildingData.BuildingToUpgrade"/>
        </member>
        <member name="P:StardewValley.Menus.CarpenterMenu.BlueprintEntry.MagicalConstruction">
            <inheritdoc cref="F:StardewValley.GameData.Buildings.BuildingData.MagicalConstruction"/>
        </member>
        <member name="M:StardewValley.Menus.CarpenterMenu.BlueprintEntry.#ctor(System.Int32,System.String,StardewValley.GameData.Buildings.BuildingData,System.String)">
            <summary>Construct an instance.</summary>
            <param name="index">The index of the blueprint in the construction menu's list.</param>
            <param name="id">The building type ID in <c>Data/Buildings</c>.</param>
            <param name="data">The building data from <c>Data/Buildings</c>.</param>
            <param name="skinId">The building skin ID, if applicable.</param>
        </member>
        <member name="M:StardewValley.Menus.CarpenterMenu.BlueprintEntry.SetSkin(System.String)">
            <summary>Set the selected building skin.</summary>
            <param name="id">The skin ID.</param>
        </member>
        <member name="M:StardewValley.Menus.CarpenterMenu.BlueprintEntry.GetDisplayNameForBuildingToUpgrade">
            <summary>Get the display name for the building this upgrades from, if applicable.</summary>
        </member>
        <member name="M:StardewValley.Menus.CharacterCustomization.GetFarmTypeTooltip(System.String)">
            <summary>Load the tooltip translation for a farm type in the expected format.</summary>
            <param name="translationKey">The translation key to load.</param>
            <remarks>This returns a tooltip string in the form <c>name_description</c>.</remarks>
        </member>
        <member name="M:StardewValley.Menus.CharacterCustomization.GetValidClothingIds``1(System.String,System.Collections.Generic.IDictionary{System.String,``0},System.Func{``0,System.Boolean})">
            <summary>Get the shirts or pants which can be selected on the character customization screen.</summary>
            <typeparam name="TData">The clothing data.</typeparam>
            <param name="equippedId">The unqualified item ID for the item equipped by the player.</param>
            <param name="data">The data to search.</param>
            <param name="canChooseDuringCharacterCustomization">Get whether a clothing item should be visible on the character customization screen.</param>
        </member>
        <member name="M:StardewValley.Menus.CharacterCustomization.GetValidPantsIds">
            <summary>Get the pants which can be selected on the character customization screen.</summary>
        </member>
        <member name="M:StardewValley.Menus.CharacterCustomization.GetValidShirtIds">
            <summary>Get the shirts which can be selected on the character customization screen.</summary>
        </member>
        <member name="F:StardewValley.Menus.ChatBox.CheatCommandChatLogger">
            <summary>A logger which copies messages to the chat box, used when entering commands through the chat.</summary>
        </member>
        <member name="M:StardewValley.Menus.ColorPicker.RGBtoHSV(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>Convert RGB color values to the equivalent HSV values.</summary>
            <param name="r">The red color value.</param>
            <param name="g">The green color value.</param>
            <param name="b">The blue color value.</param>
            <param name="h">The equivalent hue value.</param>
            <param name="s">The equivalent saturation value.</param>
            <param name="v">The equivalent color value.</param>
        </member>
        <member name="M:StardewValley.Menus.ColorPicker.HsvToRgb(System.Double,System.Double,System.Double)">
            <summary>Convert HSV color values to a MonoGame color.</summary>
            <param name="hue">The hue value.</param>
            <param name="saturation">The saturation value.</param>
            <param name="value">The color value.</param>
        </member>
        <member name="M:StardewValley.Menus.ColorPicker.Clamp(System.Int32)">
            <summary>Clamp an RGB color value to the valie range (0 to 255).</summary>
            <param name="value">The RGB color value.</param>
        </member>
        <member name="M:StardewValley.Menus.CoopMenu.startListPopulation(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Menus.CraftingPage.GetRecipesToDisplay">
            <summary>Get the recipes to display in the menu.</summary>
        </member>
        <member name="F:StardewValley.Menus.DialogueBox.showTyping">
            <summary>Whether to progressively type the dialogue text into the box. If false, the dialogue appears instantly instead.</summary>
        </member>
        <member name="M:StardewValley.Menus.DialogueBox.shouldPortraitShake(StardewValley.Dialogue)">
            <summary>Get whether the current portrait should shake.</summary>
            <param name="d">The dialogue being displayed.</param>
        </member>
        <member name="M:StardewValley.Menus.FarmhandMenu.startListPopulation(System.String)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Menus.GameMenu.TabTranslationKeys">
            <summary>The translation keys for tab names.</summary>
        </member>
        <member name="M:StardewValley.Menus.IClickableMenu.snapToDefaultClickableComponent">
            <summary>
            return true if this method is overriden and a default clickablecomponent is snapped to.
            </summary>
            <returns></returns>
        </member>
        <member name="M:StardewValley.Menus.IClickableMenu.setCurrentlySnappedComponentTo(System.Int32)">
            <summary>
            Only use this if the child class overrides
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:StardewValley.Menus.IClickableMenu.actionOnRegionChange(System.Int32,System.Int32)">
            <summary>
            when the currentlySnappedComponent region changes 
            </summary>
        </member>
        <member name="T:StardewValley.Menus.SkipForClickableAggregation">
            <summary>
            When specified, this field will not be automatically added to the allClickableComponents list when it is populated.
            </summary>
        </member>
        <member name="T:StardewValley.Menus.ItemExitBehavior">
            <summary>What to do with a held item if the menu is closed before it can be put down.</summary>
        </member>
        <member name="F:StardewValley.Menus.ItemExitBehavior.ReturnToPlayer">
            <summary>Place the item in the player's inventory, if they have room.</summary>
        </member>
        <member name="F:StardewValley.Menus.ItemExitBehavior.ReturnToMenu">
            <summary>Return to the item menu's underlying source (e.g. chest or dresser). If that inventory isn't persisted, the item will be lost.</summary>
        </member>
        <member name="F:StardewValley.Menus.ItemExitBehavior.Drop">
            <summary>Drop the item on the ground.</summary>
        </member>
        <member name="F:StardewValley.Menus.ItemExitBehavior.Discard">
            <summary>Discard the item, so it'll be lost if it's not referenced from elsewhere.</summary>
        </member>
        <member name="F:StardewValley.Menus.ItemGrabMenu.source_none">
            <summary>The <see cref="F:StardewValley.Menus.ItemGrabMenu.source"/> value when a specific value doesn't apply.</summary>
        </member>
        <member name="F:StardewValley.Menus.ItemGrabMenu.source_chest">
            <summary>The <see cref="F:StardewValley.Menus.ItemGrabMenu.source"/> value when collecting items from a chest.</summary>
        </member>
        <member name="F:StardewValley.Menus.ItemGrabMenu.source_gift">
            <summary>The <see cref="F:StardewValley.Menus.ItemGrabMenu.source"/> value when collecting items which couldn't be added directly to the player's inventory (e.g. from NPC dialogue).</summary>
        </member>
        <member name="F:StardewValley.Menus.ItemGrabMenu.source_fishingChest">
            <summary>The <see cref="F:StardewValley.Menus.ItemGrabMenu.source"/> value when collecting treasure found while fishing.</summary>
        </member>
        <member name="F:StardewValley.Menus.ItemGrabMenu.source_overflow">
            <summary>The <see cref="F:StardewValley.Menus.ItemGrabMenu.source"/> value when collecting items which couldn't be added directly to the player's inventory via <see cref="M:StardewValley.Farmer.addItemByMenuIfNecessary(StardewValley.Item,StardewValley.Menus.ItemGrabMenu.behaviorOnItemSelect,System.Boolean)"/>.</summary>
        </member>
        <member name="F:StardewValley.Menus.ItemGrabMenu.ItemsToGrabMenu">
            <summary>The inventory from which the player can collect items.</summary>
        </member>
        <member name="F:StardewValley.Menus.ItemGrabMenu.behaviorFunction">
            <summary>The callback invoked when taking something out of the player inventory (e.g. putting something in the Luau soup), if any.</summary>
        </member>
        <member name="F:StardewValley.Menus.ItemGrabMenu.behaviorOnItemGrab">
            <summary>The callback invoked when taking something from the menu (e.g. to put in the player's inventory), if any.</summary>
        </member>
        <member name="F:StardewValley.Menus.ItemGrabMenu.sourceItem">
            <summary>The item for which the item menu was opened (e.g. the chest or storage furniture item being checked), if applicable.</summary>
        </member>
        <member name="F:StardewValley.Menus.ItemGrabMenu.source">
            <summary>The reason this menu was opened, usually matching a constant like <see cref="F:StardewValley.Menus.ItemGrabMenu.source_chest"/>.</summary>
        </member>
        <member name="F:StardewValley.Menus.ItemGrabMenu.context">
            <summary>A contextual value for what opened the menu. This may be a chest, event, fishing rod, location, etc.</summary>
        </member>
        <member name="F:StardewValley.Menus.ItemGrabMenu.HasUpdateTicked">
            <summary>Whether <see cref="M:StardewValley.Menus.ItemGrabMenu.update(Microsoft.Xna.Framework.GameTime)" /> has run at least once yet.</summary>
        </member>
        <member name="F:StardewValley.Menus.ItemGrabMenu._sourceItemInCurrentLocation">
            <summary>Whether the source item was placed in the current location when the menu is opened.</summary>
        </member>
        <member name="M:StardewValley.Menus.ItemGrabMenu.#ctor(System.Collections.Generic.IList{StardewValley.Item},System.Object)">
            <summary>Construct an instance.</summary>
            <param name="inventory">The items that can be collected by the player.</param>
            <param name="context">A contextual value for what opened the menu. This may be a chest, event, fishing rod, location, etc.</param>
        </member>
        <member name="M:StardewValley.Menus.ItemGrabMenu.DropRemainingItems">
            <summary>Drop any remaining items that weren't grabbed by the player onto the ground at their feet.</summary>
        </member>
        <member name="M:StardewValley.Menus.ItemGrabMenu.CreateOverflowMenu(System.Collections.Generic.IList{StardewValley.Item},StardewValley.Menus.ItemGrabMenu.behaviorOnItemSelect)">
            <summary>Create an item grab menu to collect items which couldn't be added to the player's inventory directly.</summary>
            <param name="items">The items to collect.</param>
            <param name="onCollectItem">The callback to invoke when an item is retrieved.</param>
        </member>
        <member name="M:StardewValley.Menus.ItemGrabMenu.RepositionSideButtons">
            <summary>Position the buttons that appear on the right side of the screen (e.g. to organize or fill stacks), and update their neighbor IDs.</summary>
        </member>
        <member name="M:StardewValley.Menus.ItemGrabMenu.setEssential(System.Boolean,System.Boolean)">
            <summary>Set whether to rescue items from the menu when it's force-closed (e.g. from passing out at 2am). Rescued items will be added to the player's inventory if possible, else dropped onto the ground at their feet.</summary>
            <param name="essential">Whether to rescue items on force-close.</param>
            <param name="superEssential">Whether to rescue items on normal close.</param>
        </member>
        <member name="M:StardewValley.Menus.ItemGrabMenu.FillOutStacks">
            <summary>Merge any items from the player inventory into an equivalent stack in the chest where possible.</summary>
        </member>
        <member name="M:StardewValley.Menus.ItemGrabMenu.organizeItemsInList(System.Collections.Generic.IList{StardewValley.Item})">
            <summary>Consolidate and sort item stacks in an item list.</summary>
            <param name="items">The item list to change.</param>
        </member>
        <member name="M:StardewValley.Menus.JunimoNoteMenu.GetRepresentativeItemId(StardewValley.Menus.BundleIngredientDescription)">
            <summary>Get the qualified item ID to draw in the bundle UI for an ingredient.</summary>
            <param name="ingredient">The ingredient to represent.</param>
        </member>
        <member name="F:StardewValley.Menus.Bundle.NameIndex">
            <summary>The index in the raw <c>Data/Bundles</c> data for the internal name.</summary>
        </member>
        <member name="F:StardewValley.Menus.Bundle.RewardIndex">
            <summary>The index in the raw <c>Data/Bundles</c> data for the reward data.</summary>
        </member>
        <member name="F:StardewValley.Menus.Bundle.IngredientsIndex">
            <summary>The index in the raw <c>Data/Bundles</c> data for the items needed to complete the bundle.</summary>
        </member>
        <member name="F:StardewValley.Menus.Bundle.ColorIndex">
            <summary>The index in the raw <c>Data/Bundles</c> data for the bundle color.</summary>
        </member>
        <member name="F:StardewValley.Menus.Bundle.NumberOfSlotsIndex">
            <summary>The index in the raw <c>Data/Bundles</c> data for the optional number of slots to fill.</summary>
        </member>
        <member name="F:StardewValley.Menus.Bundle.SpriteIndex">
            <summary>The index in the raw <c>Data/Bundles</c> data for the optional override texture name and sprite index.</summary>
        </member>
        <member name="F:StardewValley.Menus.Bundle.DisplayNameIndex">
            <summary>The index in the raw <c>Data/Bundles</c> data for the display name.</summary>
        </member>
        <member name="F:StardewValley.Menus.Bundle.FieldCount">
            <summary>The number of slash-delimited fields in the raw <c>Data/Bundles</c> data.</summary>
        </member>
        <member name="F:StardewValley.Menus.BundleIngredientDescription.id">
            <summary>The qualified or unqualified item ID to match, unless <see cref="F:StardewValley.Menus.BundleIngredientDescription.category"/> is set.</summary>
        </member>
        <member name="F:StardewValley.Menus.BundleIngredientDescription.preservesId">
            <summary>The item ID for the preserved item to match.</summary>
        </member>
        <member name="F:StardewValley.Menus.BundleIngredientDescription.category">
            <summary>The object category to match, unless <see cref="F:StardewValley.Menus.BundleIngredientDescription.id"/> is set.</summary>
        </member>
        <member name="F:StardewValley.Menus.BundleIngredientDescription.stack">
            <summary>The stack size required.</summary>
        </member>
        <member name="F:StardewValley.Menus.BundleIngredientDescription.quality">
            <summary>The minimum quality required.</summary>
        </member>
        <member name="F:StardewValley.Menus.BundleIngredientDescription.completed">
            <summary>Whether this bundle has been completed.</summary>
        </member>
        <member name="M:StardewValley.Menus.BundleIngredientDescription.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>Construct an instance.</summary>
            <param name="idOrCategory">The item ID or category to match.</param>
            <param name="stack">The stack size required.</param>
            <param name="quality">The minimum quality required.</param>
            <param name="completed">Whether this bundle has been completed.</param>
            <param name="preservesId">The item ID for the preserved item to match.</param>
        </member>
        <member name="F:StardewValley.Menus.LetterViewerMenu.questID">
            <summary>The ID of the quest attached to the letter being viewed, if any.</summary>
        </member>
        <member name="F:StardewValley.Menus.LetterViewerMenu.specialOrderId">
            <summary>The ID of the special order attached to the letter being viewed, if any.</summary>
        </member>
        <member name="P:StardewValley.Menus.LetterViewerMenu.HasQuestOrSpecialOrder">
            <summary>Whether the letter has an attached quest or special order which the player can accept.</summary>
        </member>
        <member name="F:StardewValley.Menus.LetterViewerMenu.learnedRecipe">
            <summary>The translated name of the recipe learned from this letter, if any.</summary>
        </member>
        <member name="M:StardewValley.Menus.LetterViewerMenu.HandleActionCommand(System.String)">
            <summary>Handle the <c>%action</c> command in the mail text, if present. This runs the action(s) and return the mail text with the commands stripped.</summary>
            <param name="mail">The mail text to parse.</param>
        </member>
        <member name="M:StardewValley.Menus.LetterViewerMenu.HandleItemCommand(System.String)">
            <summary>Handle the <c>%item</c> command in the mail text, if present. This adds the matching item to the letter and return the mail text with the command stripped.</summary>
            <param name="mail">The mail text to parse.</param>
        </member>
        <member name="M:StardewValley.Menus.LetterViewerMenu.AcceptQuest">
            <summary>Add the attached quest or special order to the player.</summary>
        </member>
        <member name="F:StardewValley.Menus.LoadGameMenu.SaveFileSlot.Farmer">
            <summary>The farmer to load for this save slot.</summary>
        </member>
        <member name="F:StardewValley.Menus.LoadGameMenu.SaveFileSlot.SlotNumber">
            <summary>The slot number to display for this slot, or <c>null</c> to calculate it automatically from its position in the list.</summary>
        </member>
        <member name="M:StardewValley.Menus.LoadGameMenu.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="filter">A search filter to apply to the displayed list of saves, if any.</param>
        </member>
        <member name="M:StardewValley.Menus.LoadGameMenu.startListPopulation(System.String)">
            <summary>Asynchronously populate the list of saves.</summary>
            <param name="filter">A search filter to apply to the displayed list of saves, if any.</param>
        </member>
        <member name="M:StardewValley.Menus.LoadGameMenu.FindSaveGames(System.String)">
            <summary>Get the save games to.</summary>
            <param name="filter">A search filter to apply to the displayed list of saves, if any.</param>
            <returns>Returns a list of farmers for which to add save slots. If a <paramref name="filter"/> is given, filtered-out slots will be null in the list.</returns>
        </member>
        <member name="T:StardewValley.Menus.MapPage">
            <summary>The in-game world map view.</summary>
        </member>
        <member name="F:StardewValley.Menus.MapPage.EnableDebugLines">
            <summary>The world map debug lines to draw, if any.</summary>
        </member>
        <member name="F:StardewValley.Menus.MapPage.mapPosition">
            <summary>The map position containing the current player.</summary>
        </member>
        <member name="F:StardewValley.Menus.MapPage.mapRegion">
            <summary>The map region containing the <see cref="F:StardewValley.Menus.MapPage.mapPosition"/>.</summary>
        </member>
        <member name="F:StardewValley.Menus.MapPage.mapAreas">
            <summary>The smaller sections of the map linked to one or more in-game locations. Each map area might be edited/swapped depending on the context, have its own tooltip(s), or have its own player marker positions.</summary>
        </member>
        <member name="F:StardewValley.Menus.MapPage.scrollText">
            <summary>The translated scroll text to show at the bottom of the map, if any.</summary>
        </member>
        <member name="F:StardewValley.Menus.MapPage.defaultComponentID">
            <summary>The default component ID in <see cref="F:StardewValley.Menus.MapPage.points"/> to which to snap the controller cursor by default.</summary>
        </member>
        <member name="F:StardewValley.Menus.MapPage.mapBounds">
            <summary>The pixel area on screen containing all the map areas being drawn.</summary>
        </member>
        <member name="F:StardewValley.Menus.MapPage.points">
            <summary>The tooltips to render, indexed by <see cref="P:StardewValley.WorldMaps.MapAreaTooltip.NamespacedId"/>.</summary>
        </member>
        <member name="F:StardewValley.Menus.MapPage.hoverText">
            <summary>The tooltip text being drawn.</summary>
        </member>
        <member name="M:StardewValley.Menus.MapPage.SetNeighborId(StardewValley.Menus.ClickableComponent,System.String,System.String)">
            <summary>Set a controller navigation ID for a tooltip component.</summary>
            <param name="component">The tooltip component whose neighbor ID to set.</param>
            <param name="direction">The direction to set.</param>
            <param name="neighborKeys">The tooltip neighbor keys to match. See remarks on <see cref="F:StardewValley.GameData.WorldMaps.WorldMapTooltipData.LeftNeighbor"/> for details on the format.</param>
            <returns>Returns whether the <paramref name="neighborKeys"/> matched an existing tooltip neighbor ID.</returns>
        </member>
        <member name="M:StardewValley.Menus.MapPage.TryGetNeighborId(System.String,System.Int32@,System.Boolean@,System.Boolean)">
            <summary>Get the controller navigation ID for a tooltip neighbor field value.</summary>
            <param name="keys">The tooltip neighbor keys to match. See remarks on <see cref="F:StardewValley.GameData.WorldMaps.WorldMapTooltipData.LeftNeighbor"/> for details on the format.</param>
            <param name="id">The matching controller navigation ID, if found.</param>
            <param name="foundIgnore">Whether the neighbor IDs contains <c>ignore</c>, which indicates it should be skipped silently if none match.</param>
            <param name="isAlias">Whether the <paramref name="keys"/> are from an alias in <see cref="F:StardewValley.GameData.WorldMaps.WorldMapRegionData.MapNeighborIdAliases"/>.</param>
            <returns>Returns <c>true</c> if the neighbor ID was found, else <c>false</c>.</returns>
        </member>
        <member name="M:StardewValley.Menus.MapPage.GetNormalizedPlayerTile(StardewValley.Farmer)">
            <summary>Get the tile coordinate for a player, with negative values snapped to zero.</summary>
            <param name="player">The player instance.</param>
        </member>
        <member name="T:StardewValley.Menus.MapPage.WorldMapDebugLineType">
            <summary>The world map debug lines to draw.</summary>
        </member>
        <member name="F:StardewValley.Menus.MapPage.WorldMapDebugLineType.None">
            <summary>Don't show debug lines on the map.</summary>
        </member>
        <member name="F:StardewValley.Menus.MapPage.WorldMapDebugLineType.Areas">
            <summary>Highlight map areas.</summary>
        </member>
        <member name="F:StardewValley.Menus.MapPage.WorldMapDebugLineType.Positions">
            <summary>Highlight map position rectangles.</summary>
        </member>
        <member name="F:StardewValley.Menus.MapPage.WorldMapDebugLineType.Tooltips">
            <summary>Highlight tooltip rectangles.</summary>
        </member>
        <member name="F:StardewValley.Menus.MapPage.WorldMapDebugLineType.All">
            <summary>Highlight all types.</summary>
        </member>
        <member name="F:StardewValley.Menus.MenuWithInventory.HeldItemExitBehavior">
            <summary>What to do with the <see cref="P:StardewValley.Menus.MenuWithInventory.heldItem"/> if the menu is closed before it can be put down.</summary>
        </member>
        <member name="F:StardewValley.Menus.MenuWithInventory.AllowExitWithHeldItem">
            <summary>Whether to allow exiting the menu while the player has a held item on their cursor. The <see cref="F:StardewValley.Menus.MenuWithInventory.HeldItemExitBehavior"/> will be applied.</summary>
        </member>
        <member name="M:StardewValley.Menus.MenuWithInventory.RescueHeldItemOnExit">
            <summary>Rescue the <see cref="P:StardewValley.Menus.MenuWithInventory.heldItem"/> if the menu is exiting.</summary>
        </member>
        <member name="F:StardewValley.Menus.MuseumMenu.Museum">
            <summary>The museum for which the menu was opened.</summary>
        </member>
        <member name="F:StardewValley.Menus.ProfileMenu.Current">
            <summary>The current character being shown in the menu.</summary>
        </member>
        <member name="F:StardewValley.Menus.ProfileMenu.SocialEntries">
            <summary>The social entries for characters that can be viewed in the profile menu.</summary>
        </member>
        <member name="M:StardewValley.Menus.ProfileMenu.drawNPCSlotHeart(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,System.Single,StardewValley.Menus.SocialPage.SocialEntry,System.Int32,System.Boolean,System.Boolean)">
            <summary>Draw the heart sprite for an NPC's entry in the social page.</summary>
            <param name="b">The sprite batch being drawn.</param>
            <param name="heartDrawStartX">The left X position at which to draw the first heart.</param>
            <param name="heartDrawStartY">The top Y position at which to draw hearts.</param>
            <param name="entry">The NPC's cached social data.</param>
            <param name="hearts">The current heart index being drawn (starting at 0 for the first heart).</param>
            <param name="isDating">Whether the player is currently dating this NPC.</param>
            <param name="isCurrentSpouse">Whether the player is currently married to this NPC.</param>
        </member>
        <member name="F:StardewValley.Menus.PurchaseAnimalsMenu.onFarm">
            <summary>Whether the menu is currently showing the target location (regardless of whether it's the farm), so the player can choose a building to put animals in.</summary>
        </member>
        <member name="F:StardewValley.Menus.PurchaseAnimalsMenu.currentScroll">
            <summary>The index of the row shown at the top of the shop menu.</summary>
        </member>
        <member name="F:StardewValley.Menus.PurchaseAnimalsMenu.scrollRows">
            <summary>The number of shop rows that are off-screen.</summary>
        </member>
        <member name="F:StardewValley.Menus.PurchaseAnimalsMenu.TargetLocation">
            <summary>The location in which to construct or manage buildings.</summary>
        </member>
        <member name="M:StardewValley.Menus.PurchaseAnimalsMenu.#ctor(System.Collections.Generic.List{StardewValley.Object},StardewValley.GameLocation)">
            <summary>Construct an instance.</summary>
            <param name="stock">The animals available to purchase.</param>
            <param name="targetLocation">The location for which to purchase animals, or <c>null</c> for the farm.</param>
        </member>
        <member name="M:StardewValley.Menus.PurchaseAnimalsMenu.GetOffScreenRows(System.Int32)">
            <summary>Get the number of shop rows that are off-screen.</summary>
            <param name="animalsToPurchase">The number of animals available to purchase.</param>
        </member>
        <member name="M:StardewValley.Menus.PurchaseAnimalsMenu.GetSuggestedBuilding(StardewValley.FarmAnimal)">
            <summary>Get a suggested building to preselect when opening the menu.</summary>
            <param name="animal">The farm animal being placed.</param>
            <returns>Returns a building which has room for the animal, else a building which could accept the animal if it wasn't full, else null.</returns>
        </member>
        <member name="M:StardewValley.Menus.PurchaseAnimalsMenu.GetTopLeftPixelToCenterBuilding(StardewValley.Buildings.Building)">
            <summary>Get the pixel position relative to the top-left corner of the map at which to set the viewpoint so a given building is centered on screen.</summary>
            <param name="building">The building to center on screen.</param>
        </member>
        <member name="M:StardewValley.Menus.QuestLog.paginateQuests">
            <summary>Get the paginated list of quests which should be shown in the quest log.</summary>
        </member>
        <member name="M:StardewValley.Menus.QuestLog.GetAllQuests">
            <summary>Get the quests which should be shown in the quest log.</summary>
        </member>
        <member name="F:StardewValley.Menus.ShopMenu.openMenuSound">
            <summary>The sound played when the shop menu is opened.</summary>
        </member>
        <member name="F:StardewValley.Menus.ShopMenu.purchaseSound">
            <summary>The sound played when an item is purchased normally.</summary>
        </member>
        <member name="F:StardewValley.Menus.ShopMenu.purchaseRepeatSound">
            <summary>The repeating sound played when accumulating a stack to purchase (e.g. by holding right-click on PC).</summary>
        </member>
        <member name="F:StardewValley.Menus.ShopMenu.ShopId">
            <summary>A key which identifies the current shop. This may be the unique shop ID in <c>Data/Shops</c> for a standard shop, <c>Dresser</c> or <c>FishTank</c> for furniture, etc.</summary>
        </member>
        <member name="F:StardewValley.Menus.ShopMenu.ShopData">
            <summary>The underlying shop data, if this is a standard shop from <c>Data/Shops</c>.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.VisualTheme">
            <summary>The visual theme applied to the shop UI.</summary>
            <remarks>This can be set via <see cref="M:StardewValley.Menus.ShopMenu.SetVisualTheme(StardewValley.GameData.Shops.ShopThemeData)"/>.</remarks>
        </member>
        <member name="F:StardewValley.Menus.ShopMenu.DefaultStackDrawType">
            <summary>How to draw stack size numbers in the shop list by default. If set, this overrides <see cref="F:StardewValley.GameData.Shops.ShopData.StackSizeVisibility"/>.</summary>
        </member>
        <member name="F:StardewValley.Menus.ShopMenu.forSale">
            <summary>The items sold in the shop.</summary>
        </member>
        <member name="F:StardewValley.Menus.ShopMenu.itemPriceAndStock">
            <summary>The stock info for each item in <see cref="F:StardewValley.Menus.ShopMenu.forSale"/>.</summary>
        </member>
        <member name="F:StardewValley.Menus.ShopMenu.currency">
            <summary>The currency in which all items in the shop should be priced. The valid values are 0 (money), 1 (star tokens), 2 (Qi coins), and 4 (Qi gems).</summary>
        </member>
        <member name="F:StardewValley.Menus.ShopMenu.onPurchase">
            <summary>A callback to invoke when the player purchases an item, if any.</summary>
        </member>
        <member name="F:StardewValley.Menus.ShopMenu.onSell">
            <summary>A callback to invoke when the player sells an item, if any.</summary>
        </member>
        <member name="F:StardewValley.Menus.ShopMenu.safetyTimer">
            <summary>The number of milliseconds until the menu will allow buying or selling items, to help avoid doing so accidentally.</summary>
        </member>
        <member name="M:StardewValley.Menus.ShopMenu.#ctor(System.String,StardewValley.GameData.Shops.ShopData,StardewValley.GameData.Shops.ShopOwnerData,StardewValley.NPC,System.Func{StardewValley.ISalable,StardewValley.Farmer,System.Int32,System.Boolean},System.Func{StardewValley.ISalable,System.Boolean},System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="shopId">The unique shop ID in <c>Data\Shops</c>.</param>
            <param name="shopData">The shop data from <c>Data/Shops</c>.</param>
            <param name="ownerData">The owner entry for the shop portrait and dialogue, or <c>null</c> to disable those.</param>
            <param name="owner">The NPC matching <paramref name="ownerData"/> whose portrait to show, if applicable.</param>
            <param name="onPurchase">A callback to invoke when the player purchases an item, if any.</param>
            <param name="onSell">A callback to invoke when the player sells an item, if any.</param>
            <param name="playOpenSound">Whether to play the open-menu sound.</param>
        </member>
        <member name="M:StardewValley.Menus.ShopMenu.#ctor(System.String,System.Collections.Generic.Dictionary{StardewValley.ISalable,StardewValley.ItemStockInformation},System.Int32,System.String,System.Func{StardewValley.ISalable,StardewValley.Farmer,System.Int32,System.Boolean},System.Func{StardewValley.ISalable,System.Boolean},System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="shopId">A key which identifies the current shop.</param>
            <param name="itemPriceAndStock">The items to sell in the shop.</param>
            <param name="currency">The currency in which all items in the shop should be priced. The valid values are 0 (money), 1 (star tokens), 2 (Qi coins), and 4 (Qi gems).</param>
            <param name="who">The internal name for the NPC running the shop, if any.</param>
            <param name="on_purchase">A callback to invoke when the player purchases an item, if any.</param>
            <param name="on_sell">A callback to invoke when the player sells an item, if any.</param>
            <param name="playOpenSound">Whether to play the open-menu sound.</param>
        </member>
        <member name="M:StardewValley.Menus.ShopMenu.#ctor(System.String,System.Collections.Generic.List{StardewValley.ISalable},System.Int32,System.String,System.Func{StardewValley.ISalable,StardewValley.Farmer,System.Int32,System.Boolean},System.Func{StardewValley.ISalable,System.Boolean},System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="shopId">A key which identifies the current shop.</param>
            <param name="itemsForSale">The items to sell in the shop.</param>
            <param name="currency">The currency in which all items in the shop should be priced. The valid values are 0 (money), 1 (star tokens), 2 (Qi coins), and 4 (Qi gems).</param>
            <param name="who">The internal name for the NPC running the shop, if any.</param>
            <param name="on_purchase">A callback to invoke when the player purchases an item, if any.</param>
            <param name="on_sell">A callback to invoke when the player sells an item, if any.</param>
            <param name="playOpenSound">Whether to play the open-menu sound.</param>
        </member>
        <member name="M:StardewValley.Menus.ShopMenu.SetVisualTheme(StardewValley.GameData.Shops.ShopThemeData)">
            <summary>Set the visual theme for the shop menu.</summary>
            <param name="theme">The visual theme to display, or <c>null</c> for the default theme.</param>
            <remarks>The visual theme is usually set in <c>Data/Shops</c> instead of calling this method directly.</remarks>
        </member>
        <member name="M:StardewValley.Menus.ShopMenu.Initialize(System.Int32,System.Func{StardewValley.ISalable,StardewValley.Farmer,System.Int32,System.Boolean},System.Func{StardewValley.ISalable,System.Boolean},System.Boolean)">
            <summary>Initialize the shop menu after the stock has been constructed.</summary>
            <param name="currency">The currency in which all items in the shop should be priced. The valid values are 0 (money), 1 (star tokens), 2 (Qi coins), and 4 (Qi gems).</param>
            <param name="onPurchase">A callback to invoke when the player purchases an item, if any.</param>
            <param name="onSell">A callback to invoke when the player sells an item, if any.</param>
            <param name="playOpenSound">Whether to play the open-menu sound.</param>
        </member>
        <member name="M:StardewValley.Menus.ShopMenu.AddForSale(StardewValley.ISalable,System.Nullable{StardewValley.ItemStockInformation})">
            <summary>Add an item to sell in the menu.</summary>
            <param name="item">The item instance to sell.</param>
            <param name="stock">The stock information, or <c>null</c> to create it automatically.</param>
        </member>
        <member name="M:StardewValley.Menus.ShopMenu.UseNoTabs">
            <summary>Remove the filter tabs, if any.</summary>
        </member>
        <member name="M:StardewValley.Menus.ShopMenu.UseFurnitureCatalogueTabs">
            <summary>Add the filter tabs for a furniture catalogue (e.g. tables, seats, paintings, etc).</summary>
        </member>
        <member name="M:StardewValley.Menus.ShopMenu.UseCatalogueTabs">
            <summary>Add the filter tabs for a catalogue (e.g. flooring and wallpaper).</summary>
        </member>
        <member name="M:StardewValley.Menus.ShopMenu.UseDresserTabs">
            <summary>Add the filter tabs for a dresser (e.g. hats, shirts, pants, etc).</summary>
        </member>
        <member name="M:StardewValley.Menus.ShopMenu.SetUpShopOwner(StardewValley.GameData.Shops.ShopOwnerData,StardewValley.NPC)">
            <summary>Set the shop portrait and dialogue.</summary>
            <param name="ownerData">The owner entry in the shop data.</param>
            <param name="owner">The specific NPC which matches the <paramref name="ownerData"/>, if set.</param>
        </member>
        <member name="M:StardewValley.Menus.ShopMenu.TryLoadPortrait(StardewValley.GameData.Shops.ShopOwnerData,StardewValley.NPC)">
            <summary>Get the portrait to show for the selected NPC, if any.</summary>
            <param name="ownerData">The shop owner data.</param>
            <param name="owner">The specific NPC which matches the <paramref name="ownerData"/>, if set.</param>
        </member>
        <member name="M:StardewValley.Menus.ShopMenu.PlayOpenSound">
            <summary>Play the open-menu sound.</summary>
        </member>
        <member name="M:StardewValley.Menus.ShopMenu.IsOutOfStock">
            <summary>Get whether all items in the shop have been purchased.</summary>
        </member>
        <member name="M:StardewValley.Menus.ShopMenu.HasTradeItem(System.String,System.Int32)">
            <summary>Get whether the player's inventory contains a minimum number of a trade item.</summary>
            <param name="itemId">The qualified or unqualified item ID to find.</param>
            <param name="count">The number needed.</param>
        </member>
        <member name="M:StardewValley.Menus.ShopMenu.ConsumeTradeItem(System.String,System.Int32)">
            <summary>Reduce the number of an item held by the player.</summary>
            <param name="itemId">The qualified or unqualified item ID.</param>
            <param name="count">The number to remove.</param>
        </member>
        <member name="M:StardewValley.Menus.ShopMenu.GetStackDrawType(StardewValley.ItemStockInformation,StardewValley.ISalable)">
            <summary>Get how the stack size for a shop entry should be drawn.</summary>
            <param name="stockInfo">The shop entry's stock information.</param>
            <param name="item">The spawned item instance.</param>
        </member>
        <member name="T:StardewValley.Menus.ShopMenu.ShopCachedTheme">
            <summary>A cached visual theme for the <see cref="T:StardewValley.Menus.ShopMenu"/>.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ThemeData">
            <summary>The visual theme data from <c>Data/Shops</c>, if applicable.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.WindowBorderTexture">
            <summary>The texture for the shop window border.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.WindowBorderSourceRect">
            <summary>The pixel area within the <see cref="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.WindowBorderSourceRect"/> for the shop window border. This should be an 18x18 pixel area.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.PortraitBackgroundTexture">
            <summary>The texture for the NPC portrait background.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.PortraitBackgroundSourceRect">
            <summary>The pixel area within the <see cref="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.PortraitBackgroundTexture"/> for the NPC portrait background. This should be a 74x47 pixel area.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.DialogueBackgroundTexture">
            <summary>The texture for the NPC dialogue background.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.DialogueBackgroundSourceRect">
            <summary>The pixel area within the <see cref="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.DialogueBackgroundTexture"/> for the NPC dialogue background. This should be a 60x60 pixel area.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.DialogueColor">
            <summary>The sprite text color for the dialogue text, or <c>null</c> for the default color.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.DialogueShadowColor">
            <summary>The sprite text shadow color for the dialogue text, or <c>null</c> for the default color.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ItemRowBackgroundTexture">
            <summary>The texture for the item row background.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ItemRowBackgroundSourceRect">
            <summary>The pixel area within the <see cref="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ItemRowBackgroundTexture"/> for the item row background. This should be a 15x15 pixel area.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ItemRowBackgroundHoverColor">
            <summary>The color tint to apply to the item row background when the cursor is hovering over it</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ItemRowTextColor">
            <summary>The sprite text color for the item text, or <c>null</c> for the default color.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ItemIconBackgroundTexture">
            <summary>The texture for the box behind the item icons.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ItemIconBackgroundSourceRect">
            <summary>The pixel area within the <see cref="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ItemIconBackgroundTexture"/> for the item icon background. This should be an 18x18 pixel area.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ScrollUpTexture">
            <summary>The texture for the scroll up icon.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ScrollUpSourceRect">
            <summary>The pixel area within the <see cref="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ScrollUpTexture"/> for the scroll up icon. This should be an 11x12 pixel area.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ScrollDownTexture">
            <summary>The texture for the scroll down icon.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ScrollDownSourceRect">
            <summary>The pixel area within the <see cref="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ScrollDownTexture"/> for the scroll down icon. This should be an 11x12 pixel area.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ScrollBarFrontTexture">
            <summary>The texture for the scrollbar foreground texture.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ScrollBarFrontSourceRect">
            <summary>The pixel area within the <see cref="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ScrollBarFrontTexture"/> for the scroll foreground. This should be a 6x10 pixel area.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ScrollBarBackTexture">
            <summary>The texture for the scrollbar background texture.</summary>
        </member>
        <member name="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ScrollBarBackSourceRect">
            <summary>The pixel area within the <see cref="P:StardewValley.Menus.ShopMenu.ShopCachedTheme.ScrollBarBackTexture"/> for the scroll background. This should be a 6x6 pixel area.</summary>
        </member>
        <member name="M:StardewValley.Menus.ShopMenu.ShopCachedTheme.#ctor(StardewValley.GameData.Shops.ShopThemeData)">
            <summary>Construct an instance.</summary>
            <param name="theme">The visual theme data, or <c>null</c> for the default shop theme.</param>
        </member>
        <member name="M:StardewValley.Menus.ShopMenu.ShopCachedTheme.LoadThemeTexture(System.String,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Load a theme texture if it's non-null and exists, else get the default texture.</summary>
            <param name="customTextureName">The custom texture asset name to load.</param>
            <param name="defaultTexture">The default texture.</param>
        </member>
        <member name="T:StardewValley.Menus.ShopMenu.ShopTabClickableTextureComponent">
            <summary>A clickable component representing a shop tab, which applies a filter to the list of displayed shop items when clicked.</summary>
        </member>
        <member name="F:StardewValley.Menus.ShopMenu.ShopTabClickableTextureComponent.Filter">
            <summary>Matches items to show when this tab is selected.</summary>
        </member>
        <member name="F:StardewValley.Menus.SocialPage.SocialEntries">
            <summary>The players and social NPCs shown in the list.</summary>
        </member>
        <member name="F:StardewValley.Menus.SocialPage.sprites">
            <summary>The character portrait components.</summary>
        </member>
        <member name="F:StardewValley.Menus.SocialPage.slotPosition">
            <summary>The index of the <see cref="F:StardewValley.Menus.SocialPage.SocialEntries"/> entry shown at the top of the scrolled view.</summary>
        </member>
        <member name="F:StardewValley.Menus.SocialPage.numFarmers">
            <summary>The number of players shown in the list.</summary>
        </member>
        <member name="F:StardewValley.Menus.SocialPage.characterSlots">
            <summary>The clickable slots over which character info is drawn.</summary>
        </member>
        <member name="M:StardewValley.Menus.SocialPage.FindSocialCharacters">
            <summary>Find all social NPCs which should be shown on the social page.</summary>
        </member>
        <member name="M:StardewValley.Menus.SocialPage.GetAllNpcs">
            <summary>Get all child or villager NPCs from the world and friendship data.</summary>
        </member>
        <member name="M:StardewValley.Menus.SocialPage.CreateComponents">
            <summary>Load the clickable components to display.</summary>
        </member>
        <member name="M:StardewValley.Menus.SocialPage.CreateSpriteComponent(StardewValley.Menus.SocialPage.SocialEntry,System.Int32)">
            <summary>Create the clickable texture component for a character's portrait.</summary>
            <param name="entry">The social character to render.</param>
            <param name="index">The index in the list of entries.</param>
        </member>
        <member name="M:StardewValley.Menus.SocialPage.GetSocialEntry(System.Int32)">
            <summary>Get the social entry from its index in the list.</summary>
            <param name="index">The index in the social list.</param>
        </member>
        <member name="M:StardewValley.Menus.SocialPage.drawNPCSlot(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32)">
            <summary>Draw an NPC's entry in the social page.</summary>
            <param name="b">The sprite batch being drawn.</param>
            <param name="i">The index of the NPC in <see cref="F:StardewValley.Menus.SocialPage.sprites"/>.</param>
        </member>
        <member name="M:StardewValley.Menus.SocialPage.drawNPCSlotHeart(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32,StardewValley.Menus.SocialPage.SocialEntry,System.Int32,System.Boolean,System.Boolean)">
            <summary>Draw the heart sprite for an NPC's entry in the social page.</summary>
            <param name="b">The sprite batch being drawn.</param>
            <param name="npcIndex">The index of the NPC in <see cref="F:StardewValley.Menus.SocialPage.sprites"/>.</param>
            <param name="entry">The NPC's cached social data.</param>
            <param name="hearts">The current heart index being drawn (starting at 0 for the first heart).</param>
            <param name="isDating">Whether the player is currently dating this NPC.</param>
            <param name="isCurrentSpouse">Whether the player is currently married to this NPC.</param>
        </member>
        <member name="T:StardewValley.Menus.SocialPage.SocialEntry">
            <summary>An entry on the social page.</summary>
        </member>
        <member name="F:StardewValley.Menus.SocialPage.SocialEntry.CachedIsMarriedToAnyone">
            <summary>The backing field for <see cref="M:StardewValley.Menus.SocialPage.SocialEntry.IsMarriedToAnyone"/>.</summary>
        </member>
        <member name="F:StardewValley.Menus.SocialPage.SocialEntry.Character">
            <summary>The character instance.</summary>
        </member>
        <member name="F:StardewValley.Menus.SocialPage.SocialEntry.InternalName">
            <summary>The unique multiplayer ID for a player, or the internal name for an NPC.</summary>
        </member>
        <member name="F:StardewValley.Menus.SocialPage.SocialEntry.DisplayName">
            <summary>The translated display name.</summary>
        </member>
        <member name="F:StardewValley.Menus.SocialPage.SocialEntry.IsMet">
            <summary>Whether the current player has met this character.</summary>
        </member>
        <member name="F:StardewValley.Menus.SocialPage.SocialEntry.IsDatable">
            <summary>Whether players can romance this character.</summary>
        </member>
        <member name="F:StardewValley.Menus.SocialPage.SocialEntry.SocialTabBehavior">
            <summary>How the NPC is shown on the social tab.</summary>
        </member>
        <member name="F:StardewValley.Menus.SocialPage.SocialEntry.IsChild">
            <summary>Whether this character is a child.</summary>
        </member>
        <member name="F:StardewValley.Menus.SocialPage.SocialEntry.IsPlayer">
            <summary>Whether this character is a player.</summary>
        </member>
        <member name="F:StardewValley.Menus.SocialPage.SocialEntry.Gender">
            <summary>The character's gender identity.</summary>
        </member>
        <member name="F:StardewValley.Menus.SocialPage.SocialEntry.HeartLevel">
            <summary>The current player's heart level with this character.</summary>
        </member>
        <member name="F:StardewValley.Menus.SocialPage.SocialEntry.Friendship">
            <summary>The current player's friendship data with the character, if any.</summary>
        </member>
        <member name="F:StardewValley.Menus.SocialPage.SocialEntry.Data">
            <summary>The NPC's character data, if applicable.</summary>
        </member>
        <member name="F:StardewValley.Menus.SocialPage.SocialEntry.OrderMet">
            <summary>The order in which the current player met this NPC, if applicable.</summary>
        </member>
        <member name="M:StardewValley.Menus.SocialPage.SocialEntry.#ctor(StardewValley.Farmer,StardewValley.Friendship)">
            <summary>Construct an instance.</summary>
            <param name="player">The player for which to create an entry.</param>
            <param name="friendship">The current player's friendship with this character.</param>
        </member>
        <member name="M:StardewValley.Menus.SocialPage.SocialEntry.#ctor(StardewValley.NPC,StardewValley.Friendship,StardewValley.GameData.Characters.CharacterData,System.String)">
            <summary>Construct an instance.</summary>
            <param name="npc">The NPC for which to create an entry.</param>
            <param name="friendship">The current player's friendship with this character.</param>
            <param name="data">The NPC's character data, if applicable.</param>
            <param name="overrideDisplayName">The translated display name, or <c>null</c> to get it from <paramref name="npc"/>.</param>
        </member>
        <member name="M:StardewValley.Menus.SocialPage.SocialEntry.IsDatingCurrentPlayer">
            <summary>Get whether the current player is dating this character.</summary>
        </member>
        <member name="M:StardewValley.Menus.SocialPage.SocialEntry.IsMarriedToCurrentPlayer">
            <summary>Get whether the current player is married to this character.</summary>
        </member>
        <member name="M:StardewValley.Menus.SocialPage.SocialEntry.IsRoommateForCurrentPlayer">
            <summary>Get whether the current player is a roommate with this character.</summary>
        </member>
        <member name="M:StardewValley.Menus.SocialPage.SocialEntry.IsDivorcedFromCurrentPlayer">
            <summary>Get whether the current player is married to this character.</summary>
        </member>
        <member name="M:StardewValley.Menus.SocialPage.SocialEntry.IsMarriedToAnyone">
            <summary>Get whether this character is married to any player.</summary>
        </member>
        <member name="M:StardewValley.Menus.SpecialCurrencyDisplay.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle)">
            <summary>Draw a very basic static money dial which can only do 3 digits.</summary>
        </member>
        <member name="M:StardewValley.Menus.TailoringMenu.ConvertLegacyItemId(System.String)">
            <summary>Get an item ID for a legacy output from Stardew Valley 1.5.5 and earlier.</summary>
            <param name="id">The legacy item ID.</param>
        </member>
        <member name="P:StardewValley.Menus.TextBox.TitleText">
            <summary>
            Displayed as the title for virtual keyboards.
            </summary>
        </member>
        <member name="E:StardewValley.Menus.TitleMenu.OnCreatedNewCharacter">
            <summary>An event raised when the player clicks the button to start after creating their new main character.</summary>
        </member>
        <member name="F:StardewValley.Objects.PetLicense.Delimiter">
            <summary>The delimiter between the pet ID and breed ID in the <see cref="P:StardewValley.Object.Name"/> field.</summary>
        </member>
        <member name="M:StardewValley.Objects.BedFurniture.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.BedFurniture.placementAction(StardewValley.GameLocation,System.Int32,System.Int32,StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.BedFurniture.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.BedFurniture.GetOneCopyFrom(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.BedFurniture.actionOnPlayerEntryOrPlacement(StardewValley.GameLocation,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Objects.Boots.displayName">
            <summary>The cached value for <see cref="P:StardewValley.Objects.Boots.DisplayName"/>.</summary>
        </member>
        <member name="P:StardewValley.Objects.Boots.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Boots.MigrateLegacyItemId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Boots.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Boots.salePrice(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Boots.onEquip(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Boots.onUnequip(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Boots.getCategoryName">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Objects.Boots.DisplayName">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Boots.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Boots.GetOneCopyFrom(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Objects.BreakableContainer.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.BreakableContainer.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.BreakableContainer.GetBarrelForMines(Microsoft.Xna.Framework.Vector2,StardewValley.Locations.MineShaft)">
            <summary>Get a barrel to place in the mines or Skull Cavern.</summary>
            <param name="tile">The tile position at which it'll be placed.</param>
            <param name="mine">The mine level.</param>
        </member>
        <member name="M:StardewValley.Objects.BreakableContainer.GetBarrelForVolcanoDungeon(Microsoft.Xna.Framework.Vector2)">
            <summary>Get a barrel to place in the Volcano Dungeon.</summary>
            <param name="tile">The tile position at which it'll be placed.</param>
        </member>
        <member name="M:StardewValley.Objects.BreakableContainer.GetChipColor">
            <summary>Get the color of cosmetic chip debris when breaking this container.</summary>
        </member>
        <member name="P:StardewValley.Objects.Cask.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Cask.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Cask.OutputCask(StardewValley.Object,StardewValley.Item,System.Boolean,StardewValley.GameData.Machines.MachineItemOutput,System.Nullable{System.Int32}@)">
            <summary>Get the output item to produce for a cask.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.MachineOutputDelegate"/>
        </member>
        <member name="M:StardewValley.Objects.Cask.TryApplyFairyDust(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Objects.Chest.hitTimerInstance">
            <summary>The underlying <see cref="T:StardewValley.Network.ChestHit.ChestHitTimer" /> instance used by <see cref="P:StardewValley.Objects.Chest.HitTimerInstance" />.</summary>
        </member>
        <member name="P:StardewValley.Objects.Chest.HitTimerInstance">
            <summary>A read-only <see cref="T:StardewValley.Network.ChestHit.ChestHitTimer" /> that is automatically created or fetched from <see cref="F:StardewValley.Network.ChestHit.ChestHitSynchronizer.SavedTimers" />.</summary>
        </member>
        <member name="F:StardewValley.Objects.Chest.netItems">
            <summary>The backing field for <see cref="P:StardewValley.Objects.Chest.Items"/>.</summary>
        </member>
        <member name="F:StardewValley.Objects.Chest.giftbox">
            <summary>Whether this is a gift box. This changes the chest's appearance, and when the player interacts with the chest they'll receive all the items directly and the chest will disappear.</summary>
        </member>
        <member name="F:StardewValley.Objects.Chest.giftboxIndex">
            <summary>If <see cref="F:StardewValley.Objects.Chest.giftbox"/> is true, the sprite index to draw from the <see cref="F:StardewValley.Game1.giftboxName"/> texture.</summary>
        </member>
        <member name="F:StardewValley.Objects.Chest.giftboxIsStarterGift">
            <summary>If <see cref="F:StardewValley.Objects.Chest.giftbox"/> is true, whether this is the starter gift for a player in their cabin or farmhouse.</summary>
        </member>
        <member name="F:StardewValley.Objects.Chest.globalInventoryId">
            <summary>The backing field for <see cref="P:StardewValley.Objects.Chest.GlobalInventoryId"/>.</summary>
        </member>
        <member name="P:StardewValley.Objects.Chest.GlobalInventoryId">
            <summary>If set, the inventory ID in <see cref="F:StardewValley.FarmerTeam.globalInventories"/> to use for this chest instead of its local item list.</summary>
        </member>
        <member name="M:StardewValley.Objects.Chest.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Chest.HandleChestHit(StardewValley.Network.ChestHit.ChestHitArgs)">
            <summary>Handles a player hitting this chest.</summary>
            <param name="args">The arguments for the chest hit event.</param>
        </member>
        <member name="M:StardewValley.Objects.Chest.TryMoveToSafePosition(System.Nullable{System.Int32})">
            <summary>Try to shove this chest onto an unoccupied nearby tile.</summary>
            <param name="preferDirection">The direction in which to move the chest if possible, matching a constant like <see cref="F:StardewValley.Game1.up"/>.</param>
            <returns>Returns whether the chest was successfully moved to an unoccupied space.</returns>
        </member>
        <member name="M:StardewValley.Objects.Chest.placementAction(StardewValley.GameLocation,System.Int32,System.Int32,StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Chest.SetSpecialChestType">
            <summary>Set the special chest type based on the chest's item ID.</summary>
        </member>
        <member name="M:StardewValley.Objects.Chest.performObjectDropInAction(StardewValley.Item,System.Boolean,StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Chest.checkForAction(StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Chest.CheckAutoLoad(StardewValley.Farmer)">
            <summary>If there's an object below this chest, try to auto-load its inventory from this chest.</summary>
            <param name="who">The player who interacted with the chest.</param>
        </member>
        <member name="M:StardewValley.Objects.Chest.actionOnPlayerEntry">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Chest.ForEachItem(StardewValley.Delegates.ForEachItemDelegate)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Objects.Clothing.obsolete_indexInTileSheetFemale">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="F:StardewValley.Objects.Clothing.indexInTileSheet"/> instead.</summary>
        </member>
        <member name="P:StardewValley.Objects.Clothing.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Clothing.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Clothing.LoadData(System.Boolean,System.Boolean)">
            <summary>Apply the data from <see cref="F:StardewValley.Game1.pantsData"/> or <see cref="F:StardewValley.Game1.shirtData"/> to this item instance.</summary>
            <param name="applyColor">Whether to parse the tint color in field 6; else the tint is set to neutral white.</param>
            <param name="forceReload">Whether to reapply the latest data, even if this item was previously initialized.</param>
        </member>
        <member name="M:StardewValley.Objects.Clothing.getCategoryName">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Clothing.salePrice(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Objects.Clothing.DisplayName">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Clothing.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Clothing.GetOneCopyFrom(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.ColoredObject.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.ColoredObject.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.ColoredObject.GetOneCopyFrom(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.CombinedRing.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.CombinedRing.GetOneCopyFrom(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.CombinedRing.onEquip(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.CombinedRing.onUnequip(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.CombinedRing.onMonsterSlay(StardewValley.Monsters.Monster,StardewValley.GameLocation,StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.CombinedRing.OnCombinedRingsChanged">
            <summary>Update data when the <see cref="F:StardewValley.Objects.CombinedRing.combinedRings"/> list changes.</summary>
        </member>
        <member name="M:StardewValley.Objects.CrabPot.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.CrabPot.addOverlayTiles">
            <summary>Add any tiles that might overlap with this crab pot incorrectly to the <see cref="F:StardewValley.Game1.crabPotOverlayTiles"/> dictionary.</summary>
        </member>
        <member name="M:StardewValley.Objects.CrabPot.removeOverlayTiles">
            <summary>Remove any tiles that might overlap with this crab pot incorrectly from the <see cref="F:StardewValley.Game1.crabPotOverlayTiles"/> dictionary.</summary>
        </member>
        <member name="M:StardewValley.Objects.CrabPot.actionOnPlayerEntry">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.CrabPot.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.CrabPot.performObjectDropInAction(StardewValley.Item,System.Boolean,StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.CrabPot.checkForAction(StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.FishTankFurniture.actionOnPlayerEntryOrPlacement(StardewValley.GameLocation,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.FishTankFurniture.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.FishTankFurniture.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.FishTankFurniture.checkForAction(StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.FishTankFurniture.placementAction(StardewValley.GameLocation,System.Int32,System.Int32,StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Objects.TankFish.field_spriteIndex">
            <summary>The field index in <c>Data/AquariumFish</c> for the sprite index.</summary>
        </member>
        <member name="F:StardewValley.Objects.TankFish.field_type">
            <summary>The field index in <c>Data/AquariumFish</c> for the type.</summary>
        </member>
        <member name="F:StardewValley.Objects.TankFish.field_idleAnimations">
            <summary>The field index in <c>Data/AquariumFish</c> for the idle animations.</summary>
        </member>
        <member name="F:StardewValley.Objects.TankFish.field_dartStartFrames">
            <summary>The field index in <c>Data/AquariumFish</c> for the dart start animation frames.</summary>
        </member>
        <member name="F:StardewValley.Objects.TankFish.field_dartHoldFrames">
            <summary>The field index in <c>Data/AquariumFish</c> for the dart hold animation frames.</summary>
        </member>
        <member name="F:StardewValley.Objects.TankFish.field_dartEndFrames">
            <summary>The field index in <c>Data/AquariumFish</c> for the dart end animation frames.</summary>
        </member>
        <member name="F:StardewValley.Objects.TankFish.field_texture">
            <summary>The field index in <c>Data/AquariumFish</c> for the texture, if set.</summary>
        </member>
        <member name="F:StardewValley.Objects.TankFish.field_hatOffset">
            <summary>The field index in <c>Data/AquariumFish</c> for the pixel offset from the upper-left corner of sprite that the hat sits on, if set.</summary>
        </member>
        <member name="F:StardewValley.Objects.Furniture.AllowLocalRemoval">
            <summary>Whether this furniture can be removed if other checks pass.</summary>
            <remarks>This value only applies for the current instance, it's not synced in multiplayer or written to the save file.</remarks>
        </member>
        <member name="M:StardewValley.Objects.Furniture.initNetFields">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Objects.Furniture.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Furniture.IsTable">
            <summary>Whether this is a table, which can have items placed on it.</summary>
        </member>
        <member name="M:StardewValley.Objects.Furniture.SetPlacement(System.Int32,System.Int32,System.Int32)">
            <summary>Set the furniture's position and rotation, and update all related data.</summary>
            <param name="x">The tile X position.</param>
            <param name="y">The tile X position.</param>
            <param name="rotations">The number of times to rotate the furniture, starting from its current rotation.</param>
            <returns>Returns the furniture instance for chaining.</returns>
        </member>
        <member name="M:StardewValley.Objects.Furniture.SetPlacement(Microsoft.Xna.Framework.Point,System.Int32)">
            <summary>Set the furniture's position and rotation, and update all related data.</summary>
            <param name="tile">The tile position.</param>
            <param name="rotations">The number of times to rotate the furniture, starting from its current rotation.</param>
            <returns>Returns the furniture instance for chaining.</returns>
        </member>
        <member name="M:StardewValley.Objects.Furniture.SetPlacement(Microsoft.Xna.Framework.Vector2,System.Int32)">
            <summary>Set the furniture's position and rotation, and update all related data.</summary>
            <param name="tile">The tile position.</param>
            <param name="rotations">The number of times to rotate the furniture, starting from its current rotation.</param>
            <returns>Returns the furniture instance for chaining.</returns>
        </member>
        <member name="M:StardewValley.Objects.Furniture.SetHeldObject(StardewValley.Object)">
            <summary>Set the held object.</summary>
            <param name="obj">The object to hold.</param>
            <returns>Returns the furniture instance for chaining.</returns>
        </member>
        <member name="M:StardewValley.Objects.Furniture.InitializeAtTile(Microsoft.Xna.Framework.Vector2)">
            <summary>Set the furniture's tile position and update all position-related data.</summary>
            <param name="tile">The tile position.</param>
        </member>
        <member name="M:StardewValley.Objects.Furniture.RecalculateBoundingBox">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Furniture.RecalculateBoundingBox(System.String[])">
            <summary>Recalculate the item's bounding box based on its current position.</summary>
            <param name="data">The furniture data to apply.</param>
        </member>
        <member name="M:StardewValley.Objects.Furniture.loadDisplayName">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Furniture.getCategoryColor">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Furniture.performDropDownAction(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Furniture.checkForAction(StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Furniture.actionOnPlayerEntry">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Furniture.actionOnPlayerEntryOrPlacement(StardewValley.GameLocation,System.Boolean)">
            <summary>Handle the player entering the location containing the object, or the furniture being placed.</summary>
            <param name="environment">The location containing the object.</param>
            <param name="dropDown">Whether the item was just placed (instead of the player entering the location with it already placed).</param>
        </member>
        <member name="M:StardewValley.Objects.Furniture.performObjectDropInAction(StardewValley.Item,System.Boolean,StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Furniture.minutesElapsed(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Furniture.canBeGivenAsGift">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Furniture.placementAction(StardewValley.GameLocation,System.Int32,System.Int32,StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Furniture.GetAdditionalFurniturePlacementStatus(StardewValley.GameLocation,System.Int32,System.Int32,StardewValley.Farmer)">
            <summary>Get the reason the furniture can't be placed at a given position, if applicable.</summary>
            <param name="location">The location in which the furniture is being placed.</param>
            <param name="x">The X pixel position at which the furniture is being placed.</param>
            <param name="y">The Y pixel position at which the furniture is being placed.</param>
            <param name="who">The player placing the furniture, if applicable.</param>
            <returns>
              Returns one of these values:
              <list type="bullet">
                <item><description>0: valid placement.</description></item>
                <item><description>1: the object is a wall placed object but isn't being placed on a wall.</description></item>
                <item><description>2: the object can't be placed here due to the tile being marked as not furnishable.</description></item>
                <item><description>3: the object isn't a wall placed object, but is trying to be placed on a wall.</description></item>
                <item><description>4: the current location isn't decorable.</description></item>
                <item><description>-1: general fail condition.</description></item>
              </list>
            </returns>
        </member>
        <member name="M:StardewValley.Objects.Furniture.GetBoundingBoxAt(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Furniture.salePrice(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Objects.Furniture.Name">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Furniture.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Furniture.GetOneCopyFrom(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Objects.Hat.data_index_internalName">
            <summary>The index in <c>Data/Hats</c> for the internal name field.</summary>
        </member>
        <member name="F:StardewValley.Objects.Hat.data_index_description">
            <summary>The index in <c>Data/Hats</c> for the description field.</summary>
        </member>
        <member name="F:StardewValley.Objects.Hat.data_index_showFullHair">
            <summary>The index in <c>Data/Hats</c> for the 'show full hair' field.</summary>
        </member>
        <member name="F:StardewValley.Objects.Hat.data_index_ignoreHairOffset">
            <summary>The index in <c>Data/Hats</c> for the ignore-hair-offset field.</summary>
        </member>
        <member name="F:StardewValley.Objects.Hat.data_index_tags">
            <summary>The index in <c>Data/Hats</c> for the special tags field.</summary>
        </member>
        <member name="F:StardewValley.Objects.Hat.data_index_displayName">
            <summary>The index in <c>Data/Hats</c> for the display name field.</summary>
        </member>
        <member name="F:StardewValley.Objects.Hat.data_index_texture">
            <summary>The index in <c>Data/Hats</c> for the texture field.</summary>
        </member>
        <member name="F:StardewValley.Objects.Hat.obsolete_which">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Item.ItemId"/> instead.</summary>
        </member>
        <member name="P:StardewValley.Objects.Hat.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Hat.MigrateLegacyItemId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Hat.initNetFields">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Objects.Hat.DisplayName">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Hat.GetOneNew">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Objects.IndoorPot.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Objects.IndoorPot.Location">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Objects.IndoorPot.TileLocation">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.IndoorPot.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.IndoorPot.Water">
            <summary>Water the dirt in this garden pot.</summary>
        </member>
        <member name="M:StardewValley.Objects.IndoorPot.IsPlantableItem(StardewValley.Item)">
            <summary>Get whether an item type can be planted in indoor pots, regardless of whether the pot has room currently.</summary>
            <param name="item">The item to check.</param>
        </member>
        <member name="M:StardewValley.Objects.IndoorPot.performObjectDropInAction(StardewValley.Item,System.Boolean,StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.IndoorPot.checkForAction(StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.IndoorPot.actionOnPlayerEntry">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Objects.ItemPedestal.isIslandShrinePedestal">
            <summary>Whether this is a pedestal at the Ginger Island shrine, which can't be destroyed or picked up.</summary>
        </member>
        <member name="P:StardewValley.Objects.ItemPedestal.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.ItemPedestal.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.ItemPedestal.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.ItemPedestal.GetOneCopyFrom(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.ItemPedestal.performObjectDropInAction(StardewValley.Item,System.Boolean,StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.ItemPedestal.checkForAction(StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Mannequin.ForEachItem(StardewValley.Delegates.ForEachItemDelegate)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Mannequin.performObjectDropInAction(StardewValley.Item,System.Boolean,StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Mannequin.GetOneNew">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Objects.MiniJukebox.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.MiniJukebox.checkForAction(StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Objects.Phone.PhoneHandlers">
            <summary>The methods which handle incoming phone calls.</summary>
        </member>
        <member name="F:StardewValley.Objects.Phone.RING_DURATION">
            <summary>While the phone is ringing, how long each ring sound should last in milliseconds.</summary>
        </member>
        <member name="F:StardewValley.Objects.Phone.RING_CYCLE_TIME">
            <summary>While the phone is ringing, the delay between each ring sound in milliseconds.</summary>
        </member>
        <member name="P:StardewValley.Objects.Phone.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Phone.checkForAction(StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Phone.HandleIncomingCall(System.String)">
            <summary>Handle an incoming phone call when the player interacts with the phone, if applicable.</summary>
            <param name="callId">The unique ID for the incoming call.</param>
            <remarks>For custom calls, add a new handler to <see cref="F:StardewValley.Objects.Phone.PhoneHandlers"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.Objects.Phone.minutesElapsed(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Phone.IsRinging">
            <summary>Get whether the phone is currently ringing.</summary>
        </member>
        <member name="M:StardewValley.Objects.Phone.Ring(System.String)">
            <summary>Start ringing the phone for an incoming call.</summary>
            <param name="callId">The unique ID for the incoming call.</param>
        </member>
        <member name="M:StardewValley.Objects.Phone.StopRinging">
            <summary>Stop ringing the phone and discard the incoming call, if any.</summary>
        </member>
        <member name="M:StardewValley.Objects.Phone.HangUp">
            <summary>Hang up the phone.</summary>
        </member>
        <member name="M:StardewValley.Objects.Phone.GetIncomingCallAction(System.String)">
            <summary>Get the action to call when the player answers the phone, if the call ID is valid.</summary>
            <param name="callId">The unique ID for the incoming call.</param>
        </member>
        <member name="M:StardewValley.Objects.RandomizedPlantFurniture.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.RandomizedPlantFurniture.GetOneCopyFrom(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Objects.Ring.obsolete_indexInTileSheet">
            <summary>Obsolete. This is only kept to preserve data from old save files, and isn't synchronized in multiplayer. Use <see cref="P:StardewValley.Item.ItemId"/> instead.</summary>
        </member>
        <member name="P:StardewValley.Objects.Ring.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Ring.MigrateLegacyItemId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Ring.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Ring.CanBeLostOnDeath">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Ring.onEquip(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Ring.onUnequip(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Ring.getCategoryName">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Ring.salePrice(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Ring.onMonsterSlay(StardewValley.Monsters.Monster,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>Apply ring effects when a monster is slain.</summary>
            <param name="monster">The monster slain.</param>
            <param name="location">The location where the monster was slain.</param>
            <param name="who">The player receiving ring effects.</param>
        </member>
        <member name="P:StardewValley.Objects.Ring.DisplayName">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Ring.GetOneNew">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Objects.Sign.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Sign.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Sign.checkForAction(StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Sign.ForEachItem(StardewValley.Delegates.ForEachItemDelegate)">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Objects.SpecialItem.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Objects.SpecialItem._displayName">
            <summary>The backing field for <see cref="P:StardewValley.Objects.SpecialItem.displayName"/>.</summary>
        </member>
        <member name="P:StardewValley.Objects.SpecialItem.displayName">
            <summary>The cached value for <see cref="P:StardewValley.Objects.SpecialItem.DisplayName"/>.</summary>
        </member>
        <member name="M:StardewValley.Objects.SpecialItem.initNetFields">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Objects.SpecialItem.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Objects.SpecialItem.Name">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.SpecialItem.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.StorageFurniture.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.StorageFurniture.checkForAction(StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.StorageFurniture.canBeTrashed">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.StorageFurniture.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.StorageFurniture.ForEachItem(StardewValley.Delegates.ForEachItemDelegate)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Objects.Trinket.displayNameOverride">
            <summary>The parsed form of <see cref="F:StardewValley.Objects.Trinket.displayNameOverrideTemplate"/> used to build the display name for <see cref="M:StardewValley.Objects.Trinket.loadDisplayName"/>.</summary>
        </member>
        <member name="F:StardewValley.Objects.Trinket.displayNameOverrideTemplate">
            <summary>The net-synced <see cref="T:StardewValley.TokenizableStrings.TokenParser">tokenized string</see> used to build the display name for <see cref="M:StardewValley.Objects.Trinket.loadDisplayName"/>.</summary>
        </member>
        <member name="F:StardewValley.Objects.Trinket.descriptionSubstitutionTemplates">
            <summary>The net-synced <see cref="T:StardewValley.TokenizableStrings.TokenParser">tokenized strings</see> used to fill placeholders in <see cref="M:StardewValley.Objects.Trinket.getDescription"/>.</summary>
        </member>
        <member name="M:StardewValley.Objects.Trinket.canBeGivenAsGift">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Trinket.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.TV.checkForAction(StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.TV.GetOneNew">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Objects.Wallpaper.isFloor">
            <summary>Whether this is a flooring item; else it's a wallpaper item.</summary>
        </member>
        <member name="F:StardewValley.Objects.Wallpaper.setId">
            <summary>The <c>Data/AdditionalWallpaperFlooring</c> set which contains this flooring or wallpaper, or <c>null</c> for a pre-1.6 vanilla wallpaper.</summary>
        </member>
        <member name="F:StardewValley.Objects.Wallpaper.setData">
            <summary>The cached data for the flooring or wallpaper set.</summary>
        </member>
        <member name="P:StardewValley.Objects.Wallpaper.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Wallpaper.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Wallpaper.GetSetData">
            <summary>Get the data for the flooring or wallpaper set which contains this item, if any.</summary>
        </member>
        <member name="M:StardewValley.Objects.Wallpaper.loadDisplayName">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Wallpaper.performDropDownAction(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Wallpaper.performObjectDropInAction(StardewValley.Item,System.Boolean,StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Wallpaper.salePrice(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Objects.Wallpaper.Name">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Wallpaper.GetOneNew">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Objects.WoodChipper.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.WoodChipper.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.WoodChipper.performObjectDropInAction(StardewValley.Item,System.Boolean,StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.WoodChipper.checkForAction(StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Objects.Workbench.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Workbench.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.Workbench.checkForAction(StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:StardewValley.Objects.DefaultPhoneHandler">
            <summary>Handles incoming and outgoing phone calls for the base game.</summary>
        </member>
        <member name="T:StardewValley.Objects.DefaultPhoneHandler.OutgoingCallIds">
            <summary>The call IDs for phone numbers the player can call.</summary>
        </member>
        <member name="F:StardewValley.Objects.DefaultPhoneHandler.OutgoingCallIds.AdventureGuild">
            <summary>An outgoing call to the Adventurer's Guild.</summary>
        </member>
        <member name="F:StardewValley.Objects.DefaultPhoneHandler.OutgoingCallIds.AnimalShop">
            <summary>An outgoing call to Marnie's animal shop.</summary>
        </member>
        <member name="F:StardewValley.Objects.DefaultPhoneHandler.OutgoingCallIds.Blacksmith">
            <summary>An outgoing call to Clint's blacksmith shop.</summary>
        </member>
        <member name="F:StardewValley.Objects.DefaultPhoneHandler.OutgoingCallIds.Carpenter">
            <summary>An outgoing call to Robin's shop.</summary>
        </member>
        <member name="F:StardewValley.Objects.DefaultPhoneHandler.OutgoingCallIds.Saloon">
            <summary>An outgoing call to Gus' Saloon.</summary>
        </member>
        <member name="F:StardewValley.Objects.DefaultPhoneHandler.OutgoingCallIds.SeedShop">
            <summary>An outgoing call to Pierre's shop.</summary>
        </member>
        <member name="M:StardewValley.Objects.DefaultPhoneHandler.CheckForIncomingCall(System.Random)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.DefaultPhoneHandler.TryHandleIncomingCall(System.String,System.Action@)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.DefaultPhoneHandler.GetOutgoingNumbers">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.DefaultPhoneHandler.TryHandleOutgoingCall(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Objects.DefaultPhoneHandler.CallAdventureGuild">
            <summary>Handle an outgoing call to the Adventurer's Guild.</summary>
        </member>
        <member name="M:StardewValley.Objects.DefaultPhoneHandler.CallAnimalShop">
            <summary>Handle an outgoing call to Marnie's animal shop.</summary>
        </member>
        <member name="M:StardewValley.Objects.DefaultPhoneHandler.CallBlacksmith">
            <summary>Handle an outgoing call to Clint's blacksmith shop.</summary>
        </member>
        <member name="M:StardewValley.Objects.DefaultPhoneHandler.CallCarpenter">
            <summary>Handle an outgoing call to Robin's shop.</summary>
        </member>
        <member name="M:StardewValley.Objects.DefaultPhoneHandler.CallSaloon">
            <summary>Handle an outgoing call to Gus' saloon.</summary>
        </member>
        <member name="M:StardewValley.Objects.DefaultPhoneHandler.CallSeedShop">
            <summary>Handle an outgoing call to Pierre's shop.</summary>
        </member>
        <member name="T:StardewValley.Objects.IPhoneHandler">
            <summary>Handles incoming and outgoing phone calls.</summary>
        </member>
        <member name="M:StardewValley.Objects.IPhoneHandler.CheckForIncomingCall(System.Random)">
            <summary>Check if the phone should start ringing for an incoming call now.</summary>
            <param name="random">The RNG with which to decide whether the phone rings and which call ID is selected.</param>
        </member>
        <member name="M:StardewValley.Objects.IPhoneHandler.TryHandleIncomingCall(System.String,System.Action@)">
            <summary>Try to handle an incoming phone call.</summary>
            <param name="callId">The unique ID for the incoming call.</param>
            <param name="showDialogue">Show the dialogue box when the player answers the phone.</param>
            <returns>Returns whether the incoming call is handled and <paramref name="showDialogue"/> is set.</returns>
        </member>
        <member name="M:StardewValley.Objects.IPhoneHandler.GetOutgoingNumbers">
            <summary>Get the phone numbers which the player can call.</summary>
            <returns>Returns pairs for the call ID (key) and display text (value).</returns>
        </member>
        <member name="M:StardewValley.Objects.IPhoneHandler.TryHandleOutgoingCall(System.String)">
            <summary>Try to handle the player selecting an outgoing phone number.</summary>
            <param name="callId">The unique ID for the outgoing call.</param>
            <returns>Returns whether the outgoing call was handled.</returns>
        </member>
        <member name="F:StardewValley.AnimatedSprite.loadedTexture">
            <summary>The texture asset name that was loaded, usually matching <see cref="F:StardewValley.AnimatedSprite.textureName"/> or <see cref="F:StardewValley.AnimatedSprite.overrideTextureName"/>.</summary>
        </member>
        <member name="F:StardewValley.AnimatedSprite.overrideTextureName">
            <summary>The texture asset name to load locally regardless of <see cref="F:StardewValley.AnimatedSprite.textureName"/>, if set.</summary>
            <remarks>See <see cref="F:StardewValley.AnimatedSprite.loadedTexture"/> for the texture that was actually loaded.</remarks>
        </member>
        <member name="F:StardewValley.AnimatedSprite.textureName">
            <summary>The texture asset name to load if not overridden by <see cref="F:StardewValley.AnimatedSprite.overrideTextureName"/>.</summary>
            <remarks>See <see cref="F:StardewValley.AnimatedSprite.loadedTexture"/> for the texture that was actually loaded.</remarks>
        </member>
        <member name="P:StardewValley.AnimatedSprite.Owner">
            <summary>The character which uses this sprite.</summary>
        </member>
        <member name="M:StardewValley.AnimatedSprite.SetOwner(StardewValley.Character)">
            <summary>Set the character which owns this sprite.</summary>
            <param name="owner">The owner to set.</param>
        </member>
        <member name="M:StardewValley.AnimatedSprite.LoadTexture(System.String,System.Boolean)">
            <summary>Load and set the texture if exists.</summary>
            <param name="textureName">The texture name to load.</param>
            <param name="syncTextureName">Whether to set the <see cref="F:StardewValley.AnimatedSprite.textureName"/> field so it's synced to other players in multiplayer (if true), else set <see cref="F:StardewValley.AnimatedSprite.overrideTextureName"/> which is local-only (if false).</param>
        </member>
        <member name="M:StardewValley.AnimatedSprite.animateOnce(Microsoft.Xna.Framework.GameTime)">
            returns true when the animation is finished
        </member>
        <member name="M:StardewValley.AnimatedSprite.GetSourceRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Calculate the source rectangle for a sprite in an NPC spritesheet.</summary>
            <param name="textureWidth">The pixel width of the full spritesheet texture.</param>
            <param name="spriteWidth">The pixel width of each sprite.</param>
            <param name="spriteHeight">The pixel height of each sprite.</param>
            <param name="frame">The frame index, starting at 0 for the top-left corner.</param>
        </member>
        <member name="T:StardewValley.ArgUtility">
            <summary>A utility for working with space-delimited or split argument lists.</summary>
        </member>
        <member name="M:StardewValley.ArgUtility.SplitBySpace(System.String)">
            <summary>Split space-separated arguments in a string, ignoring extra spaces.</summary>
            <param name="value">The value to split.</param>
            <returns>Returns an array of the space-delimited arguments, or an empty array if the <paramref name="value"/> was null, empty, or only contains spaces.</returns>
            <remarks>For example, this text: <code>A  B C</code> would be split into three values (<c>A</c>, <c>B</c>, and <c>C</c>). See also <see cref="M:StardewValley.ArgUtility.SplitBySpaceQuoteAware(System.String)"/>.</remarks>
        </member>
        <member name="M:StardewValley.ArgUtility.SplitBySpace(System.String,System.Int32)">
            <inheritdoc cref="M:StardewValley.ArgUtility.SplitBySpace(System.String)" />
            <param name="value">The value to split.</param>
            <param name="limit">The number of arguments to return. Any remaining arguments by appended to the final argument.</param>
        </member>
        <member name="M:StardewValley.ArgUtility.SplitBySpaceAndGet(System.String,System.Int32,System.String)">
            <summary>Split space-separated arguments in a string (ignoring extra spaces), and get a specific argument.</summary>
            <param name="value">The value to split.</param>
            <param name="index">The index of the value to get.</param>
            <param name="defaultValue">The value to return if the <paramref name="index"/> is out of range for the array.</param>
            <returns>Returns the value at the given index if the array was non-null and the index is in range, else the <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:StardewValley.ArgUtility.SplitBySpaceQuoteAware(System.String)">
            <summary>Split a list of space-separated arguments (ignoring extra spaces), with support for using quotes to protect spaces within an argument.</summary>
            <param name="input">The value to split.</param>
            <remarks>See remarks on <see cref="M:StardewValley.ArgUtility.SplitBySpaceQuoteAware(System.String)"/> for the quote format details.</remarks>
        </member>
        <member name="M:StardewValley.ArgUtility.SplitQuoteAware(System.String,System.Char,System.StringSplitOptions,System.Boolean)">
             <summary>Split a list of arguments using the given delimiter, with support for using quotes to protect delimiters within an argument.</summary>
             <param name="input">The value to split.</param>
             <param name="delimiter">The character on which to split the value. This shouldn't be a quote (<c>"</c>) or backslash (<c>\</c>).</param>
             <param name="splitOptions">The string split options to apply for the delimiter split.</param>
             <param name="keepQuotesAndEscapes">Whether to keep quotes and escape characters in the string. For example, the value <c>Some \"test\" "here"</c> would become <c>Some "test" here</c> if this disabled, or kept as-is (aside from splitting) if it's enabled. This impacts performance and should usually be <c>false</c> unless you need to split each value further while respecting quotes.</param>
             <remarks>
               <para>A quote in the text causes any delimiter to be ignored until the next quote. The quotes are removed from the string. For example, this comma-delimited input: <code>"some,text",here</code> will produce two values: <c>some,text</c> and <c>here</c>.</para>
            
               <para>A quote character can be escaped by preceding it with a backslash (like <c>\"</c>). Escaped quotes have no effect on delimiters, and aren't removed from the string. For example, this comma-delimited input: <code>some,\"text,here</code> will produce three values: <c>some</c>, <c>"text</c>, and <c>here</c>. Remember that backslashes need to be escaped in C# or JSON strings (e.g. <c>"\\"</c> produces a single backslash).</para>
            
               <para>See also <see cref="M:StardewValley.ArgUtility.SplitBySpaceQuoteAware(System.String)"/> which simplifies usage for the most common case used by the game.</para>
            
               <para>When an input *doesn't* contain quotes, this is optimized to be almost as fast as just calling <see cref="M:System.String.Split(System.Char,System.StringSplitOptions)"/> directly.</para>
             </remarks>
        </member>
        <member name="M:StardewValley.ArgUtility.UnsplitQuoteAware(System.String[],System.Char)">
            <summary>Reverse a <see cref="M:StardewValley.ArgUtility.SplitQuoteAware(System.String,System.Char,System.StringSplitOptions,System.Boolean)"/> operation, producing a string which can safely be re-split.</summary>
            <param name="input">The values to split.</param>
            <param name="delimiter">The character on which to split the value. This shouldn't be a quote (<c>"</c>) or backslash (<c>\</c>).</param>
        </member>
        <member name="M:StardewValley.ArgUtility.EscapeQuotes(System.String)">
            <summary>Escape quotes in a string so they're ignored by methods like <see cref="M:StardewValley.ArgUtility.SplitQuoteAware(System.String,System.Char,System.StringSplitOptions,System.Boolean)"/>.</summary>
            <param name="input">The input string to escape.</param>
            <remarks>This isn't idempotent (e.g. calling it twice will result in double-escaped quotes).</remarks>
        </member>
        <member name="M:StardewValley.ArgUtility.HasIndex``1(``0[],System.Int32)">
            <summary>Get whether an index is within the bounds of the array, regardless of what value is at that position.</summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="array">The array of arguments to check.</param>
            <param name="index">The index to check within the <paramref name="array"/>.</param>
        </member>
        <member name="M:StardewValley.ArgUtility.GetSubsetOf``1(``0[],System.Int32,System.Int32)">
            <summary>Get a subset of the given array.</summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="array">The array of arguments to get a subset of.</param>
            <param name="startAt">The index at which to start copying values.</param>
            <param name="length">The number of values to copy.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="startAt"/> is before the start of the array.</exception>
        </member>
        <member name="M:StardewValley.ArgUtility.Get(System.String[],System.Int32,System.String,System.Boolean)">
            <summary>Get a string argument by its array index.</summary>
            <param name="array">The array of arguments to read.</param>
            <param name="index">The index to get within the <paramref name="array"/>.</param>
            <param name="defaultValue">The value to return if the index is out of bounds or invalid.</param>
            <param name="allowBlank">Whether to return the argument even if it's null or whitespace. If false, the <paramref name="defaultValue"/> will be returned in that case.</param>
            <returns>Returns the selected argument (if the <paramref name="index"/> is found and valid), else <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:StardewValley.ArgUtility.TryGet(System.String[],System.Int32,System.String@,System.String@,System.Boolean)">
            <summary>Get a string argument by its array index, if it's found and valid.</summary>
            <param name="array">The array of arguments to read.</param>
            <param name="index">The index to get within the <paramref name="array"/>.</param>
            <param name="value">The argument value, if found and valid.</param>
            <param name="error">An error phrase indicating why getting the argument failed (like 'required index X not found'), if applicable.</param>
            <param name="allowBlank">Whether to match the argument even if it's null or whitespace. If false, it will be treated as invalid in that case.</param>
            <returns>Returns whether the argument was successfully found and is valid.</returns>
        </member>
        <member name="M:StardewValley.ArgUtility.TryGetOptional(System.String[],System.Int32,System.String@,System.String@,System.String,System.Boolean)">
            <summary>Get a string argument by its array index, or a default value if the argument isn't found.</summary>
            <param name="array">The array of arguments to read.</param>
            <param name="index">The index to get within the <paramref name="array"/>.</param>
            <param name="value">The argument value, if found and valid.</param>
            <param name="error">An error phrase indicating why getting the argument failed (like 'required index X not found'), if applicable.</param>
            <param name="defaultValue">The value to return if the index is out of bounds or invalid.</param>
            <param name="allowBlank">Whether to match the argument even if it's null or whitespace. If false, it will be treated as missing in that case.</param>
            <returns>Returns true if either (a) the argument was found and valid, or (b) the argument was not found so the default value was used. Returns false if the argument was found but isn't in a valid format.</returns>
        </member>
        <member name="M:StardewValley.ArgUtility.GetBool(System.String[],System.Int32,System.Boolean)">
            <summary>Get an boolean argument by its array index.</summary>
            <inheritdoc cref="M:StardewValley.ArgUtility.Get(System.String[],System.Int32,System.String,System.Boolean)" />
        </member>
        <member name="M:StardewValley.ArgUtility.TryGetBool(System.String[],System.Int32,System.Boolean@,System.String@)">
            <summary>Get a boolean argument by its array index, if it's found and valid.</summary>
            <inheritdoc cref="M:StardewValley.ArgUtility.TryGet(System.String[],System.Int32,System.String@,System.String@,System.Boolean)" />
        </member>
        <member name="M:StardewValley.ArgUtility.TryGetOptionalBool(System.String[],System.Int32,System.Boolean@,System.String@,System.Boolean)">
            <summary>Get a boolean argument by its array index, or a default value if the argument isn't found.</summary>
            <inheritdoc cref="M:StardewValley.ArgUtility.TryGetOptional(System.String[],System.Int32,System.String@,System.String@,System.String,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.ArgUtility.GetDirection(System.String[],System.Int32,System.Int32)">
            <summary>Get a direction argument by its array index.</summary>
            <inheritdoc cref="M:StardewValley.ArgUtility.Get(System.String[],System.Int32,System.String,System.Boolean)" />
        </member>
        <member name="M:StardewValley.ArgUtility.TryGetDirection(System.String[],System.Int32,System.Int32@,System.String@)">
            <summary>Get a direction argument by its array index, if it's found and valid.</summary>
            <inheritdoc cref="M:StardewValley.ArgUtility.TryGet(System.String[],System.Int32,System.String@,System.String@,System.Boolean)" />
        </member>
        <member name="M:StardewValley.ArgUtility.TryGetOptionalDirection(System.String[],System.Int32,System.Int32@,System.String@,System.Int32)">
            <summary>Get a direction argument by its array index, or a default value if the argument isn't found.</summary>
            <inheritdoc cref="M:StardewValley.ArgUtility.TryGetOptional(System.String[],System.Int32,System.String@,System.String@,System.String,System.Boolean)" />
        </member>
        <member name="M:StardewValley.ArgUtility.GetEnum``1(System.String[],System.Int32,``0)">
            <summary>Get an enum argument by its array index.</summary>
            <inheritdoc cref="M:StardewValley.ArgUtility.Get(System.String[],System.Int32,System.String,System.Boolean)" />
        </member>
        <member name="M:StardewValley.ArgUtility.TryGetEnum``1(System.String[],System.Int32,``0@,System.String@)">
            <summary>Get an enum argument by its array index, if it's found and valid.</summary>
            <inheritdoc cref="M:StardewValley.ArgUtility.TryGet(System.String[],System.Int32,System.String@,System.String@,System.Boolean)" />
        </member>
        <member name="M:StardewValley.ArgUtility.TryGetOptionalEnum``1(System.String[],System.Int32,``0@,System.String@,``0)">
            <summary>Get an enum argument by its array index, or a default value if the argument isn't found.</summary>
            <inheritdoc cref="M:StardewValley.ArgUtility.TryGetOptional(System.String[],System.Int32,System.String@,System.String@,System.String,System.Boolean)" />
        </member>
        <member name="M:StardewValley.ArgUtility.GetFloat(System.String[],System.Int32,System.Single)">
            <summary>Get a float argument by its array index.</summary>
            <inheritdoc cref="M:StardewValley.ArgUtility.Get(System.String[],System.Int32,System.String,System.Boolean)" />
        </member>
        <member name="M:StardewValley.ArgUtility.TryGetFloat(System.String[],System.Int32,System.Single@,System.String@)">
            <summary>Get a float argument by its array index, if it's found and valid.</summary>
            <inheritdoc cref="M:StardewValley.ArgUtility.TryGet(System.String[],System.Int32,System.String@,System.String@,System.Boolean)" />
        </member>
        <member name="M:StardewValley.ArgUtility.TryGetOptionalFloat(System.String[],System.Int32,System.Single@,System.String@,System.Single)">
            <summary>Get a float argument by its array index, or a default value if the argument isn't found.</summary>
            <inheritdoc cref="M:StardewValley.ArgUtility.TryGetOptional(System.String[],System.Int32,System.String@,System.String@,System.String,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.ArgUtility.GetInt(System.String[],System.Int32,System.Int32)">
            <summary>Get an integer argument by its array index.</summary>
            <inheritdoc cref="M:StardewValley.ArgUtility.Get(System.String[],System.Int32,System.String,System.Boolean)" />
        </member>
        <member name="M:StardewValley.ArgUtility.TryGetInt(System.String[],System.Int32,System.Int32@,System.String@)">
            <summary>Get an integer argument by its array index, if it's found and valid.</summary>
            <inheritdoc cref="M:StardewValley.ArgUtility.TryGet(System.String[],System.Int32,System.String@,System.String@,System.Boolean)" />
        </member>
        <member name="M:StardewValley.ArgUtility.TryGetOptionalInt(System.String[],System.Int32,System.Int32@,System.String@,System.Int32)">
            <summary>Get an int argument by its array index, or a default value if the argument isn't found.</summary>
            <inheritdoc cref="M:StardewValley.ArgUtility.TryGetOptional(System.String[],System.Int32,System.String@,System.String@,System.String,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.ArgUtility.TryGetPoint(System.String[],System.Int32,Microsoft.Xna.Framework.Point@,System.String@)">
            <summary>Get a point argument by its array index, if it's found and valid. This reads two consecutive values starting from <paramref name="index"/> for the X and Y values.</summary>
            <inheritdoc cref="M:StardewValley.ArgUtility.TryGet(System.String[],System.Int32,System.String@,System.String@,System.Boolean)" />
        </member>
        <member name="M:StardewValley.ArgUtility.TryGetRectangle(System.String[],System.Int32,Microsoft.Xna.Framework.Rectangle@,System.String@)">
            <summary>Get a rectangle argument by its array index, if it's found and valid. This reads four consecutive values starting from <paramref name="index"/> for the X, Y, width, and height values.</summary>
            <inheritdoc cref="M:StardewValley.ArgUtility.TryGet(System.String[],System.Int32,System.String@,System.String@,System.Boolean)" />
        </member>
        <member name="M:StardewValley.ArgUtility.TryGetVector2(System.String[],System.Int32,Microsoft.Xna.Framework.Vector2@,System.String@,System.Boolean)">
            <summary>Get a vector argument by its array index, if it's found and valid. This reads two consecutive values starting from <paramref name="index"/> for the X and Y values.</summary>
            <param name="array">The array of arguments to read.</param>
            <param name="index">The index to get within the <paramref name="array"/>.</param>
            <param name="value">The argument value, if found and valid.</param>
            <param name="error">An error phrase indicating why getting the argument failed (like 'required index X not found'), if applicable.</param>
            <param name="integerOnly">Whether the X and Y values must be integers.</param>
            <returns>Returns whether the argument was successfully found and is valid.</returns>
        </member>
        <member name="M:StardewValley.ArgUtility.GetRemainder(System.String[],System.Int32,System.String,System.Char)">
            <summary>Get all arguments from the given index as a concatenated string.</summary>
            <inheritdoc cref="M:StardewValley.ArgUtility.Get(System.String[],System.Int32,System.String,System.Boolean)" />
        </member>
        <member name="M:StardewValley.ArgUtility.TryGetRemainder(System.String[],System.Int32,System.String@,System.String@,System.Char)">
            <summary>Get all arguments starting from the given index as a concatenated string, if the index is found.</summary>
            <param name="array">The array of arguments to read.</param>
            <param name="index">The index of the first argument to include within the <paramref name="array"/>.</param>
            <param name="value">The concatenated argument values, if found and valid.</param>
            <param name="error">An error phrase indicating why getting the argument failed (like 'required index X not found'), if applicable.</param>
            <param name="delimiter">The delimiter with which to concatenate values.</param>
            <returns>Returns whether at least one argument was successfully found.</returns>
        </member>
        <member name="M:StardewValley.ArgUtility.TryGetOptionalRemainder(System.String[],System.Int32,System.String@,System.String,System.Char)">
            <summary>Get all arguments starting from the given index as a concatenated string, or a default value if the index isn't in the array.</summary>
            <param name="array">The array of arguments to read.</param>
            <param name="index">The index of the first argument to include within the <paramref name="array"/>.</param>
            <param name="value">The concatenated argument values, if found and valid.</param>
            <param name="defaultValue">The value to return if the index is out of bounds or invalid.</param>
            <param name="delimiter">The delimiter with which to concatenate values.</param>
            <returns>Returns true.</returns>
        </member>
        <member name="M:StardewValley.ArgUtility.GetMissingRequiredIndexError(System.String[],System.Int32)">
            <summary>Get an error message indicating that an array doesn't contain a required index.</summary>
            <param name="array">The array being indexed.</param>
            <param name="index">The index in the array being searched for.</param>
        </member>
        <member name="M:StardewValley.ArgUtility.GetValueParseError(System.String[],System.Int32,System.Boolean,System.String)">
            <summary>Get an error message indicating that an array index contains a value that can't be parsed.</summary>
            <param name="array">The array being indexed.</param>
            <param name="index">The index in the array being parsed.</param>
            <param name="required">Whether the argument is required.</param>
            <param name="typeSummary">A brief summary of the type being parsed, like "a boolean (one of 'true' or 'false')".</param>
        </member>
        <member name="T:StardewValley.Audio.ISoundsHelper">
            <summary>Encapsulates the game logic for playing sound effects (excluding music and background ambience).</summary>
        </member>
        <member name="P:StardewValley.Audio.ISoundsHelper.LogSounds">
            <summary>Whether to log sounds being played to the console to simplify troubleshooting.</summary>
        </member>
        <member name="M:StardewValley.Audio.ISoundsHelper.ShouldPlayLocal(StardewValley.Audio.SoundContext)">
            <summary>Get whether local sounds for a category should be played right now.</summary>
            <param name="context">The source which triggered the game sound.</param>
        </member>
        <member name="M:StardewValley.Audio.ISoundsHelper.GetVolumeForDistance(StardewValley.GameLocation,System.Nullable{Microsoft.Xna.Framework.Vector2})">
            <summary>Get the volume at which to play a local sound based on its distance from the current player.</summary>
            <param name="location">The location in which the sound is playing, if applicable.</param>
            <param name="position">The tile position from which the sound is playing, if applicable.</param>
        </member>
        <member name="M:StardewValley.Audio.ISoundsHelper.PlayLocal(System.String,StardewValley.GameLocation,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Int32},StardewValley.Audio.SoundContext,StardewValley.ICue@)">
            <summary>Play a game sound for the local player.</summary>
            <param name="cueName">The sound ID to play.</param>
            <param name="location">The location in which the sound is playing, if applicable.</param>
            <param name="position">The tile position from which the sound is playing, or <c>null</c> if it's playing throughout the location.</param>
            <param name="pitch">The pitch modifier to apply, or <c>null</c> for the default pitch.</param>
            <param name="cue">The cue instance that was started, or a no-op cue if it failed.</param>
            <returns>Returns whether the cue exists and was started successfully.</returns>
            <param name="context">The source which triggered a game sound.</param>
        </member>
        <member name="M:StardewValley.Audio.ISoundsHelper.PlayAll(System.String,StardewValley.GameLocation,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Int32},StardewValley.Audio.SoundContext)">
            <summary>Play a game sound for all players who can hear it.</summary>
            <param name="cueName">The sound ID to play.</param>
            <param name="location">The location in which the sound is playing.</param>
            <param name="position">The tile position from which the sound is playing, or <c>null</c> if it's playing throughout the location.</param>
            <param name="pitch">The pitch modifier to apply, or <c>null</c> for the default pitch.</param>
            <param name="context">The source which triggered a game sound.</param>
        </member>
        <member name="M:StardewValley.Audio.ISoundsHelper.SetPitch(StardewValley.ICue,System.Single,System.Boolean)">
            <summary>Set the pitch value for an audio cue.</summary>
            <param name="cue">The audio cue to change.</param>
            <param name="pitch">The pitch to set.</param>
            <param name="forcePitch">If the cue doesn't have a built-in <c>Pitch</c> variable, set it dynamically if possible.</param>
            <remarks>This is only needed when working with audio cues directly. Most code should set the pitch through <see cref="M:StardewValley.Audio.ISoundsHelper.PlayAll(System.String,StardewValley.GameLocation,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Int32},StardewValley.Audio.SoundContext)"/> or <see cref="M:StardewValley.Audio.ISoundsHelper.PlayLocal(System.String,StardewValley.GameLocation,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Int32},StardewValley.Audio.SoundContext,StardewValley.ICue@)"/> instead.</remarks>
        </member>
        <member name="T:StardewValley.Audio.SoundContext">
            <summary>The source which triggered a game sound.</summary>
        </member>
        <member name="F:StardewValley.Audio.SoundContext.Default">
            <summary>The default sound context.</summary>
        </member>
        <member name="F:StardewValley.Audio.SoundContext.NPC">
            <summary>Sounds produced by NPCs in the world, like a door sound when they path out of a house.</summary>
        </member>
        <member name="T:StardewValley.Audio.SoundsHelper">
            <inheritdoc cref="T:StardewValley.Audio.ISoundsHelper" />
        </member>
        <member name="F:StardewValley.Audio.SoundsHelper.DefaultPitch">
            <summary>The default pitch value.</summary>
        </member>
        <member name="F:StardewValley.Audio.SoundsHelper.MaxPitch">
            <summary>The maximum pitch value.</summary>
        </member>
        <member name="F:StardewValley.Audio.SoundsHelper.MaxDistanceFromScreen">
            <summary>The maximum distance from the screen at which a positional sound can play. The audio volume drops linearly until it reaches zero.</summary>
        </member>
        <member name="F:StardewValley.Audio.SoundsHelper.LogSound">
            <summary>The method which logs sounds, if logging is enabled.</summary>
        </member>
        <member name="P:StardewValley.Audio.SoundsHelper.LogSounds">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Audio.SoundsHelper.ShouldPlayLocal(StardewValley.Audio.SoundContext)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Audio.SoundsHelper.GetVolumeForDistance(StardewValley.GameLocation,System.Nullable{Microsoft.Xna.Framework.Vector2})">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Audio.SoundsHelper.PlayLocal(System.String,StardewValley.GameLocation,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Int32},StardewValley.Audio.SoundContext,StardewValley.ICue@)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Audio.SoundsHelper.PlayAll(System.String,StardewValley.GameLocation,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Int32},StardewValley.Audio.SoundContext)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Audio.SoundsHelper.SetPitch(StardewValley.ICue,System.Single,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Audio.SoundsHelper.CanSkipSoundSync(StardewValley.GameLocation,System.Nullable{Microsoft.Xna.Framework.Vector2},StardewValley.Audio.SoundContext)">
            <summary>Get whether a multiplayer sound can be played directly without syncing it to other players.</summary>
            <param name="location">The location in which the sound is playing.</param>
            <param name="position">The tile position from which the sound is playing.</param>
            <param name="context">The source which triggered the sound.</param>
        </member>
        <member name="M:StardewValley.Audio.SoundsHelper.LogSoundImpl(System.String,StardewValley.GameLocation,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Int32},System.Single,StardewValley.Audio.SoundContext,System.String)">
            <summary>Play a game sound for the local player.</summary>
            <param name="cueName">The sound ID to play.</param>
            <param name="location">The location in which the sound is playing, if applicable.</param>
            <param name="position">The tile position from which the sound is playing, or <c>null</c> if it's playing throughout the location.</param>
            <param name="pitch">The pitch modifier to apply, or <c>null</c> for the default pitch.</param>
            <param name="volume">The distance-adjusted volume.</param>
            <param name="context">The source which triggered a game sound.</param>
            <param name="skipReason">The reason the sound wasn't played, if applicable.</param>
        </member>
        <member name="F:StardewValley.Background.location">
            <summary>The location for which to render a background.</summary>
        </member>
        <member name="M:StardewValley.Background.#ctor(StardewValley.Locations.Summit)">
            <summary>
            constructor for summit background
            </summary>
        </member>
        <member name="T:StardewValley.Buff">
            <summary>A set of effects to apply to a player or their stats.</summary>
        </member>
        <member name="F:StardewValley.Buff.glowRate">
            <summary>If the player is glowing, the per-tick rate at which the glow's opacity should shift between 0 (transparent) and 1 (opaque).</summary>
        </member>
        <member name="F:StardewValley.Buff.ENDLESS">
            <summary>A <see cref="F:StardewValley.Buff.millisecondsDuration"/> value which indicates it should last all day.</summary>
        </member>
        <member name="F:StardewValley.Buff.farming">
            <summary>The index for <see cref="F:StardewValley.Buffs.BuffEffects.FarmingLevel"/> when read from a raw array of buff effects, and its sprite index in <see cref="F:StardewValley.Game1.buffsIcons"/>.</summary>
        </member>
        <member name="F:StardewValley.Buff.fishing">
            <summary>The index for <see cref="F:StardewValley.Buffs.BuffEffects.FishingLevel"/> when read from a raw array of buff effects, and its sprite index in <see cref="F:StardewValley.Game1.buffsIcons"/>.</summary>
        </member>
        <member name="F:StardewValley.Buff.mining">
            <summary>The index for <see cref="F:StardewValley.Buffs.BuffEffects.MiningLevel"/> when read from a raw array of buff effects, and its sprite index in <see cref="F:StardewValley.Game1.buffsIcons"/>.</summary>
        </member>
        <member name="F:StardewValley.Buff.luck">
            <summary>The index for <see cref="F:StardewValley.Buffs.BuffEffects.LuckLevel"/> when read from a raw array of buff effects, and its sprite index in <see cref="F:StardewValley.Game1.buffsIcons"/>.</summary>
        </member>
        <member name="F:StardewValley.Buff.foraging">
            <summary>The index for <see cref="F:StardewValley.Buffs.BuffEffects.ForagingLevel"/> when read from a raw array of buff effects, and its sprite index in <see cref="F:StardewValley.Game1.buffsIcons"/>.</summary>
        </member>
        <member name="F:StardewValley.Buff.maxStamina">
            <summary>The index for <see cref="F:StardewValley.Buffs.BuffEffects.MaxStamina"/> when read from a raw array of buff effects, and its sprite index in <see cref="F:StardewValley.Game1.buffsIcons"/>.</summary>
        </member>
        <member name="F:StardewValley.Buff.magneticRadius">
            <summary>The index for <see cref="F:StardewValley.Buffs.BuffEffects.MagneticRadius"/> when read from a raw array of buff effects, and its sprite index in <see cref="F:StardewValley.Game1.buffsIcons"/>.</summary>
        </member>
        <member name="F:StardewValley.Buff.speed">
            <summary>The index for <see cref="F:StardewValley.Buffs.BuffEffects.Speed"/> when read from a raw array of buff effects, and its sprite index in <see cref="F:StardewValley.Game1.buffsIcons"/>.</summary>
        </member>
        <member name="F:StardewValley.Buff.defense">
            <summary>The index for <see cref="F:StardewValley.Buffs.BuffEffects.Defense"/> when read from a raw array of buff effects, and its sprite index in <see cref="F:StardewValley.Game1.buffsIcons"/>.</summary>
        </member>
        <member name="F:StardewValley.Buff.attack">
            <summary>The index for <see cref="F:StardewValley.Buffs.BuffEffects.Attack"/> when read from a raw array of buff effects, and its sprite index in <see cref="F:StardewValley.Game1.buffsIcons"/>.</summary>
        </member>
        <member name="F:StardewValley.Buff.goblinsCurse">
            <summary>The unique ID for the 'burnt' debuff.</summary>
        </member>
        <member name="F:StardewValley.Buff.slimed">
            <summary>The unique ID for the 'slimed' debuff.</summary>
        </member>
        <member name="F:StardewValley.Buff.evilEye">
            <summary>The unique ID for the 'jinxed' debuff.</summary>
        </member>
        <member name="F:StardewValley.Buff.tipsy">
            <summary>The unique ID for the 'tipsy' debuff.</summary>
        </member>
        <member name="F:StardewValley.Buff.fear">
            <summary>The unique ID for the 'fear' debuff.</summary>
        </member>
        <member name="F:StardewValley.Buff.frozen">
            <summary>The unique ID for the 'frozen' debuff.</summary>
        </member>
        <member name="F:StardewValley.Buff.warriorEnergy">
            <summary>The unique ID for the 'warrior energy' buff.</summary>
        </member>
        <member name="F:StardewValley.Buff.yobaBlessing">
            <summary>The unique ID for the 'Yoba's blessing' buff.</summary>
        </member>
        <member name="F:StardewValley.Buff.adrenalineRush">
            <summary>The unique ID for the 'adrenaline rush' buff.</summary>
        </member>
        <member name="F:StardewValley.Buff.avoidMonsters">
            <summary>The unique ID for the 'oil of garlic' buff.</summary>
        </member>
        <member name="F:StardewValley.Buff.full">
            <summary>The unique ID for the 'full' debuff.</summary>
        </member>
        <member name="F:StardewValley.Buff.quenched">
            <summary>The unique ID for the 'quenched' debuff.</summary>
        </member>
        <member name="F:StardewValley.Buff.spawnMonsters">
            <summary>The unique ID for the spawn monsters debuff.</summary>
        </member>
        <member name="F:StardewValley.Buff.nauseous">
            <summary>The unique ID for the 'nauseated' debuff.</summary>
        </member>
        <member name="F:StardewValley.Buff.darkness">
            <summary>The unique ID for the 'darkness' debuff.</summary>
        </member>
        <member name="F:StardewValley.Buff.weakness">
            <summary>The unique ID for the 'weakness' debuff.</summary>
        </member>
        <member name="F:StardewValley.Buff.squidInkRavioli">
            <summary>The unique ID for the 'squid ink ravioli' buff.</summary>
        </member>
        <member name="F:StardewValley.Buff.fullnessLength">
            <summary>The default duration for the <see cref="F:StardewValley.Buff.full"/> buff.</summary>
        </member>
        <member name="F:StardewValley.Buff.quenchedLength">
            <summary>The default duration for the <see cref="F:StardewValley.Buff.quenched"/> buff.</summary>
        </member>
        <member name="F:StardewValley.Buff.millisecondsDuration">
            <summary>The remaining duration in milliseconds for this buff. If set to <see cref="F:StardewValley.Buff.ENDLESS"/>, this buff will last all day.</summary>
        </member>
        <member name="F:StardewValley.Buff.totalMillisecondsDuration">
            <summary>The total duration in milliseconds for this buff, including both the elapsed and remaining duration.</summary>
        </member>
        <member name="F:StardewValley.Buff.effects">
            <summary>The effects to apply to the player's stats.</summary>
        </member>
        <member name="F:StardewValley.Buff.id">
            <summary>The unique ID for the applied buff, like <see cref="F:StardewValley.Buff.tipsy"/>.</summary>
        </member>
        <member name="F:StardewValley.Buff.displayName">
            <summary>The translated name for this buff.</summary>
        </member>
        <member name="F:StardewValley.Buff.description">
            <summary>The translated description for this buff.</summary>
        </member>
        <member name="F:StardewValley.Buff.source">
            <summary>The internal name for how the buff was applied (like 'food'), if set.</summary>
        </member>
        <member name="F:StardewValley.Buff.displaySource">
            <summary>The translated label for how the buff was applied (like 'food'), if set.</summary>
        </member>
        <member name="F:StardewValley.Buff.iconTexture">
            <summary>The texture from which to get the buff icon.</summary>
        </member>
        <member name="F:StardewValley.Buff.iconSheetIndex">
            <summary>The buff icon's sprite index within the <see cref="F:StardewValley.Buff.iconTexture"/>.</summary>
        </member>
        <member name="F:StardewValley.Buff.glow">
            <summary>The color of the glow effect to show around the player, or <see cref="P:Microsoft.Xna.Framework.Color.White"/> to disable glowing.</summary>
        </member>
        <member name="F:StardewValley.Buff.displayAlphaTimer">
            <summary>The number of milliseconds since the buff began flashing before removal, or 0 if it's not pending removal.</summary>
        </member>
        <member name="F:StardewValley.Buff.alreadyUpdatedIconAlpha">
            <summary>Whether <see cref="F:StardewValley.Buff.displayAlphaTimer"/> was incremented for the current tick and hasn't been drawn yet.</summary>
        </member>
        <member name="F:StardewValley.Buff.actionsOnApply">
            <summary>The trigger actions to run when the buff is applied to the player.</summary>
        </member>
        <member name="F:StardewValley.Buff.visible">
            <summary>Whether the buff is visible in the UI. This should normally be true.</summary>
        </member>
        <member name="M:StardewValley.Buff.#ctor(System.String,System.String,System.String,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,StardewValley.Buffs.BuffEffects,System.Nullable{System.Boolean},System.String,System.String)">
            <summary>Construct an instance.</summary>
            <param name="id"><inheritdoc cref="F:StardewValley.Buff.id" path="/summary"/></param>
            <param name="source"><inheritdoc cref="F:StardewValley.Buff.source" path="/summary"/></param>
            <param name="displaySource"><inheritdoc cref="F:StardewValley.Buff.displaySource" path="/summary"/></param>
            <param name="duration"><inheritdoc cref="F:StardewValley.Buff.millisecondsDuration" path="/summary"/></param>
            <param name="iconTexture"><inheritdoc cref="F:StardewValley.Buff.iconTexture" path="/summary"/></param>
            <param name="iconSheetIndex"><inheritdoc cref="F:StardewValley.Buff.iconSheetIndex" path="/summary"/></param>
            <param name="effects"><inheritdoc cref="F:StardewValley.Buff.effects" path="/summary"/></param>
            <param name="isDebuff">Whether this buff counts as a debuff, so its duration should be halved when wearing a Sturdy Ring.</param>
            <param name="displayName"><inheritdoc cref="F:StardewValley.Buff.displayName" path="/summary"/></param>
            <param name="description"><inheritdoc cref="F:StardewValley.Buff.description" path="/summary"/></param>
        </member>
        <member name="M:StardewValley.Buff.HasAnyEffects">
            <summary>Whether this buff changes any of the player's stats when applied.</summary>
        </member>
        <member name="M:StardewValley.Buff.getTimeLeft">
            <summary>Get a translated label showing the number of seconds remaining before the buff expires.</summary>
        </member>
        <member name="M:StardewValley.Buff.update(Microsoft.Xna.Framework.GameTime)">
            <summary>Update the buff state on game tick.</summary>
            <param name="time">The elapsed game time.</param>
        </member>
        <member name="M:StardewValley.Buff.OnAdded">
            <summary>Apply any logic needed when the buff is applied to a player.</summary>
        </member>
        <member name="M:StardewValley.Buff.OnRemoved">
            <summary>Apply any logic needed when the buff is removed from a player.</summary>
        </member>
        <member name="T:StardewValley.Buffs.BuffAttributeDisplay">
            <summary>Display info for a buff attribute shown when a buff doesn't have its own dedicated icon.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffAttributeDisplay.Texture">
            <summary>The icon texture to draw.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffAttributeDisplay.SpriteIndex">
            <summary>The icon's sprite index within the <see cref="F:StardewValley.Buffs.BuffAttributeDisplay.Texture"/>.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffAttributeDisplay.Value">
            <summary>The attribute's current value.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffAttributeDisplay.Description">
            <summary>The attribute's translated display name.</summary>
        </member>
        <member name="M:StardewValley.Buffs.BuffAttributeDisplay.#ctor(System.Func{Microsoft.Xna.Framework.Graphics.Texture2D},System.Int32,System.Func{StardewValley.Buff,System.Single},System.Func{System.Single,System.String})">
            <summary>Construct an instance for a custom buff attribute.</summary>
            <param name="texture">The icon texture to draw.</param>
            <param name="spriteIndex">The icon's sprite index within the <paramref name="texture"/>.</param>
            <param name="value">The attribute's current value.</param>
            <param name="description">The attribute's translated display name.</param>
        </member>
        <member name="M:StardewValley.Buffs.BuffAttributeDisplay.#ctor(System.Int32,System.Func{StardewValley.Buffs.BuffEffects,Netcode.NetFloat},System.String)">
            <summary>Construct an instance for a standard buff attribute.</summary>
            <param name="spriteIndex">The icon's sprite index within <see cref="F:StardewValley.Game1.buffsIcons"/>.</param>
            <param name="value">The attribute's current value.</param>
            <param name="descriptionKey">The translation key for the attribute's display name.</param>
        </member>
        <member name="T:StardewValley.Buffs.BuffEffects">
            <summary>The combined buff attribute values applied to a player.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.AdditiveFields">
            <summary>The attributes which are added to the player's stats.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.MultiplicativeFields">
            <summary>The attributes which are multiplied by the player's stats.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.CombatLevel">
            <summary>The buff to the player's combat skill level.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.FarmingLevel">
            <summary>The buff to the player's farming skill level.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.FishingLevel">
            <summary>The buff to the player's fishing skill level.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.MiningLevel">
            <summary>The buff to the player's mining skill level.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.LuckLevel">
            <summary>The buff to the player's luck skill level.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.ForagingLevel">
            <summary>The buff to the player's foraging skill level.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.MaxStamina">
            <summary>The buff to the player's max stamina.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.MagneticRadius">
            <summary>The buff to the player's magnetic radius.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.Speed">
            <summary>The buff to the player's walk speed.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.Defense">
            <summary>The buff to the player's defense.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.Attack">
            <summary>The buff to the player's attack power.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.Immunity">
            <summary>The combined buff to the player's resistance to negative effects.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.AttackMultiplier">
            <summary>The combined multiplier applied to the player's attack power.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.KnockbackMultiplier">
            <summary>The combined multiplier applied to monster knockback when hit by the player's weapon.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.WeaponSpeedMultiplier">
            <summary>The combined multiplier applied to the player's weapon swing speed.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.CriticalChanceMultiplier">
            <summary>The combined multiplier applied to the player's critical hit chance.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.CriticalPowerMultiplier">
            <summary>The combined multiplier applied to the player's critical hit damage.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffEffects.WeaponPrecisionMultiplier">
            <summary>The combined multiplier applied to the player's weapon accuracy.</summary>
        </member>
        <member name="M:StardewValley.Buffs.BuffEffects.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewValley.Buffs.BuffEffects.#ctor(StardewValley.GameData.Buffs.BuffAttributesData)">
            <summary>Construct an instance.</summary>
            <param name="data">The initial attributes to copy from raw object data.</param>
        </member>
        <member name="M:StardewValley.Buffs.BuffEffects.Add(StardewValley.Buffs.BuffEffects)">
            <summary>Add another buff's effects to the stats.</summary>
            <param name="other">The buff effects to add.</param>
        </member>
        <member name="M:StardewValley.Buffs.BuffEffects.Add(StardewValley.GameData.Buffs.BuffAttributesData)">
            <summary>Add buff effect data to the stats.</summary>
            <param name="data">The buff effect data to add.</param>
        </member>
        <member name="M:StardewValley.Buffs.BuffEffects.HasAnyValue">
            <summary>Get whether any stat has a non-zero value.</summary>
        </member>
        <member name="M:StardewValley.Buffs.BuffEffects.Clear">
            <summary>Remove all effects from the stats.</summary>
        </member>
        <member name="M:StardewValley.Buffs.BuffEffects.ToLegacyAttributeFormat">
            <summary>Get the main effects in the pre-1.6 <c>Data/ObjectInformation</c> format.</summary>
            <remarks>This is a specialized method and shouldn't be used by most code.</remarks>
        </member>
        <member name="T:StardewValley.Buffs.BuffManager">
            <summary>Manages buffs for a player.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffManager.Player">
            <summary>The player whose buffs are managed by the instance.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffManager.CombinedEffects">
            <summary>The combined effects of all current buffs and equipment bonuses, calculated from <see cref="F:StardewValley.Buffs.BuffManager.AppliedBuffs"/>.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffManager.AppliedBuffs">
            <summary>An unsynchronized dictionary of buffs that are currently applied to the player.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffManager.AppliedBuffIds">
            <summary>A synchronized list of buff IDs currently applied to the player.</summary>
        </member>
        <member name="F:StardewValley.Buffs.BuffManager.Dirty">
            <summary>Whether the buffs changed and will be recalculated on the next update.</summary>
        </member>
        <member name="P:StardewValley.Buffs.BuffManager.CombatLevel">
            <summary>The combined buff to the player's combat skill level.</summary>
        </member>
        <member name="P:StardewValley.Buffs.BuffManager.FarmingLevel">
            <summary>The combined buff to the player's farming skill level.</summary>
        </member>
        <member name="P:StardewValley.Buffs.BuffManager.FishingLevel">
            <summary>The combined buff to the player's fishing skill level.</summary>
        </member>
        <member name="P:StardewValley.Buffs.BuffManager.MiningLevel">
            <summary>The combined buff to the player's mining skill level.</summary>
        </member>
        <member name="P:StardewValley.Buffs.BuffManager.LuckLevel">
            <summary>The combined buff to the player's luck skill level.</summary>
        </member>
        <member name="P:StardewValley.Buffs.BuffManager.ForagingLevel">
            <summary>The combined buff to the player's foraging skill level.</summary>
        </member>
        <member name="P:StardewValley.Buffs.BuffManager.MaxStamina">
            <summary>The combined buff to the player's max stamina.</summary>
        </member>
        <member name="P:StardewValley.Buffs.BuffManager.MagneticRadius">
            <summary>The combined buff to the player's magnetic radius.</summary>
        </member>
        <member name="P:StardewValley.Buffs.BuffManager.Speed">
            <summary>The combined buff to the player's walk speed.</summary>
        </member>
        <member name="P:StardewValley.Buffs.BuffManager.Defense">
            <summary>The combined buff to the player's defense.</summary>
        </member>
        <member name="P:StardewValley.Buffs.BuffManager.Attack">
            <summary>The combined buff to the player's attack power.</summary>
        </member>
        <member name="P:StardewValley.Buffs.BuffManager.Immunity">
            <summary>The combined buff to the player's resistance to negative effects.</summary>
        </member>
        <member name="P:StardewValley.Buffs.BuffManager.AttackMultiplier">
            <summary>The combined multiplier applied to the player's attack power.</summary>
        </member>
        <member name="P:StardewValley.Buffs.BuffManager.KnockbackMultiplier">
            <summary>The combined multiplier applied to monster knockback when hit by the player's weapon.</summary>
        </member>
        <member name="P:StardewValley.Buffs.BuffManager.WeaponSpeedMultiplier">
            <summary>The combined multiplier applied to the player's weapon swing speed.</summary>
        </member>
        <member name="P:StardewValley.Buffs.BuffManager.CriticalChanceMultiplier">
            <summary>The combined multiplier applied to the player's critical hit chance.</summary>
        </member>
        <member name="P:StardewValley.Buffs.BuffManager.CriticalPowerMultiplier">
            <summary>The combined multiplier applied to the player's critical hit damage.</summary>
        </member>
        <member name="P:StardewValley.Buffs.BuffManager.WeaponPrecisionMultiplier">
            <summary>The combined multiplier applied to the player's weapon accuracy.</summary>
        </member>
        <member name="M:StardewValley.Buffs.BuffManager.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewValley.Buffs.BuffManager.GetValues">
            <summary>Get the combined buff values, recalculating them if dirty.</summary>
            <remarks>Most code should use the properties like <see cref="P:StardewValley.Buffs.BuffManager.Attack"/> instance.</remarks>
        </member>
        <member name="M:StardewValley.Buffs.BuffManager.SetOwner(StardewValley.Farmer)">
            <summary>Set the player managed by the instance.</summary>
            <param name="player">The player managed by the instance.</param>
        </member>
        <member name="M:StardewValley.Buffs.BuffManager.IsApplied(System.String)">
            <summary>Get whether the player has a buff applied.</summary>
            <param name="id">The buff ID.</param>
        </member>
        <member name="M:StardewValley.Buffs.BuffManager.HasBuffWithNameContaining(System.String)">
            <summary>Get whether the player has a buff with an ID containing the given string.</summary>
            <param name="idSubstring">The substring to match in the buff ID.</param>
        </member>
        <member name="M:StardewValley.Buffs.BuffManager.IsLocallyControlled">
            <summary>Get whether this instance is managed by the local player (e.g. it's their own buffs).</summary>
        </member>
        <member name="M:StardewValley.Buffs.BuffManager.Apply(StardewValley.Buff)">
            <summary>Add a buff to the player, or refresh it if it's already applied.</summary>
            <param name="buff">The buff to add.</param>
        </member>
        <member name="M:StardewValley.Buffs.BuffManager.Remove(System.String)">
            <summary>Remove a buff from the player.</summary>
            <param name="id">The buff ID.</param>
        </member>
        <member name="M:StardewValley.Buffs.BuffManager.Clear">
            <summary>Remove all buffs from the player.</summary>
        </member>
        <member name="M:StardewValley.Buffs.BuffManager.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>Update the buff timers and remove expired buffs.</summary>
            <param name="time">The elapsed game time.</param>
        </member>
        <member name="F:StardewValley.Buildings.Building.id">
            <summary>A unique identifier for this specific building instance.</summary>
        </member>
        <member name="F:StardewValley.Buildings.Building.indoors">
            <summary>The indoor location created for this building, if any.</summary>
            <remarks>This is mutually exclusive with <see cref="F:StardewValley.Buildings.Building.nonInstancedIndoorsName"/>. Most code should use <see cref="M:StardewValley.Buildings.Building.GetIndoors"/> instead, which handles both.</remarks>
        </member>
        <member name="F:StardewValley.Buildings.Building.nonInstancedIndoorsName">
            <summary>The unique ID of the separate location treated as the building interior (like <c>FarmHouse</c> for the farmhouse), if any.</summary>
            <remarks>This is mutually exclusive with <see cref="F:StardewValley.Buildings.Building.indoors"/>. Most code should use <see cref="M:StardewValley.Buildings.Building.GetIndoors"/> instead, which handles both.</remarks>
        </member>
        <member name="F:StardewValley.Buildings.Building.parentLocationName">
            <summary>The unique name of the location which contains this building.</summary>
        </member>
        <member name="P:StardewValley.Buildings.Building.modData">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Buildings.Building.modDataForSerialization">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Buildings.Building.isCabin">
            <summary>Get whether this is a farmhand cabin.</summary>
            <remarks>To check whether a farmhand has claimed it, use <see cref="M:StardewValley.Buildings.Building.GetIndoors"/> to get the <see cref="T:StardewValley.Locations.Cabin"/> or <see cref="T:StardewValley.Locations.FarmHouse"/> instance and call methods like <see cref="P:StardewValley.Locations.FarmHouse.HasOwner"/>.</remarks>
        </member>
        <member name="F:StardewValley.Buildings.Building.color">
            <summary>A temporary color applied to the building sprite when it's highlighted in a menu.</summary>
        </member>
        <member name="F:StardewValley.Buildings.Building.fadeWhenPlayerIsBehind">
            <summary>Whether this building should fade into semi-transparency when the local player is behind it.</summary>
        </member>
        <member name="F:StardewValley.Buildings.Building.alpha">
            <summary>The building's opacity for the local player as a value between 0 (transparent) and 1 (opaque), accounting for <see cref="F:StardewValley.Buildings.Building.fadeWhenPlayerIsBehind"/>.</summary>
        </member>
        <member name="M:StardewValley.Buildings.Building.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewValley.Buildings.Building.#ctor(System.String,Microsoft.Xna.Framework.Vector2)">
            <summary>Construct an instance.</summary>
            <param name="type">The building type ID in <see cref="F:StardewValley.Game1.buildingData"/>.</param>
            <param name="tile">The top-left tile position of the building.</param>
        </member>
        <member name="M:StardewValley.Buildings.Building.CanBeReskinned(System.Boolean)">
            <summary>Get whether the building has any skins that can be applied to it currently.</summary>
            <param name="ignoreSeparateConstructionEntries">Whether to ignore skins with <see cref="F:StardewValley.GameData.Buildings.BuildingSkin.ShowAsSeparateConstructionEntry"/> set to true.</param>
        </member>
        <member name="M:StardewValley.Buildings.Building.AllowsAnimalPregnancy">
            <summary>Get whether animals within this building can get pregnant and produce offspring.</summary>
        </member>
        <member name="M:StardewValley.Buildings.Building.CanBePainted">
            <summary>Get whether players can repaint this building.</summary>
        </member>
        <member name="M:StardewValley.Buildings.Building.GetSkin">
            <summary>Get the building's current skin, if applicable.</summary>
        </member>
        <member name="M:StardewValley.Buildings.Building.GetSkin(System.String,StardewValley.GameData.Buildings.BuildingData)">
            <summary>Get a building skin from data, if it exists.</summary>
            <param name="skinId">The building skin ID to find.</param>
            <param name="data">The building data to search.</param>
            <returns>Returns the matching building skin if found, else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.Buildings.Building.GetPaintDataKey">
            <summary>Get the key in <c>Data/PaintData</c> for the building, if it has any.</summary>
        </member>
        <member name="M:StardewValley.Buildings.Building.GetPaintDataKey(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Get the key in <c>Data/PaintData</c> for the building, if it has any.</summary>
            <param name="paintData">The loaded <c>Data/PaintData</c> asset.</param>
        </member>
        <member name="M:StardewValley.Buildings.Building.GetParentLocation">
            <summary>Get the location which contains this building.</summary>
        </member>
        <member name="M:StardewValley.Buildings.Building.IsInCurrentLocation">
            <summary>Get whether the building is in <see cref="P:StardewValley.Game1.currentLocation"/>.</summary>
        </member>
        <member name="M:StardewValley.Buildings.Building.GetData">
            <summary>Get the building's data from <see cref="F:StardewValley.Game1.buildingData"/>, if found.</summary>
        </member>
        <member name="M:StardewValley.Buildings.Building.TryGetData(System.String,StardewValley.GameData.Buildings.BuildingData@)">
            <summary>Try to get a building's data from <see cref="F:StardewValley.Game1.buildingData"/>.</summary>
            <param name="buildingType">The building type (i.e. the key in <see cref="F:StardewValley.Game1.buildingData"/>).</param>
            <param name="data">The building data, if found.</param>
            <returns>Returns whether the building data was found.</returns>
        </member>
        <member name="M:StardewValley.Buildings.Building.ReloadBuildingData(System.Boolean,System.Boolean)">
            <summary>Reload the building's data from <see cref="F:StardewValley.Game1.buildingData"/> and reapply it to the building's fields.</summary>
            <param name="forUpgrade">Whether the building is being upgraded.</param>
            <param name="forConstruction">Whether the building is being constructed.</param>
            <returns>Returns the loaded building data, if any.</returns>
            <remarks>See also <see cref="M:StardewValley.Buildings.Building.LoadFromBuildingData(StardewValley.GameData.Buildings.BuildingData,System.Boolean,System.Boolean)"/>.</remarks>
        </member>
        <member name="M:StardewValley.Buildings.Building.LoadFromBuildingData(StardewValley.GameData.Buildings.BuildingData,System.Boolean,System.Boolean)">
            <summary>Reapply the loaded data to the building's fields.</summary>
            <param name="data">The building data to load.</param>
            <param name="forUpgrade">Whether the building is being upgraded.</param>
            <param name="forConstruction">Whether the building is being constructed.</param>
            <remarks>This doesn't reload the underlying data; see <see cref="M:StardewValley.Buildings.Building.ReloadBuildingData(System.Boolean,System.Boolean)"/> if you need to do that.</remarks>
        </member>
        <member name="M:StardewValley.Buildings.Building.CreateInstanceFromId(System.String,Microsoft.Xna.Framework.Vector2)">
            <summary>Create a building instance from its type ID.</summary>
            <param name="typeId">The building type ID in <c>Data/Buildings</c>.</param>
            <param name="tile">The top-left tile position of the building.</param>
        </member>
        <member name="M:StardewValley.Buildings.Building.performActionOnBuildingPlacement">
            <summary>Handle the building being moved within its location by any player.</summary>
        </member>
        <member name="M:StardewValley.Buildings.Building.performActionOnConstruction(StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>Handle the building being constructed.</summary>
            <param name="location">The location containing the building.</param>
            <param name="who">The player that constructed the building.</param>
        </member>
        <member name="M:StardewValley.Buildings.Building.performActionOnDemolition(StardewValley.GameLocation)">
            <summary>Handle the building being demolished.</summary>
            <param name="location">The location which previously contained the building.</param>
        </member>
        <member name="M:StardewValley.Buildings.Building.ForEachItemExcludingInterior(System.Func{StardewValley.Item,System.Boolean})">
            <summary>Perform an action for each item within the building instance, excluding those in the interior location.</summary>
            <param name="action">The action to perform for each item.  This should return true (continue iterating) or false (stop).</param>
            <returns>Returns whether to continue iterating.</returns>
            <remarks>For items in the interior location, use <see cref="M:StardewValley.Utility.ForEachItemIn(StardewValley.GameLocation,System.Func{StardewValley.Item,System.Boolean})"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.Buildings.Building.ForEachItemExcludingInterior(StardewValley.Delegates.ForEachItemDelegate)">
            <summary>Perform an action for each item within the building instance, excluding those in the interior location.</summary>
            <param name="handler">The action to perform for each item.</param>
            <returns>Returns whether to continue iterating.</returns>
            <remarks>For items in the interior location, use <see cref="M:StardewValley.Utility.ForEachItemIn(StardewValley.GameLocation,System.Func{StardewValley.Item,System.Boolean})"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.Buildings.Building.UpdateTransparency">
            <summary>Update the building transparency on tick for the local player's position.</summary>
        </member>
        <member name="M:StardewValley.Buildings.Building.FinishConstruction(System.Boolean)">
            <summary>Instantly finish constructing or upgrading the building, if applicable.</summary>
        </member>
        <member name="M:StardewValley.Buildings.Building.HasIndoors">
            <summary>Get whether the building has an interior location.</summary>
        </member>
        <member name="M:StardewValley.Buildings.Building.HasIndoorsName(System.String)">
            <summary>Get whether the building has an interior location with the given unique name.</summary>
            <param name="name">The name to check.</param>
        </member>
        <member name="M:StardewValley.Buildings.Building.GetIndoorsName">
            <summary>Get the unique name of the location within this building, if it's linked to an instanced or non-instanced interior.</summary>
        </member>
        <member name="M:StardewValley.Buildings.Building.GetIndoorsType">
            <summary>Get the type of indoors location this building has.</summary>
        </member>
        <member name="M:StardewValley.Buildings.Building.GetIndoors">
            <summary>Get the location within this building, if it's linked to an instanced or non-instanced interior.</summary>
        </member>
        <member name="M:StardewValley.Buildings.Building.GetAdditionalPlacementTiles">
            <summary>Get the extra tiles to treat as part of the building when placing it through a construction menu, if any. For example, the farmhouse uses this to make sure the stairs are clear.</summary>
        </member>
        <member name="M:StardewValley.Buildings.Building.occupiesTile(Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>Get whether the building's bounds covers a given tile coordinate.</summary>
            <param name="tile">The tile position to check.</param>
            <param name="applyTilePropertyRadius">Whether to check the extra tiles around the building itself for which it may add tile properties.</param>
        </member>
        <member name="M:StardewValley.Buildings.Building.occupiesTile(System.Int32,System.Int32,System.Boolean)">
            <summary>Get whether the building's bounds covers a given tile coordinate.</summary>
            <param name="x">The X tile position to check.</param>
            <param name="y">The Y tile position to check</param>
            <param name="applyTilePropertyRadius">Whether to check the extra tiles around the building itself for which it may add tile properties.</param>
        </member>
        <member name="M:StardewValley.Buildings.Building.GetWaterColor(Microsoft.Xna.Framework.Vector2)">
            <summary>If this building is fishable, get the color of the water at the given tile position.</summary>
            <param name="tile">The tile position.</param>
            <returns>Returns the water color to use, or <c>null</c> to use the location's default water color.</returns>
        </member>
        <member name="M:StardewValley.Buildings.Building.CanRefillWateringCan">
            <summary>Whether watering cans can be refilled from any tile covered by this building.</summary>
            <remarks>If this is false, watering cans may still be refillable based on tile data (e.g. the <c>WaterSource</c> back tile property).</remarks>
        </member>
        <member name="M:StardewValley.Buildings.Building.GetBoundingBox">
            <summary>Create a pixel rectangle for the building's ground footprint within its location.</summary>
        </member>
        <member name="M:StardewValley.Buildings.Building.GetAdditionalTilePropertyRadius">
            <summary>Get the number of extra tiles around the building for which it may add tile properties, but without hiding tile properties from the underlying ground that aren't overwritten by the building data.</summary>
        </member>
        <member name="M:StardewValley.Buildings.FishPond.GetRawData(System.String)">
            <summary>Get the data entry matching a fish item ID.</summary>
            <param name="itemId">The unqualified fish item ID.</param>
        </member>
        <member name="M:StardewValley.Buildings.FishPond.GetWaterColor(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Buildings.FishPond.performActionOnConstruction(StardewValley.GameLocation,StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Buildings.FishPond.performActionOnBuildingPlacement">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Buildings.FishPond.IsValidSignItem(StardewValley.Item)">
            <summary>Get whether an item can be placed on the fish pond as a sign.</summary>
            <param name="item">The item to check.</param>
        </member>
        <member name="T:StardewValley.Buildings.IndoorsType">
            <summary>The type of indoors location a building has.</summary>
        </member>
        <member name="F:StardewValley.Buildings.IndoorsType.None">
            <summary>The building doesn't have an indoors location.</summary>
        </member>
        <member name="F:StardewValley.Buildings.IndoorsType.Instanced">
            <summary>The building has a unique interior location that was created for this building, which isn't in <see cref="P:StardewValley.Game1.locations"/> separately.</summary>
        </member>
        <member name="F:StardewValley.Buildings.IndoorsType.Global">
            <summary>The building links to a global location like <c>FarmHouse</c> for its interior, which is in <see cref="P:StardewValley.Game1.locations"/> separately.</summary>
        </member>
        <member name="F:StardewValley.Buildings.JunimoHut.obsolete_output">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="M:StardewValley.Buildings.JunimoHut.GetOutputChest"/> instead.</summary>
        </member>
        <member name="M:StardewValley.Buildings.JunimoHut.performActionOnConstruction(StardewValley.GameLocation,StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Buildings.Mill.obsolete_input">
            <summary>Obsolete. The <c>Mill</c> class is only used to preserve data from old save files. All mills were converted into plain <see cref="T:StardewValley.Buildings.Building"/> instances, with the input items in <see cref="F:StardewValley.Buildings.Building.buildingChests"/> with the <c>Input</c> key.</summary>
        </member>
        <member name="F:StardewValley.Buildings.Mill.obsolete_output">
            <summary>Obsolete. The <c>Mill</c> class is only used to preserve data from old save files. All mills were converted into plain <see cref="T:StardewValley.Buildings.Building"/> instances, with the output items in <see cref="F:StardewValley.Buildings.Building.buildingChests"/> with the <c>Output</c> key.</summary>
        </member>
        <member name="M:StardewValley.Buildings.Mill.TransferValuesToNewBuilding(StardewValley.Buildings.Building)">
            <summary>Copy the data from this mill to a new data-driven building instance.</summary>
            <param name="targetBuilding">The new building that will replace this instance.</param>
        </member>
        <member name="F:StardewValley.Buildings.PetBowl.watered">
            <summary>Whether the pet bowl is full.</summary>
        </member>
        <member name="F:StardewValley.Buildings.PetBowl.petId">
            <summary>The pet to which this bowl belongs, if any.</summary>
            <remarks>When a pet is assigned, this matches <see cref="F:StardewValley.Characters.Pet.petId"/>.</remarks>
        </member>
        <member name="M:StardewValley.Buildings.PetBowl.AssignPet(StardewValley.Characters.Pet)">
            <summary>Assign a pet to this pet bowl.</summary>
            <param name="pet">The pet to assign.</param>
        </member>
        <member name="M:StardewValley.Buildings.PetBowl.HasPet">
            <summary>Get whether any pet has been assigned to this pet bowl.</summary>
        </member>
        <member name="M:StardewValley.Buildings.ShippingBin.performActionOnBuildingPlacement">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Buildings.Stable.performActionOnDemolition(StardewValley.GameLocation)">
            <inheritdoc />
        </member>
        <member name="T:StardewValley.ButtonCollection">
            <summary>
            An effiecent way to iterate over active button state.
            </summary>
        </member>
        <member name="M:StardewValley.ButtonCollection.#ctor(Microsoft.Xna.Framework.Input.GamePadState@,Microsoft.Xna.Framework.Input.GamePadState@)">
            <summary>
            Constructs a collection of the new pressed buttons.
            </summary>
        </member>
        <member name="M:StardewValley.ButtonCollection.#ctor(Microsoft.Xna.Framework.Input.GamePadState@)">
            <summary>
            Constructs a collection of held buttons.
            </summary>
            <param name="padState"></param>
        </member>
        <member name="P:StardewValley.ButtonCollection.Count">
            <summary>
            The number of pressed buttons.
            </summary>
        </member>
        <member name="F:StardewValley.Character.ClearPositionValue">
            <summary>A position value that's invalid, used to force cached position info to update.</summary>
        </member>
        <member name="F:StardewValley.Character.cachedStandingPixel">
            <summary>The backing field for <see cref="P:StardewValley.Character.StandingPixel"/>.</summary>
        </member>
        <member name="F:StardewValley.Character.cachedTile">
            <summary>The backing field for <see cref="P:StardewValley.Character.Tile"/>.</summary>
        </member>
        <member name="F:StardewValley.Character.cachedTilePoint">
            <summary>The backing field for <see cref="P:StardewValley.Character.TilePoint"/>.</summary>
        </member>
        <member name="F:StardewValley.Character.pixelPositionForCachedStandingPixel">
            <summary>The position value for which <see cref="F:StardewValley.Character.cachedStandingPixel"/> was calculated.</summary>
        </member>
        <member name="F:StardewValley.Character.pixelPositionForCachedTile">
            <summary>The position value for which <see cref="F:StardewValley.Character.cachedTile"/> was calculated.</summary>
        </member>
        <member name="F:StardewValley.Character.pixelPositionForCachedTilePoint">
            <summary>The position value for which <see cref="F:StardewValley.Character.cachedTilePoint"/> was calculated.</summary>
        </member>
        <member name="P:StardewValley.Character.Gender">
            <summary>The character's gender identity.</summary>
        </member>
        <member name="F:StardewValley.Character.hideFromAnimalSocialMenu">
            <summary>Whether to hide this character from the animal social menu, if it would normally be shown.</summary>
        </member>
        <member name="F:StardewValley.Character.position">
            <summary>The backing field for <see cref="P:StardewValley.Character.Position"/>.</summary>
        </member>
        <member name="P:StardewValley.Character.Position">
            <summary>The character's pixel coordinates within their current location, ignoring their bounding box, relative to the top-left corner of the map.</summary>
            <remarks>See also <see cref="P:StardewValley.Character.StandingPixel"/> for the pixel coordinates at the center of their bounding box, and <see cref="P:StardewValley.Character.Tile"/> and <see cref="P:StardewValley.Character.TilePoint"/> for the tile coordinates.</remarks>
        </member>
        <member name="P:StardewValley.Character.StandingPixel">
            <summary>The pixel coordinates at the center of this character's bounding box, relative to the top-left corner of the map.</summary>
            <remarks>See also <see cref="M:StardewValley.Character.getStandingPosition"/> for a vector version, <see cref="P:StardewValley.Character.Tile"/> and <see cref="P:StardewValley.Character.TilePoint"/> for the tile coordinates, or <see cref="P:StardewValley.Character.Position"/> for the raw pixel position.</remarks>
        </member>
        <member name="P:StardewValley.Character.Tile">
            <summary>The character's tile position within their current location.</summary>
            <remarks>See also <see cref="P:StardewValley.Character.TilePoint"/> for a point version, <see cref="P:StardewValley.Character.StandingPixel"/> the pixel coordinates at the center of their bounding box, or <see cref="P:StardewValley.Character.Position"/> for the raw pixel position.</remarks>
        </member>
        <member name="P:StardewValley.Character.TilePoint">
            <summary>The character's tile position within their current location as a <see cref="T:Microsoft.Xna.Framework.Point"/>.</summary>
            <remarks>See also <see cref="P:StardewValley.Character.Tile"/> for a vector version, <see cref="P:StardewValley.Character.StandingPixel"/> the pixel coordinates at the center of their bounding box, or <see cref="P:StardewValley.Character.Position"/> for the raw pixel position.</remarks>
        </member>
        <member name="P:StardewValley.Character.IsMonster">
            <summary>Whether this is a monster NPC type, regardless of whether they're present in <c>Data/Monsters</c>.</summary>
        </member>
        <member name="P:StardewValley.Character.IsVillager">
            <summary>Whether this is a villager NPC type, regardless of whether they're present in <c>Data/Characters</c>.</summary>
        </member>
        <member name="P:StardewValley.Character.modData">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Character.modDataForSerialization">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Character.ClearCachedPosition">
            <summary>Forget the cached bounding box values so they're recalculated on the next request.</summary>
        </member>
        <member name="M:StardewValley.Character.resetCachedDisplayName">
            <summary>Reset the cached display name, so <see cref="M:StardewValley.Character.translateName"/> is called again next time it's requested.</summary>
        </member>
        <member name="M:StardewValley.Character.playNearbySoundLocal(System.String,System.Nullable{System.Int32},StardewValley.Audio.SoundContext)">
            <summary>Play a sound for the current player only if they're near this player.</summary>
            <param name="audioName">The sound ID to play.</param>
            <param name="pitch">The pitch modifier to apply, or <c>null</c> to keep it as-is.</param>
            <param name="context">The source which triggered the sound.</param>
        </member>
        <member name="M:StardewValley.Character.playNearbySoundAll(System.String,System.Nullable{System.Int32},StardewValley.Audio.SoundContext)">
            <summary>Play a sound for each nearby online player.</summary>
            <param name="audioName">The sound ID to play.</param>
            <param name="pitch">The pitch modifier to apply, or <c>null</c> to keep it as-is.</param>
            <param name="context">The source which triggered the sound.</param>
        </member>
        <member name="M:StardewValley.Character.getStandingPosition">
            <summary>Get the pixel coordinates at the center of this character's bounding box as a vector, relative to the top-left corner of the map.</summary>
            <remarks>See <see cref="P:StardewValley.Character.StandingPixel"/> for a point version.</remarks>
        </member>
        <member name="M:StardewValley.Character.isColliding(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2)">
             <summary>
            
             make sure that you also override hasSpecialCollisionRules() in any class that overrides isColliding().
             Otherwise isColliding() will never be called.
             dumb I kno
             </summary>
             <param name="l"></param>
             <param name="tile"></param>
             <returns></returns>
        </member>
        <member name="M:StardewValley.Character.DrawShadow(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>Draw the shadow under this character.</summary>
            <param name="b">The sprite batch being drawn.</param>
        </member>
        <member name="T:StardewValley.Characters.Cat">
            <summary>Obsolete. This is only kept to preserve data from old save files. All cats now use the <see cref="T:StardewValley.Characters.Pet"/> class instead.</summary>
        </member>
        <member name="P:StardewValley.Characters.Child.IsVillager">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Characters.Child.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Characters.Child.ChooseAppearance(StardewValley.LocalizedContentManager)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Characters.Child.hasDarkSkin">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Characters.Child.getMugShotSourceRect">
            <inheritdoc />
        </member>
        <member name="T:StardewValley.Characters.Dog">
            <summary>Obsolete. This is only kept to preserve data from old save files. All dogs now use the <see cref="T:StardewValley.Characters.Pet"/> class instead.</summary>
        </member>
        <member name="P:StardewValley.Characters.Horse.IsVillager">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Characters.Horse.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Characters.Horse.ChooseAppearance(StardewValley.LocalizedContentManager)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Characters.Horse.TryFindStable">
            <summary>Find the stable which this horse calls home, if it exists.</summary>
        </member>
        <member name="P:StardewValley.Characters.Junimo.IsVillager">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Characters.Junimo.DrawShadow(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Characters.JunimoHarvester.IsVillager">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Characters.JunimoHarvester.ChooseAppearance(StardewValley.LocalizedContentManager)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Characters.Pet.type_cat">
            <summary>The cat's pet type ID in <c>Data/Pets</c>.</summary>
        </member>
        <member name="F:StardewValley.Characters.Pet.type_dog">
            <summary>The dog's pet type ID in <c>Data/Pets</c>.</summary>
        </member>
        <member name="F:StardewValley.Characters.Pet.petId">
            <summary>A unique ID for this pet.</summary>
            <remarks>This matches the <see cref="F:StardewValley.Buildings.PetBowl.petId"/> of the pet's bowl, if any. See also <see cref="M:StardewValley.Characters.Pet.GetPetBowl"/>.</remarks>
        </member>
        <member name="F:StardewValley.Characters.Pet.homeLocationName">
            <summary>The unique name of the location containing the pet's bowl, if any.</summary>
        </member>
        <member name="P:StardewValley.Characters.Pet.IsVillager">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Characters.Pet.GetPetData">
            <summary>Get the data from <c>Data/Pets</c> for the pet type, if it's valid.</summary>
        </member>
        <member name="M:StardewValley.Characters.Pet.TryGetData(System.String,StardewValley.GameData.Pets.PetData@)">
            <summary>Get the underlying content data for a pet type, if any.</summary>
            <param name="petType">The pet type's ID in <c>Data/Pets</c>.</param>
            <param name="data">The pet data, if found.</param>
            <returns>Returns whether the pet data was found.</returns>
        </member>
        <member name="M:StardewValley.Characters.Pet.GetPetIcon(System.String@,Microsoft.Xna.Framework.Rectangle@)">
            <summary>Get the icon to show in the game menu for this pet.</summary>
            <param name="assetName">The asset name for the texture.</param>
            <param name="sourceRect">The 16x16 pixel area within the texture for the icon.</param>
        </member>
        <member name="M:StardewValley.Characters.Pet.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Characters.Pet.ChooseAppearance(StardewValley.LocalizedContentManager)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Characters.Pet.GetPetBowl">
            <summary>Get the pet bowl assigned to this pet, if any.</summary>
        </member>
        <member name="M:StardewValley.Characters.Pet.WarpToPetBowl">
            <summary>Warp the pet to its assigned pet bowl, if any.</summary>
        </member>
        <member name="P:StardewValley.Characters.TrashBear.IsVillager">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Characters.TrashBear.ChooseAppearance(StardewValley.LocalizedContentManager)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Characters.TrashBear.tryToReceiveActiveObject(StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.ConsoleAsync.GenericOp.Result">
            <summary>
            Returns true if successful
            
            Otherwise will throw the tasks exception.
            This should be called from within the Action callback.
            </summary>        
        </member>
        <member name="T:StardewValley.Constants.EventIds">
            <summary>The <see cref="F:StardewValley.Event.id"/> values for generated event scripts not taken from one of the event data files.</summary>
        </member>
        <member name="F:StardewValley.Constants.EventIds.Unknown">
            <summary>An unknown generated event.</summary>
        </member>
        <member name="F:StardewValley.Constants.EventIds.BirdieIntro">
            <summary>Meeting Birdie.</summary>
        </member>
        <member name="F:StardewValley.Constants.EventIds.BirdieQuestFinished">
            <summary>Finishing Birdie's quest line.</summary>
        </member>
        <member name="F:StardewValley.Constants.EventIds.BoatDeparture">
            <summary>Boarding Willy's boat to Ginger Island.</summary>
        </member>
        <member name="F:StardewValley.Constants.EventIds.IslandDeparture">
            <summary>Boarding Willy's boat to Stardew Valley.</summary>
        </member>
        <member name="F:StardewValley.Constants.EventIds.MovieThreaterScreening">
            <summary>Watching a movie at the movie theater.</summary>
        </member>
        <member name="F:StardewValley.Constants.EventIds.MissingBundleComplete">
            <summary>Completing the Abandoned Joja Mart's secret bundle.</summary>
        </member>
        <member name="F:StardewValley.Constants.EventIds.TrashBearCleanup">
            <summary>The <see cref="T:StardewValley.Characters.TrashBear"/> cleaning up the valley.</summary>
        </member>
        <member name="F:StardewValley.Constants.EventIds.Wedding">
            <summary>The player getting married.</summary>
        </member>
        <member name="T:StardewValley.Constants.StatKeys">
            <summary>The stat keys which can be used with methods like <see cref="M:StardewValley.Stats.Get(System.String)"/> and <see cref="M:StardewValley.Stats.Set(System.String,System.UInt32)"/>.</summary>
        </member>
        <member name="F:StardewValley.CraftingRecipe.index_ingredients">
            <summary>The index in <c>Data/CookingRecipes</c> or <c>Data/CraftingRecipes</c> for the ingredient list.</summary>
        </member>
        <member name="F:StardewValley.CraftingRecipe.index_output">
            <summary>The index in <c>Data/CookingRecipes</c> or <c>Data/CraftingRecipes</c> for the produced items.</summary>
        </member>
        <member name="F:StardewValley.CraftingRecipe.index_cookingUnlockConditions">
            <summary>The index in <c>Data/CookingRecipes</c> for the unlock conditions.</summary>
        </member>
        <member name="F:StardewValley.CraftingRecipe.index_cookingDisplayName">
            <summary>The index in <c>Data/CookingRecipes</c> for the optional translated recipe name. If omitted, the display name for the first output item is used.</summary>
        </member>
        <member name="F:StardewValley.CraftingRecipe.index_craftingBigCraftable">
            <summary>The index in <c>Data/CraftingRecipes</c> for whether it produces a <see cref="F:StardewValley.ItemRegistry.type_bigCraftable"/> item.</summary>
        </member>
        <member name="F:StardewValley.CraftingRecipe.index_craftingUnlockConditions">
            <summary>The index in <c>Data/CraftingRecipes</c> for the unlock conditions.</summary>
        </member>
        <member name="F:StardewValley.CraftingRecipe.index_craftingDisplayName">
            <summary>The index in <c>Data/CraftingRecipes</c> for the optional translated recipe name. If omitted, the display name for the first output item is used.</summary>
        </member>
        <member name="F:StardewValley.CraftingRecipe.name">
            <summary>The recipe key in <c>Data/CookingRecipes</c> or <c>Data/CraftingRecipes</c>.</summary>
        </member>
        <member name="F:StardewValley.CraftingRecipe.DisplayName">
            <summary>The translated display name for this recipe.</summary>
        </member>
        <member name="F:StardewValley.CraftingRecipe.description">
            <summary>The translated description for the item produced by recipe.</summary>
        </member>
        <member name="F:StardewValley.CraftingRecipe.craftingRecipes">
            <summary>The cached crafting recipe data loaded from <c>Data/CraftingRecipes</c>.</summary>
        </member>
        <member name="F:StardewValley.CraftingRecipe.cookingRecipes">
            <summary>The cached cooking recipe data loaded from <c>Data/CookingRecipes</c>.</summary>
        </member>
        <member name="F:StardewValley.CraftingRecipe.recipeList">
            <summary>The ingredients needed by this recipe, indexed by unqualified item ID or category number.</summary>
        </member>
        <member name="F:StardewValley.CraftingRecipe.itemToProduce">
            <summary>The unqualified item IDs produced by this recipe. If there are multiple items, one is chosen at random each time.</summary>
        </member>
        <member name="F:StardewValley.CraftingRecipe.bigCraftable">
            <summary>Whether this recipe produces a <see cref="F:StardewValley.ItemRegistry.type_bigCraftable"/> item, instead of an <see cref="F:StardewValley.ItemRegistry.type_object"/> item.</summary>
        </member>
        <member name="F:StardewValley.CraftingRecipe.isCookingRecipe">
            <summary>Whether this is a recipe in <c>Data/CookingRecipes</c> (true) or <c>Data/CraftingRecipes</c> (false).</summary>
        </member>
        <member name="F:StardewValley.CraftingRecipe.timesCrafted">
            <summary>The number of times this recipe has been crafted by the player.</summary>
        </member>
        <member name="F:StardewValley.CraftingRecipe.numberProducedPerCraft">
            <summary>The number of the selected item in <see cref="F:StardewValley.CraftingRecipe.itemToProduce"/> to produce.</summary>
        </member>
        <member name="M:StardewValley.CraftingRecipe.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="name">The recipe key in <c>Data/CookingRecipes</c> or <c>Data/CraftingRecipes</c>.</param>
        </member>
        <member name="M:StardewValley.CraftingRecipe.#ctor(System.String,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="name">The recipe key in <c>Data/CookingRecipes</c> or <c>Data/CraftingRecipes</c>.</param>
            <param name="isCookingRecipe">Whether this is a recipe in <c>Data/CookingRecipes</c> (true) or <c>Data/CraftingRecipes</c> (false).</param>
        </member>
        <member name="M:StardewValley.CraftingRecipe.LogParseError(System.String,System.String)">
            <summary>Log a message indicating the underlying crafting data is invalid.</summary>
            <param name="rawData">The raw data being parsed.</param>
            <param name="message">The error message indicating why parsing failed.</param>
        </member>
        <member name="F:StardewValley.Crop.currentLocationImpl">
            <summary>The backing field for <see cref="P:StardewValley.Crop.currentLocation"/>.</summary>
        </member>
        <member name="F:StardewValley.Crop.phaseDays">
            <summary>The number of days in each visual step of growth before the crop is harvestable. The last entry in this list is <see cref="F:StardewValley.Crop.finalPhaseLength"/>.</summary>
        </member>
        <member name="F:StardewValley.Crop.rowInSpriteSheet">
            <summary>The index of this crop in the spritesheet texture (one crop per row).</summary>
        </member>
        <member name="F:StardewValley.Crop.indexOfHarvest">
            <summary>The unqualified item ID produced when this crop is harvested.</summary>
        </member>
        <member name="F:StardewValley.Crop.whichForageCrop">
            <summary>The seed ID, if this is a forage or wild seed crop.</summary>
        </member>
        <member name="F:StardewValley.Crop.tintColor">
            <summary>The tint colors that can be applied to the crop sprite, if any. If multiple colors are listed, one is chosen at random for each crop.</summary>
        </member>
        <member name="F:StardewValley.Crop.raisedSeeds">
            <summary>Whether this is a raised crop on a trellis that can't be walked through.</summary>
        </member>
        <member name="F:StardewValley.Crop.programColored">
            <summary>Whether to apply the <see cref="F:StardewValley.Crop.tintColor"/>.</summary>
        </member>
        <member name="F:StardewValley.Crop.netSeedIndex">
            <summary>The unqualified seed ID, if this is a regular crop.</summary>
        </member>
        <member name="F:StardewValley.Crop.overrideTexturePath">
            <summary>The asset name for the crop texture under the game's <c>Content</c> folder, or null to use <see cref="F:StardewValley.Game1.cropSpriteSheetName"/>.</summary>
        </member>
        <member name="P:StardewValley.Crop.currentLocation">
            <summary>The location containing the crop.</summary>
        </member>
        <member name="P:StardewValley.Crop.Dirt">
            <summary>The dirt which contains this crop.</summary>
        </member>
        <member name="P:StardewValley.Crop.modData">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Crop.modDataForSerialization">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Crop.ResolveSeedId(System.String,StardewValley.GameLocation)">
            <summary>Choose a random seed from a bag of mixed seeds, if applicable.</summary>
            <param name="itemId">The unqualified item ID for the seed item.</param>
            <param name="location">The location for which to resolve the crop.</param>
            <returns>Returns the unqualified seed ID to use.</returns>
        </member>
        <member name="M:StardewValley.Crop.GetData">
            <summary>Get the crop's data from <see cref="F:StardewValley.Game1.cropData"/>, if found.</summary>
        </member>
        <member name="M:StardewValley.Crop.TryGetData(System.String,StardewValley.GameData.Crops.CropData@)">
            <summary>Try to get a crop's data from <see cref="F:StardewValley.Game1.cropData"/>.</summary>
            <param name="seedId">The unqualified item ID for the crop's seed (i.e. the key in <see cref="F:StardewValley.Game1.cropData"/>).</param>
            <param name="data">The crop data, if found.</param>
            <returns>Returns whether the crop data was found.</returns>
        </member>
        <member name="M:StardewValley.Crop.IsInSeason(StardewValley.GameLocation)">
            <summary>Get whether this crop is in season for the given location.</summary>
            <param name="location">The location to check.</param>
        </member>
        <member name="M:StardewValley.Crop.IsInSeason(StardewValley.GameLocation,System.String)">
            <summary>Get whether a crop is in season for the given location.</summary>
            <param name="location">The location to check.</param>
            <param name="seedId">The unqualified item ID for the crop's seed.</param>
        </member>
        <member name="M:StardewValley.Crop.GetHarvestMethod">
            <summary>Get the method by which the crop can be harvested.</summary>
        </member>
        <member name="M:StardewValley.Crop.RegrowsAfterHarvest">
            <summary>Get whether this crop regrows after it's harvested.</summary>
        </member>
        <member name="M:StardewValley.Crop.TryGetGiantCrops(System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{System.String,StardewValley.GameData.GiantCrops.GiantCropData}}@)">
            <summary>Get the giant crops which can grow from this crop, if any.</summary>
            <param name="giantCrops">The giant crops which can grow from this crop.</param>
            <returns>Returns whether <paramref name="giantCrops"/> is non-empty.</returns>
        </member>
        <member name="M:StardewValley.Crop.isWildSeedCrop">
            <summary>Get whether this is a vanilla wild seed crop.</summary>
        </member>
        <member name="T:StardewValley.DataLoader">
            <summary>Loads vanilla data assets with the right name and type.</summary>
        </member>
        <member name="M:StardewValley.DataLoader.Achievements(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Achievements</c> asset, which adds the data for unlockable achievements.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="F:StardewValley.Game1.achievements"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.AdditionalFarms(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/AdditionalFarms</c> asset, which defines farm type data beyond the original types.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>See also <see cref="F:StardewValley.Game1.whichModFarm"/>.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.AdditionalLanguages(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/AdditionalLanguages</c> asset, which defines custom display languages.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.AdditionalWallpaperFlooring(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/AdditionalWallpaperFlooring</c> asset, which defines custom indoor wallpaper and floor styles.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.AnimationDescriptions(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/animationDescriptions</c> asset, which defines animations used in NPC scheduling.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.AquariumFish(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/AquariumFish</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.AudioChanges(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/AudioChanges</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.BigCraftables(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/BigCraftables</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="F:StardewValley.Game1.bigCraftableData"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.Boots(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Boots</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Buffs(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Buffs</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Buildings(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Buildings</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="F:StardewValley.Game1.buildingData"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.Bundles(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Bundles</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.ChairTiles(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/ChairTiles</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Characters(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Characters</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="F:StardewValley.Game1.characterData"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.Concessions(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Concessions</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.ConcessionTastes(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/ConcessionTastes</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.CookingRecipes(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/CookingRecipes</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="F:StardewValley.CraftingRecipe.cookingRecipes"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.CraftingRecipes(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/CraftingRecipes</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="F:StardewValley.CraftingRecipe.craftingRecipes"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.Crops(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Crops</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="F:StardewValley.Game1.cropData"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.EngagementDialogue(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/EngagementDialogue</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.FarmAnimals(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/FarmAnimals</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="F:StardewValley.Game1.farmAnimalData"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.Fences(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Fences</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="M:StardewValley.Fence.GetFenceLookup"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.Festivals_FestivalDates(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Festivals/FestivalDates</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Fish(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Fish</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.FishPondData(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/FishPondData</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.FloorsAndPaths(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/FloorsAndPaths</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="F:StardewValley.Game1.floorPathData"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.FruitTrees(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/FruitTrees</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="F:StardewValley.Game1.fruitTreeData"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.Furniture(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Furniture</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.GarbageCans(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/GarbageCans</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.GiantCrops(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/GiantCrops</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.HairData(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/HairData</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Hats(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/hats</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.HomeRenovations(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/HomeRenovations</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.IncomingPhoneCalls(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/IncomingPhoneCalls</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.JukeboxTracks(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/JukeboxTracks</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="F:StardewValley.Game1.jukeboxTrackData"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.LocationContexts(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/LocationContexts</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="F:StardewValley.Game1.locationContextData"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.Locations(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Locations</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Machines(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Machines</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Mail(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/mail</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.MakeoverOutfits(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/MakeoverOutfits</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Mannequins(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Mannequins</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Minecarts(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Minecarts</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Monsters(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Monsters</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.MonsterSlayerQuests(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/MonsterSlayerQuests</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Movies(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Movies</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="M:StardewValley.Locations.MovieTheater.GetMovieData"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.MoviesReactions(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/MoviesReactions</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="M:StardewValley.Locations.MovieTheater.GetMovieReactions"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.MuseumRewards(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/MuseumRewards</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.NpcGiftTastes(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/NPCGiftTastes</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="F:StardewValley.Game1.NPCGiftTastes"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.Objects(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Objects</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="F:StardewValley.Game1.objectData"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.PaintData(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/PaintData</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Pants(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Pants</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="F:StardewValley.Game1.pantsData"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.PassiveFestivals(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/PassiveFestivals</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Pets(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Pets</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="F:StardewValley.Game1.petData"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.Powers(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Powers</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Quests(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Quests</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.RandomBundles(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/RandomBundles</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.SecretNotes(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/SecretNotes</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Shirts(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Shirts</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="F:StardewValley.Game1.shirtData"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.Shops(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Shops</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.SpecialOrders(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/SpecialOrders</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.TailoringRecipes(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/TailoringRecipes</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Tools(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Tools</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="F:StardewValley.Game1.toolData"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.TriggerActions(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/TriggerActions</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Trinkets(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Trinkets</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Weapons(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Weapons</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="F:StardewValley.Game1.weaponData"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.Weddings(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/Weddings</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.WildTrees(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/WildTrees</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="M:StardewValley.TerrainFeatures.Tree.GetWildTreeDataDictionary"/> or <see cref="M:StardewValley.TerrainFeatures.Tree.GetWildTreeSeedLookup"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.WorldMap(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/WorldMap</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
            <remarks>Most code should use <see cref="T:StardewValley.WorldMaps.WorldMapManager"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.DataLoader.Tv_CookingChannel(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/TV/CookingChannel</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Tv_TipChannel(StardewValley.LocalizedContentManager)">
            <summary>Load the <c>Data/TV/TipChannel</c> asset.</summary>
            <param name="content">The content manager through which to load data.</param>
        </member>
        <member name="M:StardewValley.DataLoader.Load``1(StardewValley.LocalizedContentManager,System.String)">
            <summary>Load an asset.</summary>
            <typeparam name="TAsset">The asset type.</typeparam>
            <param name="content">The content manager through which to load data.</param>
            <param name="assetName">The asset name to load.</param>
            <exception cref="T:Microsoft.Xna.Framework.Content.ContentLoadException">The asset could not be loaded.</exception>
        </member>
        <member name="F:StardewValley.Debris.DebrisType.CHUNKS">
            <summary>The small 'chunks' that appear when hitting a tree with wood.</summary>
        </member>
        <member name="F:StardewValley.Debris.DebrisType.SPRITECHUNKS">
            <summary>Sprites broken up into square chunks (i.e. the crumbs when you eat).</summary>
        </member>
        <member name="M:StardewValley.Debris.#ctor(System.Int32,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>Construct an instance for resource/item debris.</summary>
        </member>
        <member name="M:StardewValley.Debris.#ctor(System.Int32,System.Int32,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>Construct an instance for resource/item type debris.</summary>
        </member>
        <member name="M:StardewValley.Debris.#ctor(System.Int32,System.Int32,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Int32,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>Construct an instance for cosmetic "chunks".</summary>
        </member>
        <member name="M:StardewValley.Debris.#ctor(System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>Construct an instance for floating items.</summary>
        </member>
        <member name="M:StardewValley.Debris.#ctor(System.String,System.Int32,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>Construct an instance for floating items.</summary>
        </member>
        <member name="M:StardewValley.Debris.#ctor(StardewValley.Item,Microsoft.Xna.Framework.Vector2)">
            <summary>Construct an instance for floating items.</summary>
        </member>
        <member name="M:StardewValley.Debris.#ctor(StardewValley.Item,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>Construct an instance for floating items.</summary>
        </member>
        <member name="M:StardewValley.Debris.#ctor(System.Int32,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,StardewValley.Character)">
            <summary>Construct an instance for numbers.</summary>
        </member>
        <member name="M:StardewValley.Debris.#ctor(System.String,System.Int32,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>Construct an instance for letters.</summary>
        </member>
        <member name="M:StardewValley.Debris.#ctor(System.String,System.Int32,Microsoft.Xna.Framework.Vector2)">
            <summary>Construct an instance for sprite chunks.</summary>
        </member>
        <member name="M:StardewValley.Debris.#ctor(System.String,Microsoft.Xna.Framework.Rectangle,System.Int32,Microsoft.Xna.Framework.Vector2)">
            <summary>Construct an instance for sprite chunks.</summary>
        </member>
        <member name="M:StardewValley.Debris.#ctor(System.String,Microsoft.Xna.Framework.Rectangle,System.Int32,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32)">
            <summary>Construct an instance for sprite chunks.</summary>
        </member>
        <member name="M:StardewValley.Debris.#ctor(System.String,Microsoft.Xna.Framework.Rectangle,System.Int32,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Int32)">
            <summary>Construct an instance for sprite chunks.</summary>
        </member>
        <member name="M:StardewValley.Debris.InitializeChunks(System.Int32,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>Initialize the chunks, called from all constructors.</summary>
        </member>
        <member name="T:StardewValley.DebugCommands">
            <summary>The debug commands that can be executed through the console.</summary>
        </member>
        <member name="F:StardewValley.DebugCommands.Handlers">
            <summary>The supported tokens and their resolvers.</summary>
        </member>
        <member name="F:StardewValley.DebugCommands.Aliases">
            <summary>Alternate names for debug commands (e.g. shorthand or acronyms).</summary>
        </member>
        <member name="M:StardewValley.DebugCommands.#cctor">
            <summary>Register the default debug commands, defined as <see cref="T:StardewValley.DebugCommands.DefaultHandlers"/> methods.</summary>
        </member>
        <member name="M:StardewValley.DebugCommands.TryHandle(System.String[],StardewValley.Logging.IGameLogger)">
            <summary>Try to handle a debug command.</summary>
            <param name="command">The full debug command split by spaces, including the command name and arguments.</param>
            <param name="log">The log to which to write command output, or <c>null</c> to use <see cref="F:StardewValley.Game1.log"/>.</param>
            <returns>Returns whether the command was found and executed, regardless of whether the command logic succeeded.</returns>
        </member>
        <member name="T:StardewValley.DebugCommands.DefaultHandlers">
            <summary>The low-level handlers for vanilla debug commands. Most code should call <see cref="M:StardewValley.DebugCommands.TryHandle(System.String[],StardewValley.Logging.IGameLogger)"/> instead, which adds error-handling.</summary>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.GrowWildTrees(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.EventTestSpecific(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.EventTest(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.GetAllQuests(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Movie(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.MovieSchedule(System.String[],StardewValley.Logging.IGameLogger)">
            <summary>Print the movie schedule for a specified year.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Shop(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ExportShops(System.String[],StardewValley.Logging.IGameLogger)">
            <summary>Export a summary of every shop's current inventory.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Dating(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ClearActiveDialogueEvents(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Buff(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ClearBuffs(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.PauseTime(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.FrameByFrame(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.FillBackpack(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Bobber(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ShiftToolbarLeft(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ShiftToolbarRight(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.CharacterInfo(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.DoesItemExist(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SpecialItem(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.AnimalInfo(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ClearChildren(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.CreateSplash(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Pregnant(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SpreadSeeds(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SpreadDirt(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.RemoveFurniture(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.MakeEx(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.DarkTalisman(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ConventionMode(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.FarmMap(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ClearMuseum(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Clone(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ZoomLevel(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.UiScale(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.DeleteArch(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Save(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.RemoveLargeTerrainFeature(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Test(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.FenceDecay(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ShowTextAboveHead(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Gamepad(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Slimecraft(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.KillMonsterStat(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.FixAnimals(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.DisplaceAnimals(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SteamInfo(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Achieve(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ResetAchievements(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Divorce(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.BefriendAnimals(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.PetToFarm(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.BefriendPets(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Version(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.NoSave(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ReadyForHarvest(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.BeachBridge(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Dp(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
            <remarks>See also <see cref="M:StardewValley.DebugCommands.DefaultHandlers.DaysPlayed(System.String[],StardewValley.Logging.IGameLogger)"/>.</remarks>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.FrameOffset(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Horse(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Owl(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Pole(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.RemoveQuest(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.CompleteQuest(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SetPreferredPet(System.String[],StardewValley.Logging.IGameLogger)">
            <summary>Set the current player's preferred pet type and breed. This doesn't change any existing pets; see <see cref="M:StardewValley.DebugCommands.DefaultHandlers.ChangePet(System.String[],StardewValley.Logging.IGameLogger)"/> for that.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ChangePet(System.String[],StardewValley.Logging.IGameLogger)">
            <summary>Change the pet type and/or breed for a specific pet. This doesn't change the player's preferred pet type/breed; see <see cref="M:StardewValley.DebugCommands.DefaultHandlers.SetPreferredPet(System.String[],StardewValley.Logging.IGameLogger)"/> for that.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ClearCharacters(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Cat(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Dog(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Quest(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.DeliveryQuest(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.CollectQuest(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SlayQuest(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Quests(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ClearQuests(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.FillBin(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Gold(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ClearFarm(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SetupFarm(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.RemoveBuildings(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Build(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ForceBuild(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.BuildCoop(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.LocalInfo(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.AmbientLight(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ResetMines(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SpeakTo(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SkullKey(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.TownKey(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Specials(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SkullGear(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ClearSpecials(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Tv(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SecretNote(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Child2(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Child(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.KillAll(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ResetWorldState(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.KillAllHorses(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.DatePlayer(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.EngagePlayer(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.MarryPlayer(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Marry(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Engaged(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ClearLightGlows(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Wallpaper(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ClearFurniture(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Furniture(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SpawnCoopsAndBarns(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SetupFishPondFarm(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Grass(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SetupBigFarm(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.HouseUpgrade(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ThisHouseUpgrade(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Clear(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Wall(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Floor(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Sprinkle(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ClearMail(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.BroadcastMailbox(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.MailForTomorrow(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.AllMail(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.AllMailRead(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ShowMail(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.WhereIs(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.PanMode(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.InputSim(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Hurry(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.MorePollen(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.FillWithObject(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SpawnWeeds(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.BusDriveBack(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.BusDriveOff(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.CompleteJoja(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.CompleteCc(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Break(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.WhereOre(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.AllBundles(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.JunimoGoodbye(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Bundle(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Lookup(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.CcLoadCutscene(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.CcLoad(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Plaque(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.JunimoStar(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.AddJunimo(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ResetJunimoNotes(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.JunimoNote(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.WaterColor(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.FestivalScore(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.AddOtherFarmer(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.PlayMusic(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Jump(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Toss(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Rain(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.GreenRain(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SetFrame(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.EndEvent(System.String[],StardewValley.Logging.IGameLogger)">
            <summary>Immediately end the current event.</summary>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Language(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.RunTestEvent(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.QiBoard(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.OrdersBoard(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ReturnedDonations(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.CompleteSpecialOrders(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SpecialOrder(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.BoatJourney(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Minigame(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Event(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.EventById(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SetFarmEvent(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.TestWedding(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Festival(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.PlaySound(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.LogSounds(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Crafting(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Cooking(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Experience(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ShowExperience(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Profession(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ClearFishCaught(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.FishCaught(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ResetForPlayerEntry(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Fish(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.GrowAnimals(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.PauseAnimals(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.UnpauseAnimals(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.RemoveTerrainFeatures(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.MushroomTrees(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.TrashCan(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.FruitTrees(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Train(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.DebrisWeather(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Speed(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.DayUpdate(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.FarmerDayUpdate(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.MuseumLoot(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.NewMuseumLoot(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.CreateDebris(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.RemoveDebris(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.RemoveDirt(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.DyeAll(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.DyeShirt(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.DyePants(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.CustomizeMenu(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.CopyOutfit(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SkinColor(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Hat(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Pants(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.HairStyle(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.HairColor(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Shirt(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.MusicVolume(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.RemoveObjects(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.RemoveLights(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Item(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ItemQuery(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.GameQuery(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Tokens(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.DyeMenu(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Tailor(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Forge(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ListTags(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.QualifiedId(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Dye(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.GetIndex(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.FuzzyItemNamed(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ItemNamed(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Achievement(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Heal(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Die(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Energize(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Exhaust(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Warp(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.WarpHome(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Money(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.CatchAllFish(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ActivateCalicoStatue(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Perfection(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Walnut(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Gem(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.KillNpc(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.DaysPlayed(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
            <remarks>See also <see cref="M:StardewValley.DebugCommands.DefaultHandlers.Dp(System.String[],StardewValley.Logging.IGameLogger)"/>.</remarks>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.FriendAll(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Friendship(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.GetStat(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SetStat(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SeenEvent(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SeenMail(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.CookingRecipe(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.AddCraftingRecipe(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.UpgradeHouse(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.StopRafting(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Time(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.AddMinute(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.AddHour(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Water(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.GrowCrops(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.CanMove(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Backpack(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Question(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Year(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Day(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Season(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.AddDialogue(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Speech(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.LoadDialogue(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Wedding(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.GameMode(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Volcano(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.MineLevel(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.MineInfo(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Viewport(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.MakeInedible(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.WarpAnimalToMe(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.WarpCharacterToMe(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.WarpCharacter(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.WarpToPlayer(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.WarpToCharacter(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.WarpCharacterTo(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.WarpShop(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.FacePlayer(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Refuel(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Lantern(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.GrowGrass(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.AddAllCrafting(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Animal(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.MoveBuilding(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Fishing(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.FaceDirection(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Note(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.NetHost(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.NetJoin(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.LevelUp(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Darts(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.MineGame(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Crane(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.TailorRecipeListTool(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.AnimationPreviewTool(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.CreateDino(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Action(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.BroadcastMail(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Phone(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Renovate(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Crib(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.TestNut(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ShuffleBundles(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Split(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SkinBuilding(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.PaintBuilding(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.MineDifficulty(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SkullCaveDifficulty(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ToggleLightingScale(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.FixWeapons(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.PrintGemBirds(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.PrintPlayerPos(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ShowPlurals(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.HoldItem(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.RunMacro(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.InviteMovie(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Monster(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Ladder(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.NetLog(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.NetClear(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.NetDump(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.LogBandwidth(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ChangeWallet(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.SeparateWallets(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.MergeWallets(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Sleep(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Invincible(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ValidateNetFields(System.String[],StardewValley.Logging.IGameLogger)">
            <summary>Toggle whether multiplayer sync fields should run detailed validation to detect possible bugs. See remarks on <see cref="F:Netcode.NetFields.ShouldValidateNetFields"/>.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.FilterLoadMenu(System.String[],StardewValley.Logging.IGameLogger)">
            <summary>Filter the saves shown in the current load or co-op menu based on a search term.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.WorldMapLines(System.String[],StardewValley.Logging.IGameLogger)">
            <summary>Toggle the <see cref="F:StardewValley.Menus.MapPage.EnableDebugLines"/> option.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.Search(System.String[],StardewValley.Logging.IGameLogger)">
            <summary>List debug commands in the game.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ArtifactSpots(System.String[],StardewValley.Logging.IGameLogger)">
            <summary>Add artifact spots in every available spot in a 9x9 grid around the player.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.LogFile(System.String[],StardewValley.Logging.IGameLogger)">
            <summary>Enable or disable writing messages to the debug log file.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.DebugCommands.DefaultHandlers.ToggleCheats(System.String[],StardewValley.Logging.IGameLogger)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="T:StardewValley.DelayedAction">
            <summary>An action that will be performed after a delay.</summary>
        </member>
        <member name="F:StardewValley.DelayedAction.timeUntilAction">
            <summary>The number of milliseconds until the action is invoked.</summary>
        </member>
        <member name="F:StardewValley.DelayedAction.intData">
            <summary>An arbitrary int value saved for the action, if applicable.</summary>
        </member>
        <member name="F:StardewValley.DelayedAction.floatData">
            <summary>An arbitrary float value saved for the action, if applicable.</summary>
        </member>
        <member name="F:StardewValley.DelayedAction.stringData">
            <summary>An arbitrary string value saved for the action, if applicable.</summary>
        </member>
        <member name="F:StardewValley.DelayedAction.pointData">
            <summary>An arbitrary point value saved for the action, if applicable.</summary>
        </member>
        <member name="F:StardewValley.DelayedAction.character">
            <summary>An arbitrary NPC value saved for the action, if applicable.</summary>
        </member>
        <member name="F:StardewValley.DelayedAction.location">
            <summary>An arbitrary location value saved for the action, if applicable.</summary>
        </member>
        <member name="F:StardewValley.DelayedAction.behavior">
            <summary>The action to invoke.</summary>
        </member>
        <member name="F:StardewValley.DelayedAction.afterFadeBehavior">
            <summary>The action to invoke after the screen is fully faded to black, if applicable.</summary>
        </member>
        <member name="F:StardewValley.DelayedAction.waitUntilMenusGone">
            <summary>Whether to only decrement the delay timer when there's no open menu.</summary>
        </member>
        <member name="F:StardewValley.DelayedAction.temporarySpriteData">
            <summary>An arbitrary temporary animated sprite saved for the action, if applicable.</summary>
        </member>
        <member name="M:StardewValley.DelayedAction.#ctor(System.Int32)">
            <summary>Construct an instance.</summary>
            <param name="delay">The number of milliseconds until the action is invoked.</param>
        </member>
        <member name="M:StardewValley.DelayedAction.#ctor(System.Int32,System.Action)">
            <summary>Construct an instance.</summary>
            <param name="delay">The number of milliseconds until the action is invoked.</param>
            <param name="behavior">The action to invoke.</param>
        </member>
        <member name="M:StardewValley.DelayedAction.update(Microsoft.Xna.Framework.GameTime)">
            <summary>Decrement the timer and invoke the action, if applicable in the current context.</summary>
            <param name="time">The current game time.</param>
        </member>
        <member name="M:StardewValley.DelayedAction.warpAfterDelay(System.String,Microsoft.Xna.Framework.Point,System.Int32)">
            <summary>Warp the local player to another location after a delay.</summary>
            <param name="targetLocation">The internal name of the target location.</param>
            <param name="targetTile">The target tile position.</param>
            <param name="delay">The number of milliseconds until the action is invoked.</param>
        </member>
        <member name="M:StardewValley.DelayedAction.addTemporarySpriteAfterDelay(StardewValley.TemporaryAnimatedSprite,StardewValley.GameLocation,System.Int32,System.Boolean)">
            <summary>Add a temporary animated sprite to the current location after a delay.</summary>
            <param name="sprite">The temporary sprite to add.</param>
            <param name="location">The location to which to add the sprite.</param>
            <param name="delay">The number of milliseconds until the action is invoked.</param>
            <param name="waitUntilMenusGone">Whether to only decrement the delay timer when there's no open menu.</param>
        </member>
        <member name="M:StardewValley.DelayedAction.playSoundAfterDelay(System.String,System.Int32,StardewValley.GameLocation,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Int32,System.Boolean)">
            <summary>Play a sound after a delay, either for all player in the location (if <paramref name="location"/> is specified) else for the current player.</summary>
            <param name="soundName">The cue ID for the sound to play.</param>
            <param name="delay">The number of milliseconds until the action is invoked.</param>
            <param name="location">The location in which to play the sound. If specified, it's played for all players in the location; otherwise it's only played for the current player.</param>
            <param name="position">The tile position from which to play the sound, or <c>null</c> if it should be played throughout the location.</param>
            <param name="pitch">The pitch modifier to apply, or <c>null</c> for the default pitch.</param>
            <param name="local">Whether the sound should only be played for the local player. Ignored if <paramref name="location" /> is null.</param>
        </member>
        <member name="M:StardewValley.DelayedAction.removeTemporarySpriteAfterDelay(StardewValley.GameLocation,System.Int32,System.Int32)">
            <summary>Remove a temporary animated sprite from the current location after a delay.</summary>
            <param name="location">The location from which to remove the sprite.</param>
            <param name="idOfTempSprite">The ID of the temporary sprite to remove.</param>
            <param name="delay">The number of milliseconds until the action is invoked.</param>
        </member>
        <member name="M:StardewValley.DelayedAction.playMusicAfterDelay(System.String,System.Int32,System.Boolean)">
            <summary>Start a music track after a delay.</summary>
            <param name="musicName">The cue ID for the music to play.</param>
            <param name="delay">The number of milliseconds until the action is invoked.</param>
            <param name="interruptable">Whether the music can be overridden by a jukebox.</param>
        </member>
        <member name="M:StardewValley.DelayedAction.textAboveHeadAfterDelay(System.String,StardewValley.NPC,System.Int32)">
            <summary>Show text in a speech bubble over an NPC's head after a delay.</summary>
            <param name="text">The literal text to display.</param>
            <param name="who">The NPC over which to show the text.</param>
            <param name="delay">The number of milliseconds until the action is invoked.</param>
        </member>
        <member name="M:StardewValley.DelayedAction.stopFarmerGlowing(System.Int32)">
            <summary>Disable a glowing effect applied to the current player after a delay.</summary>
            <param name="delay">The number of milliseconds until the action is invoked.</param>
        </member>
        <member name="M:StardewValley.DelayedAction.showDialogueAfterDelay(System.String,System.Int32)">
            <summary>Show a generic dialogue message without an NPC speaker after a delay.</summary>
            <param name="dialogue">The dialogue text to show.</param>
            <param name="delay">The number of milliseconds until the action is invoked.</param>
        </member>
        <member name="M:StardewValley.DelayedAction.screenFlashAfterDelay(System.Single,System.Int32,System.String)">
            <summary>Show a screen flash after a delay.</summary>
            <param name="intensity">The intensity of the flash, as a value between 0 (transparent) and 1 (fully opaque).</param>
            <param name="delay">The number of milliseconds until the action is invoked.</param>
            <param name="sound">The cue ID for the sound to play.</param>
        </member>
        <member name="M:StardewValley.DelayedAction.removeTileAfterDelay(System.Int32,System.Int32,System.Int32,StardewValley.GameLocation,System.String)">
            <summary>Remove a tile from a location's map after a delay.</summary>
            <param name="x">The tile's X tile position.</param>
            <param name="y">The tile's Y tile position.</param>
            <param name="delay">The number of milliseconds until the action is invoked.</param>
            <param name="location">The location from whose map to remove the tile.</param>
            <param name="whichLayer">The map layer ID from which to remove the tile.</param>
        </member>
        <member name="M:StardewValley.DelayedAction.fadeAfterDelay(StardewValley.Game1.afterFadeFunction,System.Int32)">
            <summary>Fade the screen to black after a delay.</summary>
            <param name="behaviorAfterFade">The action to invoke after the screen is fully faded to black.</param>
            <param name="delay">The number of milliseconds until the action is invoked.</param>
        </member>
        <member name="M:StardewValley.DelayedAction.functionAfterDelay(System.Action,System.Int32)">
            <summary>Invoke a callback after a delay.</summary>
            <param name="func">The action to invoke.</param>
            <param name="delay">The number of milliseconds until the action is invoked.</param>
        </member>
        <member name="M:StardewValley.DelayedAction.ApplyFade">
            <summary>Apply the delayed screen fade to black.</summary>
        </member>
        <member name="M:StardewValley.DelayedAction.ApplyTextAboveHead">
            <summary>Apply the delayed text over an NPC's head.</summary>
        </member>
        <member name="M:StardewValley.DelayedAction.ApplyTempSprite">
            <summary>Apply the delayed temporary animated sprite addition.</summary>
        </member>
        <member name="M:StardewValley.DelayedAction.ApplyStopGlowing">
            <summary>Apply the delayed player glow disable.</summary>
        </member>
        <member name="M:StardewValley.DelayedAction.ApplyDialogue">
            <summary>Apply the delayed dialogue without NPC.</summary>
        </member>
        <member name="M:StardewValley.DelayedAction.ApplyWarp">
            <summary>Apply the delayed warp action.</summary>
        </member>
        <member name="M:StardewValley.DelayedAction.ApplyRemoveMapTile">
            <summary>Apply the delayed map tile removal.</summary>
        </member>
        <member name="M:StardewValley.DelayedAction.ApplyRemoveTemporarySprite">
            <summary>Apply the delayed temporary animated sprite removal.</summary>
        </member>
        <member name="M:StardewValley.DelayedAction.ApplySoundHelper(System.Boolean)">
            <summary>Helper to apply the delayed sound action.</summary>
        </member>
        <member name="M:StardewValley.DelayedAction.ApplySound">
            <summary>Apply the delayed sound action.</summary>
        </member>
        <member name="M:StardewValley.DelayedAction.ApplySoundLocal">
            <summary>Apply the delayed sound action for the local player.</summary>
        </member>
        <member name="M:StardewValley.DelayedAction.ApplyMusicTrack">
            <summary>Apply the delayed music action.</summary>
        </member>
        <member name="M:StardewValley.DelayedAction.ApplyScreenFlash">
            <summary>Apply the delayed screen flash.</summary>
        </member>
        <member name="T:StardewValley.Delegates.DebugCommandHandlerDelegate">
            <summary>Handles a debug command.</summary>
            <param name="command">The full debug command split by spaces, including the command name.</param>
            <param name="log">The log to which to write debug command output.</param>
        </member>
        <member name="T:StardewValley.Delegates.EventCommandDelegate">
            <summary>The delegate for an event command registered via <see cref="M:StardewValley.Event.RegisterCommand(System.String,StardewValley.Delegates.EventCommandDelegate)"/>.</summary>
            <param name="event">The event running the command.</param>
            <param name="args">The space-delimited event command string, including the command name.</param>
            <param name="context">The context for the active event.</param>
        </member>
        <member name="T:StardewValley.Delegates.EventPreconditionDelegate">
            <summary>The delegate for an event precondition registered via <see cref="M:StardewValley.Event.RegisterPrecondition(System.String,StardewValley.Delegates.EventPreconditionDelegate)"/>.</summary>
            <param name="location">The location which is checking the event.</param>
            <param name="eventId">The unique ID for the event being checked.</param>
            <param name="args">The space-delimited event precondition string, including the precondition name.</param>
        </member>
        <member name="T:StardewValley.Delegates.FestivalCleanupDelegate">
            <summary>The method signature for a custom <see cref="F:StardewValley.GameData.PassiveFestivalData.CleanupMethod"/> method.</summary>
        </member>
        <member name="T:StardewValley.Delegates.FestivalDailySetupDelegate">
            <summary>The method signature for a custom <see cref="F:StardewValley.GameData.PassiveFestivalData.DailySetupMethod"/> method.</summary>
        </member>
        <member name="T:StardewValley.Delegates.ForEachItemDelegate">
            <summary>A callback invoked when iterating all items in the game.</summary>
            <param name="item">The current item being iterated.</param>
            <param name="remove">Delete this item instance.</param>
            <param name="replaceWith">Replace this item with a new instance.</param>
            <returns>Returns whether to continue iterating items in the game.</returns>
        </member>
        <member name="T:StardewValley.Delegates.GameStateQueryContext">
            <summary>The contextual values for a <see cref="T:StardewValley.Delegates.GameStateQueryDelegate"/>.</summary>
        </member>
        <member name="F:StardewValley.Delegates.GameStateQueryContext.Location">
            <summary>The location for which to check the query.</summary>
        </member>
        <member name="F:StardewValley.Delegates.GameStateQueryContext.Player">
            <summary>The player for which to check the query.</summary>
        </member>
        <member name="F:StardewValley.Delegates.GameStateQueryContext.TargetItem">
            <summary>The target item (e.g. machine output or tree fruit) for which to check the query, or <c>null</c> if not applicable.</summary>
        </member>
        <member name="F:StardewValley.Delegates.GameStateQueryContext.InputItem">
            <summary>The input item (e.g. machine input) for which to check the query, or <c>null</c> if not applicable.</summary>
        </member>
        <member name="F:StardewValley.Delegates.GameStateQueryContext.Random">
            <summary>The RNG to use for randomization.</summary>
        </member>
        <member name="F:StardewValley.Delegates.GameStateQueryContext.IgnoreQueryKeys">
            <summary>The query keys to ignore when checking conditions (like <c>LOCATION_SEASON</c>), or <c>null</c> to check all of them.</summary>
        </member>
        <member name="F:StardewValley.Delegates.GameStateQueryContext.CustomFields">
            <summary>The custom fields which can be set by mods for custom game state query behavior, or <c>null</c> if none were set.</summary>
        </member>
        <member name="M:StardewValley.Delegates.GameStateQueryContext.#ctor(StardewValley.GameLocation,StardewValley.Farmer,StardewValley.Item,StardewValley.Item,System.Random,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Construct an instance.</summary>
            <param name="location">The location for which to check the query.</param>
            <param name="player">The player for which to check the query.</param>
            <param name="targetItem">The target item (e.g. machine output or tree fruit) for which to check the query, or <c>null</c> if not applicable.</param>
            <param name="inputItem">The input item (e.g. machine input) for which to check the query, or <c>null</c> if not applicable.</param>
            <param name="random">The RNG to use for randomization.</param>
            <param name="ignoreQueryKeys">The query keys to ignore when checking conditions (like <c>LOCATION_SEASON</c>), or <c>null</c> to check all of them.</param>
            <param name="customFields">The custom fields which can be set by mods for custom game state query behavior.</param>
        </member>
        <member name="T:StardewValley.Delegates.GameStateQueryDelegate">
            <summary>A <see cref="T:StardewValley.GameStateQuery"/> query resolver.</summary>
            <param name="query">The game state query split by space, including the query key.</param>
            <param name="context">The game state query context.</param>
            <returns>Returns whether the query matches.</returns>
        </member>
        <member name="T:StardewValley.Delegates.MachineInteractDelegate">
            <summary>The method signature for a custom <see cref="F:StardewValley.GameData.Machines.MachineData.InteractMethod"/> method.</summary>
            <param name="machine">The machine instance for which to produce output.</param>
            <param name="location">The location containing the machine.</param>
            <param name="player">The player using the machine.</param>
            <returns>Returns whether the interaction was handled.</returns>
        </member>
        <member name="T:StardewValley.Delegates.MachineOutputDelegate">
            <summary>The method signature for a custom <see cref="P:StardewValley.GameData.Machines.MachineItemOutput.OutputMethod"/> method.</summary>
            <param name="machine">The machine instance for which to produce output.</param>
            <param name="inputItem">The item being dropped into the machine, if applicable.</param>
            <param name="probe">Whether the machine is only checking whether the input is valid. If so, the input/machine shouldn't be changed and no animations/sounds should play.</param>
            <param name="outputData">The item output data from <c>Data/Machines</c> for which output is being created, if applicable.</param>
            <param name="overrideMinutesUntilReady">The in-game minutes until the item will be ready to collect, if set. This overrides the equivalent fields in the machine data if set.</param>
            <returns>Returns the item to produce, or <c>null</c> if none should be produced.</returns>
        </member>
        <member name="T:StardewValley.Delegates.ResolveItemQueryDelegate">
            <summary>Creates the items for an item query key like <c>RANDOM_ITEMS</c>.</summary>
            <param name="key">The query key like <c>RANDOM_ITEMS</c> specified in the item ID.</param>
            <param name="arguments">Any text specified in the item ID after the <paramref name="key"/>.</param>
            <param name="avoidRepeat">Whether duplicate items will be stripped from the list. This is only a hint for cases where the resolver may want to return unique items (e.g. if a specific count is expected); any duplicates will be removed automatically at a higher level.</param>
            <param name="avoidItemIds">The qualified item IDs which shouldn't be returned, or <c>null</c> for none.</param>
            <param name="context">The contextual info for item queries.</param>
            <param name="logError">Log an error message to the console, given the item query and error message.</param>
            <returns>Returns the resolved items, if any.</returns>
        </member>
        <member name="T:StardewValley.Delegates.TriggerActionContext">
            <summary>The contextual values for a <see cref="T:StardewValley.Delegates.TriggerActionDelegate"/>.</summary>
        </member>
        <member name="F:StardewValley.Delegates.TriggerActionContext.Trigger">
            <summary>The trigger for which the action is being invoked, or <c>"Manual"</c> if it's not being invoked via <c>Data/TriggerActions</c>.</summary>
        </member>
        <member name="F:StardewValley.Delegates.TriggerActionContext.TriggerArgs">
            <summary>The contextual arguments provided with the trigger, or an empty array if none were provided. For example, an 'item received' trigger might provide the item instance and index.</summary>
        </member>
        <member name="F:StardewValley.Delegates.TriggerActionContext.Data">
            <summary>The entry data in <c>Data/TriggerActions</c> for the action being applied, or <c>null</c> if the action is being applied some other way (e.g. <c>$action</c> in dialogue).</summary>
        </member>
        <member name="F:StardewValley.Delegates.TriggerActionContext.CustomFields">
            <summary>The custom fields which can be set by mods for custom trigger action behavior, or <c>null</c> if none were set.</summary>
        </member>
        <member name="M:StardewValley.Delegates.TriggerActionContext.#ctor(System.String,System.Object[],StardewValley.GameData.TriggerActionData,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Construct an instance.</summary>
            <param name="trigger">The trigger for which the action is being invoked, or <c>"Manual"</c> if it's not being invoked via <c>Data/TriggerActions</c>.</param>
            <param name="triggerArgs">The contextual arguments provided with the trigger, or an empty array if none were provided. For example, an 'item received' trigger might provide the item instance and index.</param>
            <param name="data">The entry data in <c>Data/TriggerActions</c> for the action being applied, or <c>null</c> if the action is being applied some other way (e.g. <c>$action</c> in dialogue).</param>
            <param name="customFields">The custom fields which can be set by mods for custom trigger action behavior.</param>
        </member>
        <member name="T:StardewValley.Delegates.TriggerActionDelegate">
            <summary>A delegate which handles an action which can be triggered via <c>Data/TriggerActions</c>, registered via <see cref="M:StardewValley.Triggers.TriggerActionManager.RegisterAction(System.String,StardewValley.Delegates.TriggerActionDelegate)"/>.</summary>
            <param name="args">The space-delimited action string, including the action name.</param>
            <param name="context">The trigger action context.</param>
            <param name="error">An error phrase indicating why applying the action failed (like 'required argument X missing'), if applicable. This should always be set to <c>null</c> when returning true, and a non-empty message when returning false.</param>
            <returns>Returns whether the action was handled successfully (regardless of whether it did anything).</returns>
        </member>
        <member name="F:StardewValley.Dialogue.dialogueCommandPrefix">
            <summary>The character which begins a command name.</summary>
        </member>
        <member name="F:StardewValley.Dialogue.dialogueBreak">
            <summary>A dialogue code which splits the subsequent text into a separate dialogue box shown after the player clicks.</summary>
        </member>
        <member name="F:StardewValley.Dialogue.dialogueBreakDelimited">
            <summary>Equivalent to <see cref="F:StardewValley.Dialogue.dialogueBreak"/>, but wrapped with command delimiters so it can be added directly to dialogue text.</summary>
        </member>
        <member name="F:StardewValley.Dialogue.dialogueGameStateQuery">
            <summary>A command which toggles between two dialogues depending on the result of a game state query.</summary>
        </member>
        <member name="F:StardewValley.Dialogue.dialogueGenderSwitch_startBlock">
            <summary>A command which switches between gendered text based on the player gender.</summary>
        </member>
        <member name="F:StardewValley.Dialogue.dialogueGenderSwitch_endBlock">
            <summary>The end token for a <see cref="F:StardewValley.Dialogue.dialogueGenderSwitch_startBlock"/> command.</summary>
        </member>
        <member name="F:StardewValley.Dialogue.dialogueRunAction">
            <summary>A command which runs an action.</summary>
        </member>
        <member name="F:StardewValley.Dialogue.dialogueStartConversationTopic">
            <summary>A command which begins a conversation topic.</summary>
        </member>
        <member name="F:StardewValley.Dialogue.dialogueQuestion">
            <summary>A command which begins a question.</summary>
        </member>
        <member name="F:StardewValley.Dialogue.dialogueResponse">
            <summary>A command which starts an inquiry initiated by the player or an answer to an NPC's question.</summary>
        </member>
        <member name="F:StardewValley.Dialogue.breakSpecialCharacter">
            <summary>A special character added to dialogues to signify that they are part of a broken up series of dialogues.</summary>
        </member>
        <member name="F:StardewValley.Dialogue.noPortraitPrefix">
            <summary>A prefix added to a dialogue line to indicate it should be drawn as a small dialogue box with no portrait.</summary>
            <remarks>This is only applied if it's not part of another token like <c>%year</c>.</remarks>
        </member>
        <member name="F:StardewValley.Dialogue.percentTokens">
            <summary>The tokens like <see cref="F:StardewValley.Dialogue.spouseSpecialCharacter"/> which begin with a <c>%</c> symbol.</summary>
        </member>
        <member name="F:StardewValley.Dialogue.dialogues">
            <summary>The dialogues to show in their own message boxes, and/or actions to perform when selected.</summary>
        </member>
        <member name="F:StardewValley.Dialogue.indexesWithoutPortrait">
            <summary>The <see cref="F:StardewValley.Dialogue.currentDialogueIndex"/> values for which to disable the portrait due to <see cref="F:StardewValley.Dialogue.noPortraitPrefix"/>.</summary>
        </member>
        <member name="F:StardewValley.Dialogue.playerResponses">
            <summary>The responses which the player can choose from, if any.</summary>
        </member>
        <member name="F:StardewValley.Dialogue.currentEmotion">
            <summary>The backing field for <see cref="P:StardewValley.Dialogue.CurrentEmotion"/>.</summary>
            <remarks>Most code shouldn't use this directly.</remarks>
        </member>
        <member name="F:StardewValley.Dialogue.TranslationKey">
            <summary>The translation key from which the <see cref="F:StardewValley.Dialogue.dialogues"/> were taken, if known, in the form <c>assetName:fieldKey</c> like <c>Strings/UI:Confirm</c>. This is informational only, and has no effect on the dialogue text. The displayed text may not match the translation text exactly (e.g. due to token substitutions or dialogue parsing).</summary>
        </member>
        <member name="P:StardewValley.Dialogue.CurrentEmotion">
            <summary>The portrait command for the current dialogue, usually matching a constant like <see cref="F:StardewValley.Dialogue.dialogueHappy"/> or a numeric index like <c>$1</c>.</summary>
        </member>
        <member name="P:StardewValley.Dialogue.CurrentEmotionSetExplicitly">
            <summary>Whether the <see cref="P:StardewValley.Dialogue.CurrentEmotion"/> was set explicitly (e.g. via a dialogue command like <see cref="F:StardewValley.Dialogue.dialogueNeutral"/>), instead of being the default value.</summary>
        </member>
        <member name="M:StardewValley.Dialogue.#ctor(StardewValley.NPC,System.String,System.String)">
            <summary>Construct an instance.</summary>
            <param name="speaker">The NPC saying the line.</param>
            <param name="translationKey">The translation from which the <paramref name="dialogueText"/> was taken, if known, in the form <c>assetName:fieldKey</c> like <c>Strings/UI:Confirm</c>. This is informational only, and has no effect on the dialogue text.</param>
            <param name="dialogueText">The literal dialogue text to display.</param>
            <remarks>This constructor allows setting literal text. To use a translation as-is, see the other constructor.</remarks>
        </member>
        <member name="M:StardewValley.Dialogue.#ctor(StardewValley.NPC,System.String,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="speaker">The NPC saying the line.</param>
            <param name="translationKey">The translation from which to take the dialogue text, in the form <c>assetName:fieldKey</c> like <c>Strings/UI:Confirm</c>.</param>
            <param name="isGendered">Whether the <paramref name="translationKey"/> matches a gendered translation.</param>
            <remarks>This matches the most common convention, i.e. a translation with no format placeholders. For more advanced cases, see <c>FromTranslation</c> or the constructor which takes a <c>dialogueText</c> parameter.</remarks>
        </member>
        <member name="M:StardewValley.Dialogue.#ctor(StardewValley.Dialogue)">
            <summary>Construct an instance.</summary>
            <param name="other">The data to copy.</param>
        </member>
        <member name="M:StardewValley.Dialogue.TryGetDialogue(StardewValley.NPC,System.String)">
            <summary>Get a dialogue instance if the given translation key exists.</summary>
            <param name="speaker">The NPC saying the line.</param>
            <param name="translationKey">The translation from which to take the dialogue text, in the form <c>assetName:fieldKey</c> like <c>Strings/UI:Confirm</c>.</param>
        </member>
        <member name="M:StardewValley.Dialogue.FromTranslation(StardewValley.NPC,System.String)">
            <summary>Get a dialogue instance for a translation key.</summary>
            <param name="speaker">The NPC saying the line.</param>
            <param name="translationKey">The translation from which to take the dialogue text, in the form <c>assetName:fieldKey</c> like <c>Strings/UI:Confirm</c>.</param>
        </member>
        <member name="M:StardewValley.Dialogue.FromTranslation(StardewValley.NPC,System.String,System.Object)">
            <summary>Get a dialogue instance for a translation key.</summary>
            <param name="speaker">The NPC saying the line.</param>
            <param name="translationKey">The translation from which to take the dialogue text, in the form <c>assetName:fieldKey</c> like <c>Strings/UI:Confirm</c>.</param>
            <param name="sub1">The value with which to replace the <c>{0}</c> placeholder in the loaded text.</param>
        </member>
        <member name="M:StardewValley.Dialogue.FromTranslation(StardewValley.NPC,System.String,System.Object,System.Object)">
            <summary>Get a dialogue instance for a translation key.</summary>
            <param name="speaker">The NPC saying the line.</param>
            <param name="translationKey">The translation from which to take the dialogue text, in the form <c>assetName:fieldKey</c> like <c>Strings/UI:Confirm</c>.</param>
            <param name="sub1">The value with which to replace the <c>{0}</c> placeholder in the loaded text.</param>
            <param name="sub2">The value with which to replace the <c>{1}</c> placeholder in the loaded text.</param>
        </member>
        <member name="M:StardewValley.Dialogue.FromTranslation(StardewValley.NPC,System.String,System.Object,System.Object,System.Object)">
            <summary>Get a dialogue instance for a translation key.</summary>
            <param name="speaker">The NPC saying the line.</param>
            <param name="translationKey">The translation from which to take the dialogue text, in the form <c>assetName:fieldKey</c> like <c>Strings/UI:Confirm</c>.</param>
            <param name="sub1">The value with which to replace the <c>{0}</c> placeholder in the loaded text.</param>
            <param name="sub2">The value with which to replace the <c>{1}</c> placeholder in the loaded text.</param>
            <param name="sub3">The value with which to replace the <c>{2}</c> placeholder in the loaded text.</param>
        </member>
        <member name="M:StardewValley.Dialogue.FromTranslation(StardewValley.NPC,System.String,System.Object[])">
            <summary>Get a dialogue instance for a translation key.</summary>
            <param name="speaker">The NPC saying the line.</param>
            <param name="translationKey">The translation from which to take the dialogue text, in the form <c>assetName:fieldKey</c> like <c>Strings/UI:Confirm</c>.</param>
            <param name="substitutions">The values with which to replace placeholders like <c>{0}</c> in the loaded text.</param>
        </member>
        <member name="M:StardewValley.Dialogue.parseDialogueString(System.String,System.String)">
            <summary>Parse raw dialogue text.</summary>
            <param name="masterString">The raw dialogue text to parse.</param>
            <param name="translationKey">The translation key from which the dialogue was loaded, if known.</param>
        </member>
        <member name="M:StardewValley.Dialogue.prepareCurrentDialogueForDisplay">
            <summary>Parse dialogue commands and tokens in the current dialogue (i.e. the <see cref="F:StardewValley.Dialogue.currentDialogueIndex"/> entry in <see cref="F:StardewValley.Dialogue.dialogues"/>).</summary>
        </member>
        <member name="M:StardewValley.Dialogue.isOnFinalDialogue">
            <summary>Whether we're currently displaying the last entry in <see cref="F:StardewValley.Dialogue.dialogues"/> which has text to display.</summary>
        </member>
        <member name="M:StardewValley.Dialogue.applyGenderSwitch(System.String,System.Boolean)">
            <summary>Get the gender-appropriate dialogue from a dialogue string which may contain a gender-switch token.</summary>
            <param name="str">The dialogue string to parse.</param>
            <param name="altTokenOnly">Only apply the <see cref="F:StardewValley.Dialogue.genderDialogueSplitCharacter2"/> token, and ignore <see cref="F:StardewValley.Dialogue.genderDialogueSplitCharacter"/>.</param>
        </member>
        <member name="M:StardewValley.Dialogue.applyGenderSwitch(StardewValley.Gender,System.String,System.Boolean)">
            <summary>Get the gender-appropriate dialogue from a dialogue string which may contain gender-switch tokens.</summary>
            <param name="gender">The gender for which to apply tokens.</param>
            <param name="str">The dialogue string to parse.</param>
            <param name="altTokenOnly">Only apply the <see cref="F:StardewValley.Dialogue.genderDialogueSplitCharacter2"/> token, and ignore <see cref="F:StardewValley.Dialogue.genderDialogueSplitCharacter"/>.</param>
        </member>
        <member name="M:StardewValley.Dialogue.applyGenderSwitchBlocks(StardewValley.Gender,System.String)">
            <summary>Replace gender-switch blocks like <c>${male^female}$</c> or <c>${male¦female}$</c> in the input string with the gender-appropriate text.</summary>
            <param name="gender">The gender for which to apply tokens.</param>
            <param name="str">The dialogue string to parse.</param>
            <remarks>This should only be called directly in cases where <see cref="M:StardewValley.Dialogue.applyGenderSwitch(StardewValley.Gender,System.String,System.Boolean)"/> isn't applied, since that includes gender-switch blocks.</remarks>
        </member>
        <member name="M:StardewValley.Dialogue.applyAndSkipPlainSideEffects">
            <summary>If the next dialogue(s) in <see cref="F:StardewValley.Dialogue.dialogues"/> have side-effects without text, apply them and set <see cref="F:StardewValley.Dialogue.currentDialogueIndex"/> to the next dialogue which has text.</summary>
        </member>
        <member name="M:StardewValley.Dialogue.convertToDwarvish">
            <summary>Convert the current dialogue text into Dwarvish, as spoken by Dwarf when the player doesn't have the Dwarvish Translation Guide.</summary>
        </member>
        <member name="M:StardewValley.Dialogue.convertToDwarvish(System.String)">
            <summary>Convert dialogue text into Dwarvish, as spoken by Dwarf when the player doesn't have the Dwarvish Translation Guide.</summary>
            <param name="str">The text to translate.</param>
        </member>
        <member name="T:StardewValley.DialogueLine">
            <summary>As part of <see cref="T:StardewValley.Dialogue"/>, a bit of dialogue shown in its own message box or an action to run when it's selected.</summary>
        </member>
        <member name="F:StardewValley.DialogueLine.Text">
            <summary>The text to display, or <see cref="F:System.String.Empty"/> to skip displaying text.</summary>
        </member>
        <member name="F:StardewValley.DialogueLine.SideEffects">
            <summary>The action to perform when the dialogue is displayed.</summary>
        </member>
        <member name="P:StardewValley.DialogueLine.HasText">
            <summary>Whether this entry has dialogue text to display.</summary>
        </member>
        <member name="M:StardewValley.DialogueLine.#ctor(System.String,System.Action)">
            <summary>Construct an instance.</summary>
            <param name="text">The text to display, or <see cref="F:System.String.Empty"/> to skip displaying text.</param>
            <param name="sideEffects">The action to perform when the dialogue is displayed.</param>
        </member>
        <member name="F:StardewValley.Event.Commands">
            <summary>The event commands indexed by name.</summary>
            <remarks>Command names are case-insensitive.</remarks>
        </member>
        <member name="F:StardewValley.Event.CommandAliases">
            <summary>Alternate names for event commands.</summary>
        </member>
        <member name="F:StardewValley.Event.Preconditions">
            <summary>The event preconditions indexed by name.</summary>
            <remarks>Precondition names are case-<strong>sensitive</strong>.</remarks>
        </member>
        <member name="F:StardewValley.Event.PreconditionAliases">
            <summary>Alternate names for event preconditions (e.g. shorthand or acronyms).</summary>
            <remarks>Aliases are case-sensitive for compatibility with older preconditions like 'h' vs 'H'.</remarks>
        </member>
        <member name="M:StardewValley.Event.RegisterCommand(System.String,StardewValley.Delegates.EventCommandDelegate)">
            <summary>Register an event command.</summary>
            <param name="name">The command name that can be used in event scripts. This is case-insensitive.</param>
            <param name="action">The handler to call when the command is used.</param>
        </member>
        <member name="M:StardewValley.Event.RegisterCommandAlias(System.String,System.String)">
            <summary>Register an alternate name for an event command.</summary>
            <param name="alias">The alternate name. This is case-insensitive.</param>
            <param name="commandName">The original command name to alias. This is case-insensitive.</param>
        </member>
        <member name="M:StardewValley.Event.RegisterPrecondition(System.String,StardewValley.Delegates.EventPreconditionDelegate)">
            <summary>Register an event precondition.</summary>
            <param name="name">The precondition key that can be used in event precondition strings. This is case-insensitive.</param>
            <param name="action">The handler to call when the precondition is used.</param>
        </member>
        <member name="M:StardewValley.Event.RegisterPreconditionAlias(System.String,System.String)">
            <summary>Register an alternate name for an event precondition.</summary>
            <param name="alias">The alternate name. This is <strong>case-sensitive</strong> for legacy reasons.</param>
            <param name="preconditionName">The original precondition name to alias. This is case-insensitive.</param>
        </member>
        <member name="M:StardewValley.Event.SetupEventCommandsIfNeeded">
            <summary>Register the vanilla event commands and preconditions if they haven't already been registered.</summary>
        </member>
        <member name="M:StardewValley.Event.TryGetPreconditionHandler(System.String,StardewValley.Delegates.EventPreconditionDelegate@)">
            <summary>Get the handler for a precondition key, if any.</summary>
            <param name="key">The precondition key, which can be either the case-insensitive canonical name (like <c>DaysPlayed</c>) or case-sensitive alias (like <c>j</c>).</param>
            <param name="handler">The precondition handler, if found.</param>
            <returns>Returns whether a handler was found for the precondition key.</returns>
        </member>
        <member name="M:StardewValley.Event.CheckPrecondition(StardewValley.GameLocation,System.String,System.String)">
            <summary>Get whether an event precondition matches the current context.</summary>
            <param name="location">The location which is checking the event.</param>
            <param name="eventId">The unique ID for the event being checked.</param>
            <param name="precondition">The event precondition string, including the precondition name.</param>
        </member>
        <member name="M:StardewValley.Event.tryEventCommand(StardewValley.GameLocation,Microsoft.Xna.Framework.GameTime,System.String[])">
            <summary>Try to run an event command for the current event.</summary>
            <param name="location">The location in which the event is running.</param>
            <param name="time">The current game execution time.</param>
            <param name="args">The space-delimited event command string, including the command name.</param>
        </member>
        <member name="T:StardewValley.Event.DefaultCommands">
            <summary>The low-level event commands defined by the base game. Most code should use <see cref="T:StardewValley.Event"/> methods instead.</summary>
            <remarks>Every method within this class is an event command whose name matches the method name. All event commands must be static, public, and match <see cref="T:StardewValley.Delegates.EventCommandDelegate"/>.</remarks>
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.IgnoreEventTileOffset(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Move(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Action(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <summary>Run an action string.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Speak(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.BeginSimultaneousCommand(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <summary>Try to execute all commands in one tick until <see cref="M:StardewValley.Event.DefaultCommands.EndSimultaneousCommand(StardewValley.Event,System.String[],StardewValley.EventContext)"/> is called.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.EndSimultaneousCommand(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <summary>If commands are being executed in one tick due to <see cref="M:StardewValley.Event.DefaultCommands.BeginSimultaneousCommand(StardewValley.Event,System.String[],StardewValley.EventContext)"/>, stop doing so for the remaining commands.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.MineDeath(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.HospitalDeath(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.ShowItemsLost(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.End(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.LocationSpecificCommand(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Unskippable(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Skippable(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.SetSkipActions(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Emote(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.StopMusic(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.PlayPetSound(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.PlaySound(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.StopSound(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.TossConcession(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Pause(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.PrecisePause(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.ResetVariable(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.FaceDirection(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Warp(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.WarpFarmers(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <summary>Change the event position for all connected farmers.</summary>
            <remarks>This expects at least four fields:
              1. zero or more [x y direction] triplets (one per possible farmer);
              2. an offset direction (up/down/left/right), which sets where each subsequent farmer is set when using the default triplet;
              3. and a default [x y direction] triplet which applies to any unlisted farmer.</remarks>
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Speed(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.StopAdvancedMoves(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.DoAction(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.RemoveTile(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.TextAboveHead(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.ShowFrame(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.FarmerAnimation(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.IgnoreMovementAnimation(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Animate(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.StopAnimation(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.ChangeLocation(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Halt(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Message(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AddCookingRecipe(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.ItemAboveHead(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AddCraftingRecipe(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.HostMail(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Mail(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <summary>Add a letter to the mailbox tomorrow.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.MailToday(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <summary>Add a letter to the mailbox immediately.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Shake(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.TemporaryAnimatedSprite(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <remarks>Main format: <c>temporaryAnimatedSprite texture rect_x rect_y rect_width rect_height animation_interval animation_length number_of_loops tile_x tile_y flicker flipped layer_depth alpha_fade scale scale_change rotation rotation_change</c>. This also supports a number of extended options (like <c>color Green</c>).</remarks>
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.TemporarySprite(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <remarks>Format: <c>temporarySprite xTile yTile rowInAnimationSheet animationLength animationInterval=300 flipped=false layerDepth=-1</c>.</remarks>
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.RemoveTemporarySprites(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Null(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <summary>A command that does nothing. Used just to wait for another event to finish.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.SpecificTemporarySprite(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.PlayMusic(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.MakeInvisible(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AddObject(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AddBigProp(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AddFloorProp(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AddProp(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.RemoveObject(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Glow(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.StopGlowing(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AddQuest(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.RemoveQuest(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AddSpecialOrder(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.RemoveSpecialOrder(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AddItem(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AwardFestivalPrize(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AttachCharacterToTempSprite(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Fork(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.SwitchEvent(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.GlobalFade(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.GlobalFadeToClear(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Cutscene(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.WaitForTempSprite(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Cave(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.UpdateMinigame(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.StartJittering(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Money(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.StopJittering(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AddLantern(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.RustyKey(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Swimming(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.StopSwimming(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.TutorialMenu(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AnimalNaming(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.SplitSpeak(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.CatQuestion(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AmbientLight(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.BgColor(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.ElliottBookTalk(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.RemoveItem(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Friendship(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.SetRunning(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.ExtendSourceRect(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.WaitForOtherPlayers(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.RequestMovieEnd(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <summary>Used in the movie theater, requests that the server end the movie.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.RestoreStashedItem(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AdvancedMove(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.StopRunning(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Eyes(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AddMailReceived(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AddWorldState(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Fade(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.ChangeMapTile(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.ChangeSprite(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.WaitForAllStationary(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.ProceedPosition(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.ChangePortrait(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.ChangeYSourceRectOffset(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.ChangeName(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <summary>Set the display name for an event actor to an exact value.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.TranslateName(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <summary>Set the display name for an event actor to a translation key.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.ReplaceWithClone(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <summary>Replace an NPC in the event with a temporary copy that only exists for the duration of the event. This allows changing the NPC in the event (e.g. renaming them) without affecting the real NPC.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.PlayFramesAhead(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.ShowKissFrame(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AddTemporaryActor(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <remarks>Format: <c>addTemporaryActor name spriteWidth spriteHeight xPosition yPosition facingDirection breather=true animal=false</c>.</remarks>
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.ChangeToTemporaryMap(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.PositionOffset(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Question(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <remarks>Format: <c>question &lt;questionKey (forkN to make the nth answer fork)&gt; "question#answer1#answer2#...#answerN"</c>.</remarks>
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.QuickQuestion(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <remarks>Format: <c>quickQuestion question#answer1#answer2#...#answerN(break)answerLogic1(break)answerLogic2(break)...(break)answerLogicN</c>. Use <c>\</c> instead of <c>/</c> inside the <c>answerLogic</c> sections.</remarks>
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.DrawOffset(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.HideShadow(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AnimateHeight(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <summary>Animates properties of character "jumps". If any argument is set to "keep", it'll retain the current value.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Jump(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.FarmerEat(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.SpriteText(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.IgnoreCollisions(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.ScreenFlash(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.GrandpaCandles(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.GrandpaEvaluation2(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.GrandpaEvaluation(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.LoadActors(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.PlayerControl(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.RemoveSprite(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Viewport(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.BroadcastEvent(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.AddConversationTopic(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.Dump(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.EventSeen(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.QuestionAnswered(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.DebugCommandHandlerDelegate"/>
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.GainSkill(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="M:StardewValley.Event.DefaultCommands.MoveToSoup(StardewValley.Event,System.String[],StardewValley.EventContext)">
            <inheritdoc cref="T:StardewValley.Delegates.EventCommandDelegate" />
        </member>
        <member name="F:StardewValley.Event.id">
            <summary>
              The unique identifier for the event, if available. This may be...
              <list type="bullet">
                <item><description>for a regular event, the unique event ID from its data file (i.e. the first number in its entry key);</description></item>
                <item><description>for a generated event, an <see cref="T:StardewValley.Constants.EventIds"/> constant;</description></item>
                <item><description>for a festival, <c>festival_{asset name}</c> (like <c>festival_fall16</c>);</description></item>
                <item><description>else <see cref="F:StardewValley.Constants.EventIds.Unknown"/>.</description></item>
              </list>
            </summary>
        </member>
        <member name="F:StardewValley.Event.fromAssetName">
            <summary>The data asset name from which the event script was taken, or <c>null</c> for a generated event.</summary>
        </member>
        <member name="F:StardewValley.Event.skippable">
            <summary>Whether the player can skip the rest of the event.</summary>
        </member>
        <member name="F:StardewValley.Event.actionsOnSkip">
            <summary>The actions to perform when the event is skipped, if any.</summary>
        </member>
        <member name="F:StardewValley.Event.CustomSounds">
            <summary>The custom sounds started during the event via <see cref="M:StardewValley.Event.DefaultCommands.PlaySound(StardewValley.Event,System.String[],StardewValley.EventContext)"/>.</summary>
        </member>
        <member name="F:StardewValley.Event.ignoreTileOffsets">
            <summary>Used to offset positions specified in events.</summary>
        </member>
        <member name="F:StardewValley.Event.markEventSeen">
            <summary>Whether to add this event's ID to <see cref="F:StardewValley.Farmer.eventsSeen"/> when it ends, if it has a valid ID.</summary>
            <remarks>This has no effect on <see cref="F:StardewValley.Game1.eventsSeenSinceLastLocationChange"/>, which is updated regardless (if it has a valid ID) to prevent event loops.</remarks>
        </member>
        <member name="M:StardewValley.Event.#ctor(System.String,StardewValley.Farmer)">
            <summary>Construct an instance.</summary>
            <param name="eventString">The raw event script.</param>
            <param name="farmerActor">The player to add as an actor in the event script, or <c>null</c> to use <see cref="P:StardewValley.Game1.player"/>.</param>
        </member>
        <member name="M:StardewValley.Event.#ctor(System.String,System.String,System.String,StardewValley.Farmer)">
            <summary>Construct an instance.</summary>
            <param name="eventString">The raw event script.</param>
            <param name="fromAssetName">The data asset name from which the event script was taken, or <c>null</c> for a generated event.</param>
            <param name="eventID">The event's unique ID from the event data files, if known. This may be a number matching one of the <see cref="T:StardewValley.Event"/> constants in <see cref="T:StardewValley.Constants.EventIds"/> for a generated event.</param>
            <param name="farmerActor">The player to add as an actor in the event script, or <c>null</c> to use <see cref="P:StardewValley.Game1.player"/>.</param>
        </member>
        <member name="M:StardewValley.Event.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewValley.Event.tryToLoadFestivalData(System.String,System.String@,System.Collections.Generic.Dictionary{System.String,System.String}@,System.String@,System.Int32@,System.Int32@)">
            <summary>Load the raw data for a festival, if it exists and is valid.</summary>
            <param name="festival">The festival ID to load, matching the asset name under <c>Data/Festivals</c> (like <samp>spring13</samp>).</param>
            <param name="assetName">The asset name for the loaded festival data.</param>
            <param name="data">The loaded festival data.</param>
            <param name="locationName">The location name in which the festival takes place.</param>
            <param name="startTime">The time of day when the festival opens.</param>
            <param name="endTime">The time of day when the festival closes.</param>
            <returns>Returns whether the festival data was loaded successfully.</returns>
        </member>
        <member name="M:StardewValley.Event.tryToLoadFestival(System.String,StardewValley.Event@)">
            <summary>Load a festival if it exists and its preconditions match the current time and the local player's current location.</summary>
            <param name="festival">The festival ID to load, matching the asset name under <c>Data/Festivals</c> (like <samp>spring13</samp>).</param>
            <param name="ev">The loaded festival event, if it was loaded successfully.</param>
            <returns>Returns whether the festival was loaded successfully.</returns>
        </member>
        <member name="M:StardewValley.Event.TryGetFestivalDialogueForYear(StardewValley.NPC,System.String,StardewValley.Dialogue@)">
            <summary>Try to get an NPC dialogue from the festival data, automatically adjusted to use the closest <c>{key}_y{year}</c> variant if any.</summary>
            <param name="npc">The NPC for which to get a dialogue.</param>
            <param name="key">The base field key for the dialogue text.</param>
            <param name="data">The resulting dialogue instance, or <c>null</c> if the key wasn't found.</param>
            <returns>Returns whether a matching dialogue was found.</returns>
        </member>
        <member name="M:StardewValley.Event.TryGetFestivalDataForYear(System.String,System.String@,System.String@)">
            <summary>Try to get a value from the festival data, automatically adjusted to use the closest <c>{key}_y{year}</c> variant if any.</summary>
            <param name="key">The base field key.</param>
            <param name="data">The resolved data, or <c>null</c> if the key wasn't found.</param>
            <param name="actualKey">The resolved field key, including the variant suffix if applicable, or <c>null</c> if the key wasn't found.</param>
            <returns>Returns whether a matching field was found.</returns>
        </member>
        <member name="M:StardewValley.Event.TryGetFestivalDataForYear(System.String,System.String@)">
            <summary>Get a value from the festival data, automatically adjusted to use the closest <c>{key}_y{year}</c> variant if any.</summary>
            <param name="key">The base field key.</param>
            <param name="data">The resolved data, or <c>null</c> if the key wasn't found.</param>
            <returns>Returns whether a matching field was found.</returns>
        </member>
        <member name="M:StardewValley.Event.setExitLocation(StardewValley.Warp)">
            <summary>Set the location and tile position at which to warp the player once the event ends.</summary>
            <param name="warp">The warp whose endpoint to use as the exit location.</param>
        </member>
        <member name="M:StardewValley.Event.setExitLocation(System.String,System.Int32,System.Int32)">
            <summary>Set the location and tile position at which to warp the player once the event ends.</summary>
            <param name="location">The location name.</param>
            <param name="x">The X tile position.</param>
            <param name="y">The Y tile position.</param>
        </member>
        <member name="M:StardewValley.Event.LogCommandError(System.String[],System.String,System.Boolean)">
            <summary>Log an error indicating that an event command format is invalid.</summary>
            <param name="args">The space-delimited event command string, including the command name.</param>
            <param name="error">The error to log.</param>
            <param name="willSkip">Whether the event command will be skipped entirely. If false, the event command will be applied without the argument(s) that failed. This only affects the wording of the message logged.</param>
        </member>
        <member name="M:StardewValley.Event.LogCommandErrorAndSkip(System.String[],System.String,System.Boolean)">
            <summary>Log an error indicating that a command format is invalid and skip the current command.</summary>
            <param name="args">The space-delimited event command string, including the command name.</param>
            <param name="error">The error to log.</param>
            <param name="hideError">Whether to skip without logging an error message.</param>
        </member>
        <member name="M:StardewValley.Event.LogErrorAndHalt(System.String,System.Exception)">
            <summary>Log an error indicating that the entire event has failed, and immediately stop the event.</summary>
            <param name="error">An error message indicating why the event failed.</param>
            <param name="e">The exception which caused the error, if applicable.</param>
        </member>
        <member name="M:StardewValley.Event.LogErrorAndHalt(System.Exception)">
            <summary>Log an error indicating that the entire event has failed, and immediately stop the event.</summary>
            <param name="e">The exception which caused the error.</param>
        </member>
        <member name="M:StardewValley.Event.LogPreconditionError(StardewValley.GameLocation,System.String,System.String[],System.String)">
            <summary>Log an error indicating that an event precondition is invalid.</summary>
            <param name="location">The location containing the event.</param>
            <param name="eventId">The unique event ID whose preconditions are being checked.</param>
            <param name="args">The precondition arguments, including the precondition key at the zeroth index.</param>
            <param name="error">The error phrase indicating why the precondition is invalid.</param>
            <returns>Returns false to simplify failing the precondition.</returns>
        </member>
        <member name="M:StardewValley.Event.Update(StardewValley.GameLocation,Microsoft.Xna.Framework.GameTime)">
            <summary>Update the event state.</summary>
            <param name="location">The location in which the event is running.</param>
            <param name="time">The current game execution time.</param>
        </member>
        <member name="M:StardewValley.Event.InitializeEvent(StardewValley.GameLocation,Microsoft.Xna.Framework.GameTime)">
            <summary>Initialize the event when it first starts.</summary>
            <param name="location">The location in which the event is running.</param>
            <param name="time">The current game execution time.</param>
        </member>
        <member name="M:StardewValley.Event.UpdateBeforeNextCommand(StardewValley.GameLocation,Microsoft.Xna.Framework.GameTime)">
            <summary>Run any updates needed before checking for the next script command.</summary>
            <param name="location">The location in which the event is running.</param>
            <param name="time">The current game execution time.</param>
            <returns>Returns whether to run the next command.</returns>
        </member>
        <member name="M:StardewValley.Event.GetCurrentCommand">
            <summary>Get the text of the current event command being executed.</summary>
        </member>
        <member name="M:StardewValley.Event.ReplaceCurrentCommand(System.String)">
            <summary>Replace the command at the current index.</summary>
            <param name="command">The new command text to parse.</param>
        </member>
        <member name="M:StardewValley.Event.ReplaceAllCommands(System.String[])">
            <summary>Replace the entire list of commands with the given values.</summary>
            <param name="commands">The new commands to parse.</param>
        </member>
        <member name="M:StardewValley.Event.InsertNextCommand(System.String)">
            <summary>Add a new event command to run after the current one.</summary>
            <param name="command">The new command text to parse.</param>
        </member>
        <member name="M:StardewValley.Event.TrackSound(StardewValley.ICue)">
            <summary>Register a sound cue to remove when the event ends.</summary>
            <param name="cue">The audio cue to register.</param>
        </member>
        <member name="M:StardewValley.Event.StopTrackedSound(System.String,System.Boolean)">
            <summary>Stop a tracked sound registered via <see cref="M:StardewValley.Event.TrackSound(StardewValley.ICue)"/>.</summary>
            <param name="cueId">The audio cue ID to stop.</param>
            <param name="immediate">Whether to stop the sound immediately, instead of letting it finish the current loop.</param>
        </member>
        <member name="M:StardewValley.Event.StopTrackedSounds">
            <summary>Stop all tracked sounds registered via <see cref="M:StardewValley.Event.TrackSound(StardewValley.ICue)"/>.</summary>
        </member>
        <member name="M:StardewValley.Event.getActorByName(System.String,System.Boolean)">
            <summary>Get an NPC actor in the event by its name.</summary>
            <param name="name">The actor name.</param>
            <param name="legacyReplaceUnderscores">Whether to try replacing underscores with spaces in <paramref name="name"/> if an exact match wasn't found. This is only meant for backwards compatibility, for event commands which predate argument quoting.</param>
            <returns>Returns the matching actor, else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.Event.getActorByName(System.String,System.Boolean@,System.Boolean)">
            <summary>Get an NPC actor in the event by its name.</summary>
            <param name="name">The actor name.</param>
            <param name="isOptionalNpc">Whether the NPC is marked optional, so no error should be shown if they're missing.</param>
            <param name="legacyReplaceUnderscores">Whether to try replacing underscores with spaces in <paramref name="name"/> if an exact match wasn't found. This is only meant for backwards compatibility, for event commands which predate argument quoting.</param>
            <returns>Returns the matching actor, else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.Event.GetFarmerActor(System.Int32)">
            <summary>Get the player in the event matching a farmer number, if found.</summary>
            <param name="farmerNumber">The farmer number. This can be -1 (current player), 1 (main player), or higher numbers for farmhands.</param>
            <returns>Returns the matching event actor or real farmer, or <c>null</c> if neither was found.</returns>
        </member>
        <member name="M:StardewValley.Event.IsCurrentFarmerActorId(System.String)">
            <summary>Get whether an actor ID is the current player.</summary>
            <param name="actor">The actor ID to check.</param>
        </member>
        <member name="M:StardewValley.Event.IsCurrentFarmerActorId(System.Int32)">
            <summary>Get whether an actor ID is the current player.</summary>
            <param name="farmerNumber">The farmer number to check.</param>
        </member>
        <member name="M:StardewValley.Event.IsFarmerActorId(System.String,System.Int32@)">
            <summary>Get whether an actor ID is a farmer like <c>farmer</c> (current player) or <samp>farmer3</samp> (player #3), regardless of whether that player is present.</summary>
            <param name="actor">The actor ID to check.</param>
            <param name="farmerNumber">The parsed farmer number, if applicable. This can be <samp>-1</samp> (current player), 1 (main player), or higher numbers for farmhands.</param>
        </member>
        <member name="M:StardewValley.Event.SplitPreconditions(System.String)">
            <summary>Split an event's key into its ID and preconditions.</summary>
            <param name="rawScript">The event key to split.</param>
        </member>
        <member name="M:StardewValley.Event.ParseCommands(System.String,StardewValley.Farmer)">
            <summary>Split and preprocess a raw event script into its component commands.</summary>
            <param name="rawScript">The raw event script to split.</param>
            <param name="player">The player for which the event is being parsed.</param>
        </member>
        <member name="M:StardewValley.Event.TryStartEndFestivalDialogue(StardewValley.Farmer)">
            <summary>Show the dialogue to end the current festival when the player tries to leave the location.</summary>
            <param name="who">The local player instance.</param>
            <returns>Returns whether the dialogue was displayed.</returns>
        </member>
        <member name="M:StardewValley.Prop.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
             <summary>
            
             </summary>
             <param name="texture"></param>
             <param name="index"></param>
             <param name="tilesWideSolid"></param>
             <param name="tilesHighSolid">how many tiles high this prop's bounding box should be. The difference between this and the tilesHighDraw parameter dictate wwhat portion is drawn in front of the player.</param>
             <param name="tilesHighDraw">how many tiles high this prop's sprite is in total.</param>
             <param name="tileX"></param>
             <param name="tileY">y-tile of the solid portion of the prop. stuff considered "height" that the player is draw behind doesn't count.</param>
        </member>
        <member name="T:StardewValley.EventContext">
            <summary>The context info for a running event.</summary>
        </member>
        <member name="P:StardewValley.EventContext.Event">
            <summary>The active event.</summary>
        </member>
        <member name="P:StardewValley.EventContext.Location">
            <summary>The location in which the event is running.</summary>
        </member>
        <member name="P:StardewValley.EventContext.Time">
            <summary>The current game execution time.</summary>
        </member>
        <member name="P:StardewValley.EventContext.Args">
            <summary>The space-delimited event command string, including the command name.</summary>
        </member>
        <member name="M:StardewValley.EventContext.#ctor(StardewValley.Event,StardewValley.GameLocation,Microsoft.Xna.Framework.GameTime,System.String[])">
            <summary>Construct an instance.</summary>
            <param name="event"><inheritdoc cref="P:StardewValley.EventContext.Event" path="/summary" /></param>
            <param name="location"><inheritdoc cref="P:StardewValley.EventContext.Location" path="/summary" /></param>
            <param name="time"><inheritdoc cref="P:StardewValley.EventContext.Time" path="/summary" /></param>
            <param name="args"><inheritdoc cref="P:StardewValley.EventContext.Args" path="/summary" /></param>
        </member>
        <member name="M:StardewValley.EventContext.LogError(System.String,System.Boolean)">
            <summary>Log an error indicating that the command is invalid.</summary>
            <param name="error">The error to log.</param>
            <param name="willSkip">Whether the event command will be skipped entirely. If false, the event command will be applied without the argument(s) that failed.</param>
        </member>
        <member name="M:StardewValley.EventContext.LogErrorAndSkip(System.String,System.Boolean)">
            <summary>Log an error indicating that the command format is invalid and skip the current command.</summary>
            <param name="error">The error to log.</param>
            <param name="hideError">Whether to skip without logging an error message.</param>
        </member>
        <member name="T:StardewValley.Events.BaseFarmEvent">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Events.BaseFarmEvent.NetFields">
            <summary>The multiplayer-synchronized fields for this event.</summary>
        </member>
        <member name="M:StardewValley.Events.BaseFarmEvent.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewValley.Events.BaseFarmEvent.initNetFields">
            <summary>Initialize the multiplayer-synchronized fields for this instance.</summary>
        </member>
        <member name="M:StardewValley.Events.BaseFarmEvent.setUp">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.BaseFarmEvent.tickUpdate(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.BaseFarmEvent.draw(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.BaseFarmEvent.drawAboveEverything(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.BaseFarmEvent.makeChangesToLocation">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.BirthingEvent.setUp">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.BirthingEvent.tickUpdate(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.DiaryEvent.setUp">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.DiaryEvent.tickUpdate(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.FairyEvent.setUp">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.FairyEvent.tickUpdate(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.FairyEvent.draw(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.FairyEvent.makeChangesToLocation">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.FairyEvent.ChooseCrop">
            <summary>Choose a random valid crop to target.</summary>
        </member>
        <member name="T:StardewValley.Events.FarmEvent">
            <summary>A cutscene that plays overnight before the day ends.</summary>
        </member>
        <member name="M:StardewValley.Events.FarmEvent.setUp">
            <summary>Set up the event before it runs.</summary>
            <returns>Returns true if the event should be skipped (e.g. setup failed), else false to continue.</returns>
        </member>
        <member name="M:StardewValley.Events.FarmEvent.tickUpdate(Microsoft.Xna.Framework.GameTime)">
            <summary>Update the event for a game tick while it's running.</summary>
            <param name="time">The elapsed game time.</param>
            <returns>Returns true if the event is done and can be ended, else false to continue.</returns>
        </member>
        <member name="M:StardewValley.Events.FarmEvent.draw(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>Draw the event to the screen.</summary>
            <param name="b">The sprite batch being drawn.</param>
        </member>
        <member name="M:StardewValley.Events.FarmEvent.drawAboveEverything(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>Draw anything the event needs to show above everything else.</summary>
            <param name="b">The sprite batch being drawn.</param>
        </member>
        <member name="M:StardewValley.Events.FarmEvent.makeChangesToLocation">
            <summary>Make any location changes needed when the event ends.</summary>
        </member>
        <member name="T:StardewValley.Events.MovieTheaterScreeningEvent">
            <summary>Generates the event that plays when watching a movie at the <see cref="T:StardewValley.Locations.MovieTheater"/>.</summary>
        </member>
        <member name="M:StardewValley.Events.PlayerCoupleBirthingEvent.setUp">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.PlayerCoupleBirthingEvent.tickUpdate(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.QuestionEvent.setUp">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.QuestionEvent.tickUpdate(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.QuestionEvent.makeChangesToLocation">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.SoundInTheNightEvent.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.SoundInTheNightEvent.setUp">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.SoundInTheNightEvent.tickUpdate(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.SoundInTheNightEvent.draw(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.SoundInTheNightEvent.makeChangesToLocation">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.WitchEvent.setUp">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.WitchEvent.tickUpdate(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.WitchEvent.draw(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.WitchEvent.makeChangesToLocation">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.WorldChangeEvent.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.WorldChangeEvent.setUp">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Events.WorldChangeEvent.tickUpdate(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="T:StardewValley.Extensions.CollectionExtensions">
            <summary>Provides utility extension methods on .NET collection types.</summary>
        </member>
        <member name="M:StardewValley.Extensions.CollectionExtensions.RemoveWhere``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})">
            <summary>Remove all elements that match a condition.</summary>
            <param name="dictionary">The dictionary to update.</param>
            <param name="match">The predicate matching values to remove.</param>
            <returns>Returns the number of entries removed.</returns>
        </member>
        <member name="M:StardewValley.Extensions.CollectionExtensions.Toggle``1(System.Collections.Generic.ISet{``0},``0,System.Boolean)">
            <summary>Add or remove value to the set.</summary>
            <param name="set">The set to update.</param>
            <param name="value">The value to add or remove.</param>
            <param name="add">Whether to add the value; else it's removed.</param>
        </member>
        <member name="M:StardewValley.Extensions.CollectionExtensions.AddRange``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Add a list of values to the set.</summary>
            <param name="set">The set to update.</param>
            <param name="values">The values to add to the set.</param>
            <returns>Returns the number of values added to the set.</returns>
        </member>
        <member name="M:StardewValley.Extensions.CollectionExtensions.RemoveWhere``1(System.Collections.Generic.ISet{``0},System.Predicate{``0})">
            <summary>Remove all elements that match a condition.</summary>
            <param name="set">The set to update.</param>
            <param name="match">The predicate matching values to remove.</param>
            <returns>Returns the number of values removed from the set.</returns>
        </member>
        <member name="T:StardewValley.Extensions.FrameworkExtensions">
            <summary>Provides utility extension methods on MonoGame and xTile types.</summary>
        </member>
        <member name="M:StardewValley.Extensions.FrameworkExtensions.GetTitleSafeArea(Microsoft.Xna.Framework.Graphics.Viewport)">
            <summary>Get a subset of the screen viewport that's guaranteed to be visible on a lower-quality display.</summary>
            <param name="viewport">The viewport pixel area.</param>
        </member>
        <member name="M:StardewValley.Extensions.FrameworkExtensions.GetPoints(Microsoft.Xna.Framework.Rectangle)">
            <summary>Get the point positions within the rectangle.</summary>
            <param name="rect">The rectangle area.</param>
        </member>
        <member name="M:StardewValley.Extensions.FrameworkExtensions.GetVectors(Microsoft.Xna.Framework.Rectangle)">
            <summary>Get the integer <see cref="T:Microsoft.Xna.Framework.Vector2"/> positions within the rectangle.</summary>
            <param name="rect">The rectangle area.</param>
        </member>
        <member name="M:StardewValley.Extensions.FrameworkExtensions.Clone(Microsoft.Xna.Framework.Rectangle)">
            <summary>Get a new rectangle with the same values as this instance.</summary>
            <param name="rect">The rectangle to clone.</param>
        </member>
        <member name="M:StardewValley.Extensions.FrameworkExtensions.TryGetValue(xTile.ObjectModel.IPropertyCollection,System.String,System.String@)">
            <summary>Get a property value as a string, if it exists.</summary>
            <param name="properties">The property collection to search.</param>
            <param name="key">The property key to fetch.</param>
            <param name="value">The property value, if found.</param>
            <returns>Returns whether the property value was found.</returns>
        </member>
        <member name="M:StardewValley.Extensions.FrameworkExtensions.TryAdd(xTile.ObjectModel.IPropertyCollection,System.String,System.String)">
            <summary>Add a property if the key isn't already present.</summary>
            <param name="properties">The properties to modify.</param>
            <param name="key">The key of the property to add.</param>
            <param name="value">The value of the property to add.</param>
            <returns>Returns whether the value was successfully added.</returns>
        </member>
        <member name="M:StardewValley.Extensions.FrameworkExtensions.RequireLayer(xTile.Map,System.String)">
            <summary>Get a map layer by ID, or throw an exception if it's not found.</summary>
            <param name="map">The map whose layer to get.</param>
            <param name="layerId">The layer ID.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The <paramref name="layerId"/> doesn't match a layer in the map.</exception>
        </member>
        <member name="M:StardewValley.Extensions.FrameworkExtensions.GetTileIndexAt(xTile.Map,System.Int32,System.Int32,System.String)">
            <summary>Get the tile index at the given layer coordinate.</summary>
            <param name="map">The map whose tiles to check.</param>
            <param name="x">The tile X coordinate.</param>
            <param name="y">The tile Y coordinate.</param>
            <param name="layerId">The layer whose tiles to check.</param>
            <returns>Returns the matching tile's index, or <c>-1</c> if no tile was found.</returns>
        </member>
        <member name="M:StardewValley.Extensions.FrameworkExtensions.GetTileIndexAt(xTile.Map,xTile.Dimensions.Location,System.String)">
            <summary>Get the tile index at the given layer coordinate.</summary>
            <param name="map">The map whose tiles to check.</param>
            <param name="tile">The tile coordinates.</param>
            <param name="layerId">The layer whose tiles to check.</param>
            <returns>Returns the matching tile's index, or <c>-1</c> if no tile was found.</returns>
        </member>
        <member name="M:StardewValley.Extensions.FrameworkExtensions.GetTileIndexAt(xTile.Layers.Layer,xTile.Dimensions.Location)">
            <summary>Get the tile index at the given layer coordinate.</summary>
            <param name="layer">The layer whose tiles to check.</param>
            <param name="tile">The tile coordinates.</param>
            <returns>Returns the matching tile's index, or <c>-1</c> if no tile was found.</returns>
        </member>
        <member name="M:StardewValley.Extensions.FrameworkExtensions.GetTileIndexAt(xTile.Layers.Layer,System.Int32,System.Int32)">
            <summary>Get the tile index at the given layer coordinate.</summary>
            <param name="layer">The layer whose tiles to check.</param>
            <param name="x">The tile X coordinate.</param>
            <param name="y">The tile Y coordinate.</param>
            <returns>Returns the matching tile's index, or <c>-1</c> if no tile was found.</returns>
        </member>
        <member name="T:StardewValley.Extensions.ItemExtensions">
            <summary>Provides utility extension methods on <see cref="T:StardewValley.Item"/> types.</summary>
        </member>
        <member name="M:StardewValley.Extensions.ItemExtensions.HasTypeId(StardewValley.ItemTypeDefinitions.IHaveItemTypeId,System.String)">
            <summary>Get whether the item has the given type definition ID.</summary>
            <param name="item">The item instance.</param>
            <param name="typeId">The type definition ID, matching a constant like <see cref="F:StardewValley.ItemRegistry.type_object"/>.</param>
        </member>
        <member name="M:StardewValley.Extensions.ItemExtensions.HasTypeObject(StardewValley.ItemTypeDefinitions.IHaveItemTypeId)">
            <summary>Get whether the item has object type <see cref="F:StardewValley.ItemRegistry.type_object"/>.</summary>
            <param name="item">The item instance.</param>
        </member>
        <member name="M:StardewValley.Extensions.ItemExtensions.HasTypeBigCraftable(StardewValley.ItemTypeDefinitions.IHaveItemTypeId)">
            <summary>Get whether the item has object type <see cref="F:StardewValley.ItemRegistry.type_bigCraftable"/>.</summary>
            <param name="item">The item instance.</param>
        </member>
        <member name="T:StardewValley.Extensions.ItemRegistryExtensions">
            <summary>Provides utility extension methods on <see cref="T:StardewValley.ItemRegistry"/> and <see cref="T:StardewValley.ItemTypeDefinitions.IItemDataDefinition"/> types.</summary>
        </member>
        <member name="M:StardewValley.Extensions.ItemRegistryExtensions.GetAllData(StardewValley.ItemTypeDefinitions.IItemDataDefinition)">
            <summary>Get the parsed data for each item provided by this item data definition.</summary>
            <param name="definition">The item data definition to query.</param>
        </member>
        <member name="T:StardewValley.Extensions.RandomExtensions">
            <summary>Provides utility extension methods on framework types.</summary>
        </member>
        <member name="M:StardewValley.Extensions.RandomExtensions.Choose``1(System.Random,``0,``0)">
            <summary>Randomly choose one of the given options.</summary>
            <typeparam name="T">The option type.</typeparam>
            <param name="random">The random instance with which to check.</param>
            <param name="optionA">The first option, which has a 50% chance of being selected.</param>
            <param name="optionB">The second option, which has a 50% chance of being selected.</param>
        </member>
        <member name="M:StardewValley.Extensions.RandomExtensions.Choose``1(System.Random,``0,``0,``0)">
            <summary>Randomly choose one of the given options.</summary>
            <typeparam name="T">The option type.</typeparam>
            <param name="random">The random instance with which to check.</param>
            <param name="optionA">The first option, which has a 33.3% chance of being selected.</param>
            <param name="optionB">The second option, which has a 33.3% chance of being selected.</param>
            <param name="optionC">The third option, which has a 33.3% chance of being selected.</param>
        </member>
        <member name="M:StardewValley.Extensions.RandomExtensions.Choose``1(System.Random,``0,``0,``0,``0)">
            <summary>Randomly choose one of the given options.</summary>
            <typeparam name="T">The option type.</typeparam>
            <param name="random">The random instance with which to check.</param>
            <param name="optionA">The first option, which has a 25% chance of being selected.</param>
            <param name="optionB">The second option, which has a 25% chance of being selected.</param>
            <param name="optionC">The third option, which has a 25% chance of being selected.</param>
            <param name="optionD">The fourth option, which has a 25% chance of being selected.</param>
        </member>
        <member name="M:StardewValley.Extensions.RandomExtensions.Choose``1(System.Random,``0[])">
            <summary>Randomly choose one of the given options.</summary>
            <typeparam name="T">The option type.</typeparam>
            <param name="random">The random instance with which to check.</param>
            <param name="options">The options to choose from, which each have an equal chance of being selected.</param>
            <returns>Returns a random option, or the default value for <typeparamref name="T"/> if there are none.</returns>
            <remarks>This chooses one of the input parameters. To choose from an existing list, see <see cref="M:StardewValley.Extensions.RandomExtensions.ChooseFrom``1(System.Random,System.Collections.Generic.IList{``0})"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.Extensions.RandomExtensions.ChooseFrom``1(System.Random,System.Collections.Generic.IList{``0})">
            <summary>Randomly choose an option from a list.</summary>
            <typeparam name="T">The option type.</typeparam>
            <param name="random">The random instance with which to check.</param>
            <param name="options">The options to choose from, which each have an equal chance of being selected.</param>
            <returns>Returns a random option, or the default value for <typeparamref name="T"/> if there are none.</returns>
        </member>
        <member name="M:StardewValley.Extensions.RandomExtensions.NextBool(System.Random)">
            <summary>Get a random boolean value (i.e. a 50% chance).</summary>
            <param name="random">The random instance with which to check.</param>
        </member>
        <member name="M:StardewValley.Extensions.RandomExtensions.NextBool(System.Random,System.Double)">
            <summary>Get a random boolean value with a weighted chance.</summary>
            <param name="random">The random instance with which to check.</param>
            <param name="chance">The probability of returning true, as a value between 0 (never) and 1 (always).</param>
        </member>
        <member name="M:StardewValley.Extensions.RandomExtensions.NextBool(System.Random,System.Single)">
            <inheritdoc cref="M:StardewValley.Extensions.RandomExtensions.NextBool(System.Random,System.Double)"/>
        </member>
        <member name="M:StardewValley.Extensions.ReflectionExtensions.TrySetValueFromString(System.Reflection.MemberInfo,System.Object,System.String,System.Object[],System.String@)">
            <summary>Try to set the field or property's value from its string representation.</summary>
            <param name="info">The field or property to set.</param>
            <param name="obj">The object instance whose field or property to set.</param>
            <param name="rawValue">A string representation of the value to set. This will be converted to the property type if possible.</param>
            <param name="index">Optional index values for an indexed property. This should be null for fields or non-indexed properties.</param>
            <param name="error">An error indicating why the property value could not be set, if applicable.</param>
        </member>
        <member name="F:StardewValley.FarmAnimal.ErrorTextureName">
            <summary>The texture name to load if the animal's actual sprite can't be loaded.</summary>
        </member>
        <member name="F:StardewValley.FarmAnimal.ErrorSpriteSize">
            <summary>The pixel size of sprites in the <see cref="F:StardewValley.FarmAnimal.ErrorTextureName"/>.</summary>
        </member>
        <member name="P:StardewValley.FarmAnimal.home">
            <summary>The building within which the animal is normally housed, if any.</summary>
        </member>
        <member name="P:StardewValley.FarmAnimal.IsHome">
            <summary>Get whether the farm animal is currently inside their home building.</summary>
        </member>
        <member name="M:StardewValley.FarmAnimal.ReloadTextureIfNeeded(System.Boolean)">
            <summary>Reload the texture if the asset name should change based on the current animal state and data.</summary>
            <param name="forceReload">Whether to reload the texture even if the texture path hasn't changed.</param>
        </member>
        <member name="M:StardewValley.FarmAnimal.GetDisplayName(System.String,System.Boolean)">
            <summary>Get the translated display name for a farm animal from its data, if any.</summary>
            <param name="id">The animal type ID in <c>Data/FarmAnimals</c>.</param>
            <param name="forShop">Whether to get the shop name, if applicable.</param>
        </member>
        <member name="M:StardewValley.FarmAnimal.GetShopDescription(System.String)">
            <summary>Get the translated shop description for a farm animal from its data, if any.</summary>
            <param name="id">The animal type ID in <c>Data/FarmAnimals</c>.</param>
        </member>
        <member name="M:StardewValley.FarmAnimal.dayUpdate(StardewValley.GameLocation)">
            <summary>Update the animal state when setting up the new day, before the game saves overnight.</summary>
            <param name="environment">The location containing the animal.</param>
            <remarks>See also <see cref="M:StardewValley.FarmAnimal.OnDayStarted"/>, which happens after saving when the day has started.</remarks>
        </member>
        <member name="M:StardewValley.FarmAnimal.OnDayStarted">
            <summary>Handle the new day starting after the player saves, loads, or connects.</summary>
            <remarks>See also <see cref="M:StardewValley.FarmAnimal.dayUpdate(StardewValley.GameLocation)"/>, which happens while setting up the day before saving.</remarks>
        </member>
        <member name="M:StardewValley.FarmAnimal.isAdult">
            <summary>Get whether this farm animal is fully grown.</summary>
            <remarks>See also <see cref="M:StardewValley.FarmAnimal.isBaby"/>.</remarks>
        </member>
        <member name="M:StardewValley.FarmAnimal.isBaby">
            <summary>Get whether this farm animal is a baby.</summary>
            <remarks>See also <see cref="M:StardewValley.FarmAnimal.isAdult"/>.</remarks>
        </member>
        <member name="M:StardewValley.FarmAnimal.CanGetProduceWithTool(StardewValley.Tool)">
            <summary>Get whether this farm animal's produce can be collected using a given tool.</summary>
            <param name="tool">The tool to check.</param>
        </member>
        <member name="M:StardewValley.FarmAnimal.GetHarvestType">
            <summary>Get the way in which the animal's produce is output.</summary>
        </member>
        <member name="M:StardewValley.FarmAnimal.CanLiveIn(StardewValley.Buildings.Building)">
            <summary>Get whether this farm animal can live in a building.</summary>
            <param name="building">The building to check.</param>
            <remarks>This doesn't check whether there's room for it in the building; see <see cref="M:StardewValley.AnimalHouse.isFull"/> on <see cref="M:StardewValley.Buildings.Building.GetIndoors"/> for that.</remarks>
        </member>
        <member name="M:StardewValley.FarmAnimal.growFully(System.Random)">
            <summary>If the animal is a baby, instantly age it to adult.</summary>
            <param name="random">The RNG with which to select its produce, if applicable.</param>
        </member>
        <member name="M:StardewValley.FarmAnimal.GetSoundId">
            <summary>Get the sound ID produced by the animal (e.g. when pet).</summary>
        </member>
        <member name="M:StardewValley.FarmAnimal.ValidateSpritesheetSize">
            <summary>Log warnings if the farm animal's sprite is incorrectly sized, which would otherwise lead to hard-to-diagnose issues like animals freezing.</summary>
        </member>
        <member name="F:StardewValley.Farmer.netItems">
            <summary>The backing field for <see cref="P:StardewValley.Farmer.Items"/>.</summary>
        </member>
        <member name="F:StardewValley.Farmer.triggerActionsRun">
            <summary>The trigger actions which have been run for the player.</summary>
        </member>
        <member name="F:StardewValley.Farmer.eventsSeen">
            <summary>The event IDs which the player has seen.</summary>
        </member>
        <member name="F:StardewValley.Farmer.mailReceived">
            <summary>The mail flags set on the player. This includes both actual mail letter IDs matching <c>Data/mail</c>, and non-mail flags used to track game state like <c>ccIsComplete</c> (community center complete).</summary>
            <remarks>See also <see cref="F:StardewValley.Farmer.mailForTomorrow"/> and <see cref="F:StardewValley.Farmer.mailbox"/>.</remarks>
        </member>
        <member name="F:StardewValley.Farmer.mailForTomorrow">
            <summary>The mail flags that will be added to the <see cref="F:StardewValley.Farmer.mailbox"/> tomorrow.</summary>
        </member>
        <member name="F:StardewValley.Farmer.mailbox">
            <summary>The mail IDs matching <c>Data/mail</c> in the player's mailbox, if any. Each time the player checks their mailbox, one letter from this set will be displayed and moved into <see cref="F:StardewValley.Farmer.mailReceived"/>.</summary>
        </member>
        <member name="F:StardewValley.Farmer.locationsVisited">
            <summary>The internal names of locations which the player has previously visited.</summary>
            <remarks>This contains the <see cref="P:StardewValley.GameLocation.Name"/> field, not <see cref="P:StardewValley.GameLocation.NameOrUniqueName"/>. They're equivalent for most locations, but building interiors will use their common name (like <c>Barn</c> instead of <c>Barn{unique ID}</c> for barns).</remarks>
        </member>
        <member name="P:StardewValley.Farmer.obsolete_isMale">
            <summary>Obsolete since 1.6. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Farmer.Gender"/> or <see cref="P:StardewValley.Farmer.IsMale"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Farmer.obsolete_catPerson">
            <summary>Obsolete since 1.6. This is only kept to preserve data from old save files. Use <see cref="F:StardewValley.Farmer.whichPetType"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Farmer.obsolete_canUnderstandDwarves">
            <summary>Obsolete since 1.6. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Farmer.canUnderstandDwarves"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Farmer.obsolete_hasClubCard">
            <summary>Obsolete since 1.6. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Farmer.hasClubCard"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Farmer.obsolete_hasDarkTalisman">
            <summary>Obsolete since 1.6. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Farmer.hasDarkTalisman"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Farmer.obsolete_hasMagicInk">
            <summary>Obsolete since 1.6. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Farmer.hasMagicInk"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Farmer.obsolete_hasMagnifyingGlass">
            <summary>Obsolete since 1.6. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Farmer.hasMagnifyingGlass"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Farmer.obsolete_hasRustyKey">
            <summary>Obsolete since 1.6. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Farmer.hasRustyKey"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Farmer.obsolete_hasSkullKey">
            <summary>Obsolete since 1.6. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Farmer.hasSkullKey"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Farmer.obsolete_hasSpecialCharm">
            <summary>Obsolete since 1.6. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Farmer.hasSpecialCharm"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Farmer.obsolete_hasTownKey">
            <summary>Obsolete since 1.6. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Farmer.HasTownKey"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Farmer.obsolete_hasUnlockedSkullDoor">
            <summary>Obsolete since 1.6. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Farmer.hasUnlockedSkullDoor"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Farmer.obsolete_friendships">
            <summary>Obsolete since 1.3. This is only kept to preserve data from old save files. Use <see cref="F:StardewValley.Farmer.friendshipData"/> for NPC friendships or <see cref="F:StardewValley.FarmerTeam.friendshipData"/> for farmhands instead.</summary>
        </member>
        <member name="F:StardewValley.Farmer.obsolete_daysMarried">
            <summary>Obsolete since 1.3. This is only kept to preserve data from old save files. Use <see cref="M:StardewValley.Farmer.GetDaysMarried"/> instead.</summary>
        </member>
        <member name="P:StardewValley.Farmer.catPerson">
            <summary>Whether the player's preferred pet type is <see cref="F:StardewValley.Characters.Pet.type_cat"/>.</summary>
            <remarks>See also <see cref="F:StardewValley.Farmer.whichPetType"/>.</remarks>
        </member>
        <member name="F:StardewValley.Farmer.whichPetType">
            <summary>The preferred pet type, matching an ID in <c>Data/Pets</c>. The vanilla pet types are <see cref="F:StardewValley.Characters.Pet.type_cat"/> and <see cref="F:StardewValley.Characters.Pet.type_dog"/>.</summary>
        </member>
        <member name="F:StardewValley.Farmer.whichPetBreed">
            <summary>The selected breed ID in <c>Data/Pets</c> for the <see cref="F:StardewValley.Farmer.whichPetType"/>.</summary>
        </member>
        <member name="F:StardewValley.Farmer.shirt">
            <summary>If set, the unqualified item ID of the <see cref="F:StardewValley.ItemRegistry.type_shirt"/> item to show this player wearing instead of the equipped <see cref="F:StardewValley.Farmer.shirtItem"/>.</summary>
        </member>
        <member name="F:StardewValley.Farmer.pants">
            <summary>If set, the unqualified item ID of the <see cref="F:StardewValley.ItemRegistry.type_pants"/> item to show this player wearing instead of the equipped <see cref="F:StardewValley.Farmer.pantsItem"/>.</summary>
        </member>
        <member name="F:StardewValley.Farmer.lastGotPrizeFromGil">
            <summary>The last date that we submitted the Calico Egg Rating to Gil.</summary>
        </member>
        <member name="F:StardewValley.Farmer.pantsColor">
            <summary>The color to apply when rendering <see cref="F:StardewValley.Farmer.pants"/>. Most code should use <see cref="M:StardewValley.Farmer.GetPantsColor"/> instead.</summary>
        </member>
        <member name="P:StardewValley.Farmer.canUnderstandDwarves">
            <summary>Whether <strong>any player</strong> has found the Dwarvish Translation Guide that allows speaking to dwarves.</summary>
        </member>
        <member name="P:StardewValley.Farmer.hasClubCard">
            <summary>Whether this player has unlocked access to the casino club.</summary>
        </member>
        <member name="P:StardewValley.Farmer.hasDarkTalisman">
            <summary>Whether this player has found the dark talisman, which unblocks the railroad's northeast path.</summary>
        </member>
        <member name="P:StardewValley.Farmer.hasMagicInk">
            <summary>Whether this player has found the magic ink which allows magical building construction by the Wizard.</summary>
        </member>
        <member name="P:StardewValley.Farmer.hasMagnifyingGlass">
            <summary>Whether this player has found the magnifying glass which allows finding secret notes.</summary>
        </member>
        <member name="P:StardewValley.Farmer.hasRustyKey">
            <summary>Whether <strong>any player</strong> has found the Rusty Key which unlocks the sewers.</summary>
        </member>
        <member name="P:StardewValley.Farmer.hasSkullKey">
            <summary>Whether <strong>any player</strong> has found the Skull Key which unlocks the skull caverns.</summary>
        </member>
        <member name="P:StardewValley.Farmer.hasSpecialCharm">
            <summary>Whether this player has the Special Charm which increases daily luck.</summary>
        </member>
        <member name="P:StardewValley.Farmer.HasTownKey">
            <summary>Whether this player has unlocked the 'Key to the Town' item which lets them enter all town buildings.</summary>
        </member>
        <member name="P:StardewValley.Farmer.hasUnlockedSkullDoor">
            <summary>Whether the player has unlocked the door to the skull caverns using <see cref="P:StardewValley.Farmer.hasSkullKey"/>.</summary>
        </member>
        <member name="F:StardewValley.Farmer.netGender">
            <summary>The net-synchronized backing field for <see cref="P:StardewValley.Farmer.Gender"/>.</summary>
        </member>
        <member name="F:StardewValley.Farmer.netSpouse">
            <summary>The backing field for <see cref="P:StardewValley.Farmer.spouse"/>.</summary>
        </member>
        <member name="P:StardewValley.Farmer.spouse">
            <summary>The player's NPC spouse or roommate.</summary>
        </member>
        <member name="P:StardewValley.Farmer.Gender">
            <summary>The player's gender identity.</summary>
        </member>
        <member name="P:StardewValley.Farmer.IsLocalPlayer">
            <summary>Whether this is the farmer controlled by the local player, <strong>or</strong> the main farmer in an event being viewed by the local player (even if that farmer instance is a different player).</summary>
        </member>
        <member name="M:StardewValley.Farmer.LearnDefaultRecipes">
            <summary>Learn the recipes that have no unlock requirements.</summary>
        </member>
        <member name="M:StardewValley.Farmer.isRoommate(System.String)">
            <summary>Get whether the player is roommates with a given NPC (excluding marriage).</summary>
            <param name="npc">The NPC's internal name.</param>
            <remarks>See also <see cref="M:StardewValley.Farmer.hasRoommate"/>.</remarks>
        </member>
        <member name="M:StardewValley.Farmer.hasCurrentOrPendingRoommate">
            <summary>Get whether the player is or will soon be roommates with an NPC (excluding marriage).</summary>
        </member>
        <member name="M:StardewValley.Farmer.hasRoommate">
            <summary>Get whether the player is roommates with an NPC (excluding marriage).</summary>
            <remarks>See also <see cref="M:StardewValley.Farmer.isRoommate(System.String)"/>.</remarks>
        </member>
        <member name="M:StardewValley.Farmer.foundArtifact(System.String,System.Int32)">
            <summary>Handle the player finding an artifact object.</summary>
            <param name="itemId">The unqualified item ID for an <see cref="F:StardewValley.ItemRegistry.type_object"/>-type item.</param>
            <param name="number">The number found.</param>
        </member>
        <member name="M:StardewValley.Farmer.revealGiftTaste(System.String,System.String)">
            <summary>Mark a gift as having been revealed to the player, even if it hasn't yet been gifted.</summary>
            <param name="npcName">The name of the NPC.</param>
            <param name="itemId">The item ID.</param>
        </member>
        <member name="M:StardewValley.Farmer.foundMineral(System.String)">
            <summary>Handle the player finding a mineral object.</summary>
            <param name="itemId">The unqualified item ID for an <see cref="F:StardewValley.ItemRegistry.type_object"/>-type item.</param>
        </member>
        <member name="M:StardewValley.Farmer.LoseItemsOnDeath(System.Random)">
            <summary>Cause the player to lose a random number of items based on their luck after dying. These will be added to <see cref="F:StardewValley.Farmer.itemsLostLastDeath"/> so they can recover one of them.</summary>
            <param name="random">The RNG to use, or <c>null</c> to create one.</param>
            <returns>Returns the number of items lost.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:StardewValley.Farmer.dayupdate(System.Int32)" -->
        <member name="M:StardewValley.Farmer.hasBuff(System.String)">
            <summary>Get whether the player has a buff applied.</summary>
            <param name="id">The buff ID, like <see cref="F:StardewValley.Buff.tipsy"/>.</param>
        </member>
        <member name="M:StardewValley.Farmer.applyBuff(System.String)">
            <summary>Add a buff to the player, or refresh it if it's already applied.</summary>
            <param name="id">The buff ID, like <see cref="F:StardewValley.Buff.tipsy"/>.</param>
        </member>
        <member name="M:StardewValley.Farmer.applyBuff(StardewValley.Buff)">
            <summary>Add a buff to the player, or refresh it if it's already applied.</summary>
            <param name="id">The buff to apply.</param>
        </member>
        <member name="M:StardewValley.Farmer.hasBuffWithNameContainingString(System.String)">
            <summary>Get whether the player has a buff with an ID containing the given string.</summary>
            <param name="idSubstring">The substring to match in the buff ID.</param>
        </member>
        <member name="M:StardewValley.Farmer.addItemToInventory(StardewValley.Item)">
            <summary>Add an item to the player's inventory if there's room for it.</summary>
            <param name="item">The item to add.</param>
            <returns>If the item was fully added to the inventory, returns <c>null</c>. Else returns the input item with its stack reduced to the amount that couldn't be added.</returns>
        </member>
        <member name="M:StardewValley.Farmer.addItemToInventory(StardewValley.Item,System.Collections.Generic.List{StardewValley.Item})">
            <summary>Add an item to the player's inventory if there's room for it.</summary>
            <param name="item">The item to add.</param>
            <param name="affected_items_list">A list to update with the inventory item stacks it was merged into, or <c>null</c> to ignore it.</param>
            <returns>If the item was fully added to the inventory, returns <c>null</c>. Else returns the input item with its stack reduced to the amount that couldn't be added.</returns>
        </member>
        <member name="M:StardewValley.Farmer.addItemToInventory(StardewValley.Item,System.Int32)">
            <summary>Add an item to the player's inventory at a specific index position. If there's already an item at that position, the stacks are merged (if possible) else they're swapped.</summary>
            <param name="item">The item to add.</param>
            <param name="position">The index position within the list at which to add the item.</param>
            <returns>If the item was fully added to the inventory, returns <c>null</c>. If it replaced an item stack previously at that position, returns the replaced item stack. Else returns the input item with its stack reduced to the amount that couldn't be added.</returns>
        </member>
        <member name="M:StardewValley.Farmer.addItemToInventoryBool(StardewValley.Item,System.Boolean)">
            <summary>Add an item to the player's inventory if there's room for it.</summary>
            <param name="item">The item to add.</param>
            <param name="makeActiveObject">Legacy option which may behave in unexpected ways; shouldn't be used by most code.</param>
            <returns>Returns whether the item was at least partially added to the inventory. The number of items added will be deducted from the <paramref name="item"/>'s <see cref="P:StardewValley.Item.Stack"/>.</returns>
        </member>
        <member name="M:StardewValley.Farmer.addItemByMenuIfNecessaryElseHoldUp(StardewValley.Item,StardewValley.Menus.ItemGrabMenu.behaviorOnItemSelect,System.Boolean)">
            <summary>Add an item to the player's inventory if there's room for it, then show an animation of the player holding up the item above their head. If the item can't be fully added to the player's inventory, show (or queue) an item-grab menu to let the player collect the remainder.</summary>
            <param name="item">The item to add.</param>
            <param name="itemSelectedCallback">The callback to invoke when the item is added to the player's inventory.</param>
            <param name="forceQueue">For any remainder that can't be added to the inventory directly, whether to add the item-grab menu to <see cref="F:StardewValley.Game1.nextClickableMenu"/> even if there's no active menu currently open.</param>
        </member>
        <member name="M:StardewValley.Farmer.addItemByMenuIfNecessary(StardewValley.Item,StardewValley.Menus.ItemGrabMenu.behaviorOnItemSelect,System.Boolean)">
            <summary>Add an item to the player's inventory if there's room for it. If the item can't be fully added to the player's inventory, show (or queue) an item-grab menu to let the player collect the remainder.</summary>
            <param name="item">The item to add.</param>
            <param name="itemSelectedCallback">The callback to invoke when the item is added to the player's inventory.</param>
            <param name="forceQueue">For any remainder that can't be added to the inventory directly, whether to add the item-grab menu to <see cref="F:StardewValley.Game1.nextClickableMenu"/> even if there's no active menu currently open.</param>
        </member>
        <member name="M:StardewValley.Farmer.addItemsByMenuIfNecessary(System.Collections.Generic.List{StardewValley.Item},StardewValley.Menus.ItemGrabMenu.behaviorOnItemSelect,System.Boolean)">
            <summary>Add items to the player's inventory if there's room for them. If the items can't be fully added to the player's inventory, show (or queue) an item-grab menu to let the player collect the remainder.</summary>
            <param name="itemsToAdd">The items to add.</param>
            <param name="itemSelectedCallback">The callback to invoke when an item is added to the player's inventory.</param>
            <param name="forceQueue">For any items that can't be added to the inventory directly, whether to add the item-grab menu to <see cref="F:StardewValley.Game1.nextClickableMenu"/> even if there's no active menu currently open.</param>
        </member>
        <member name="M:StardewValley.Farmer.GetItemReceiveBehavior(StardewValley.Item,System.Boolean@,System.Boolean@)">
            <summary>Get the behavior that applies when this item is received.</summary>
            <param name="item">The item being received.</param>
            <param name="needsInventorySpace">Whether this item takes space in the player inventory. This is false for special items like Qi Gems.</param>
            <param name="showNotification">Whether to show a HUD notification when the item is received.</param>
        </member>
        <member name="M:StardewValley.Farmer.OnItemReceived(StardewValley.Item,System.Int32,StardewValley.Item,System.Boolean)">
            <summary>Handle an item being added to the current player's inventory.</summary>
            <param name="item">The item that was added. If <see cref="!:mergedIntoStack"/> is set, this is the original item rather than the one actually in the player's inventory.</param>
            <param name="countAdded">The number of the item that was added. This may differ from <paramref name="item"/>'s stack size if it was only partly added or split across multiple stacks.</param>
            <param name="mergedIntoStack">The previous item stack it was merged into, if applicable.</param>
            <param name="hideHudNotification">Hide the 'item received' HUD notification even if it would normally be shown. This is used when merging the item into multiple stacks, so the HUD notification is shown once.</param>
        </member>
        <member name="M:StardewValley.Farmer.ShowItemReceivedHudMessageIfNeeded(StardewValley.Item,System.Int32)">
            <summary>Show the item-received HUD message for an item if applicable for the item type.</summary>
            <param name="item">The item that was added.</param>
            <param name="countAdded">The number of the item that was added. This may differ from <paramref name="item"/>'s stack size if it was only partly added or split across multiple stacks.</param>
        </member>
        <member name="M:StardewValley.Farmer.ShowItemReceivedHudMessage(StardewValley.Item,System.Int32)">
            <summary>Show the item-received HUD message for an item.</summary>
            <param name="item">The item that was added.</param>
            <param name="countAdded">The number of the item that was added. This may differ from <paramref name="item"/>'s stack size if it was only partly added or split across multiple stacks.</param>
        </member>
        <member name="M:StardewValley.Farmer.isMarriedOrRoommates">
            <summary>Get whether the player is married to or roommates with an NPC or player.</summary>
        </member>
        <member name="M:StardewValley.Farmer.changeShoeColor(System.String)">
            <summary>Change the color of the player's shoes.</summary>
            <param name="color">The new color to set.</param>
        </member>
        <member name="M:StardewValley.Farmer.changeHairColor(Microsoft.Xna.Framework.Color)">
            <summary>Change the color of the player's hair.</summary>
            <param name="color">The new color to set.</param>
        </member>
        <member name="M:StardewValley.Farmer.changePantsColor(Microsoft.Xna.Framework.Color)">
            <summary>Change the color of the player's equipped pants.</summary>
            <param name="color">The new color to set.</param>
        </member>
        <member name="M:StardewValley.Farmer.hasDarkSkin">
            <summary>Whether this player has dark skin for the purposes of child genetics.</summary>
        </member>
        <member name="M:StardewValley.Farmer.changeEyeColor(Microsoft.Xna.Framework.Color)">
            <summary>Change the color of the player's eyes.</summary>
            <param name="color">The new color to set.</param>
        </member>
        <member name="M:StardewValley.Farmer.IsOverridingPants(System.String@,System.Nullable{Microsoft.Xna.Framework.Color}@)">
            <summary>Get whether custom pants should be drawn instead of the equipped pants item.</summary>
            <param name="id">The pants ID to draw, if overridden.</param>
            <param name="color">The pants color to draw, if overridden.</param>
        </member>
        <member name="M:StardewValley.Farmer.CanDyePants">
            <summary>Get whether the current pants can be dyed.</summary>
        </member>
        <member name="M:StardewValley.Farmer.GetDisplayPants(Microsoft.Xna.Framework.Graphics.Texture2D@,System.Int32@)">
            <summary>Get the pants to draw on the farmer.</summary>
            <param name="texture">The texture to render.</param>
            <param name="spriteIndex">The sprite index in the <paramref name="texture"/>.</param>
        </member>
        <member name="M:StardewValley.Farmer.GetPantsId">
            <summary>Get the unqualified item ID for the displayed pants (which aren't necessarily the equipped ones).</summary>
        </member>
        <member name="M:StardewValley.Farmer.IsOverridingShirt(System.String@)">
            <summary>Get whether a custom shirt should be drawn instead of the equipped shirt item.</summary>
            <param name="id">The shirt ID to draw, if overridden.</param>
        </member>
        <member name="M:StardewValley.Farmer.CanDyeShirt">
            <summary>Get whether the current shirt can be dyed.</summary>
        </member>
        <member name="M:StardewValley.Farmer.GetDisplayShirt(Microsoft.Xna.Framework.Graphics.Texture2D@,System.Int32@)">
            <summary>Get the shirt to draw on the farmer.</summary>
            <param name="texture">The texture to render.</param>
            <param name="spriteIndex">The sprite index in the <paramref name="texture"/>.</param>
        </member>
        <member name="M:StardewValley.Farmer.GetShirtId">
            <summary>Get the unqualified item ID for the displayed shirt (which isn't necessarily the equipped one).</summary>
        </member>
        <member name="M:StardewValley.Farmer.GetShirtColor">
            <summary>Get the color of the currently worn shirt.</summary>
        </member>
        <member name="M:StardewValley.Farmer.GetPantsColor">
            <summary>Get the color of the currently worn pants.</summary>
        </member>
        <member name="M:StardewValley.Farmer.Equip``1(``0,Netcode.NetRef{``0})">
            <summary>Put an item into an equipment slot with appropriate updates (e.g. calling <see cref="M:StardewValley.Item.onEquip(StardewValley.Farmer)"/> or <see cref="M:StardewValley.Item.onUnequip(StardewValley.Farmer)"/>).</summary>
            <typeparam name="TItem">The item type.</typeparam>
            <param name="newItem">The item to place in the equipment slot, or <c>null</c> to just unequip the old item.</param>
            <param name="slot">The equipment slot to update.</param>
            <returns>Returns the item that was previously in the equipment slot, or <c>null</c> if it was empty.</returns>
        </member>
        <member name="M:StardewValley.Farmer.Equip``1(``0,``0,System.Action{``0})">
            <summary>Place an item into an equipment slot manually with appropriate updates (e.g. calling <see cref="M:StardewValley.Item.onEquip(StardewValley.Farmer)"/> or <see cref="M:StardewValley.Item.onUnequip(StardewValley.Farmer)"/>).</summary>
            <typeparam name="TItem">The item type.</typeparam>
            <param name="oldItem">The item previously in the equipment slot, or <c>null</c> if it was empty.</param>
            <param name="newItem">The item to place in the equipment slot, or <c>null</c> to just unequip the old item.</param>
            <param name="equip">A callback which equips an item in the slot.</param>
            <remarks>Most code should use <see cref="M:StardewValley.Farmer.Equip``1(``0,Netcode.NetRef{``0})"/> instead. When calling this form, you should call <see cref="M:StardewValley.Item.onDetachedFromParent"/> on the old/new items as needed to avoid warnings.</remarks>
        </member>
        <member name="M:StardewValley.Farmer.IsBusyDoingSomething">
            <summary>Get whether the player is engaged in any action and shouldn't be interrupted. This includes viewing a menu or event, fading to black, warping, using a tool, etc. If this returns false, we should be free to interrupt the player.</summary>
        </member>
        <member name="M:StardewValley.Farmer.addQuest(System.String)">
            <summary>Add a quest to the player's quest log, or log a warning if it doesn't exist.</summary>
            <param name="questId">The quest ID in <c>Data/Quests</c>.</param>
        </member>
        <member name="M:StardewValley.Farmer.getProfessionForSkill(System.Int32,System.Int32)">
             <summary>
            
             </summary>
             <param name="skillType">e.g. farming, fishing, foraging</param>
             <param name="skillLevel">5 or 10</param>
             <returns></returns>
        </member>
        <member name="M:StardewValley.Farmer.MovePositionImpl(System.Int32,System.Single,System.Single,Microsoft.Xna.Framework.GameTime,xTile.Dimensions.Rectangle)">
            <summary>Handle a player's movement in a specific direction, after the game has already checked whether movement is allowed.</summary>
            <param name="direction">The direction the player is moving in, matching a constant like <see cref="F:StardewValley.Game1.up"/>.</param>
            <param name="movementSpeedX">The player's movement speed along the X axis for this direction.</param>
            <param name="movementSpeedY">The player's movement speed along the Y axis for this direction.</param>
            <param name="time">The elapsed game time.</param>
            <param name="viewport">The pixel area being viewed relative to the top-left corner of the map.</param>
            <returns>Returns whether the movement was fully handled (e.g. a warp was activated), so no further movement logic should be applied.</returns>
        </member>
        <member name="M:StardewValley.Farmer.DrawShadow(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.FarmerSprite.owner">
            <summary>The farmer who uses this sprite.</summary>
        </member>
        <member name="P:StardewValley.FarmerSprite.Owner">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.FarmerSprite.SetOwner(StardewValley.Character)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.FarmerTeam.GlobalInventoryId_JunimoChest">
            <summary>The unique ID in <see cref="F:StardewValley.FarmerTeam.globalInventories"/> for Junimo chests.</summary>
        </member>
        <member name="F:StardewValley.FarmerTeam.itemsToRemoveOvernight">
            <summary>The unqualified item IDs to remove everywhere in the world when the current day ends.</summary>
        </member>
        <member name="F:StardewValley.FarmerTeam.mailToRemoveOvernight">
            <summary>The mail IDs to remove from all players when the current day ends.</summary>
        </member>
        <member name="F:StardewValley.FarmerTeam.broadcastedMail">
            <summary>The mail IDs that have been broadcast globally.</summary>
        </member>
        <member name="F:StardewValley.FarmerTeam.constructedBuildings">
            <summary>The building type IDs which have been constructed.</summary>
        </member>
        <member name="F:StardewValley.FarmerTeam.completedSpecialOrders">
            <summary>The special order IDs which were previously completed.</summary>
        </member>
        <member name="F:StardewValley.FarmerTeam.specialOrders">
            <summary>The special orders which are currently active.</summary>
        </member>
        <member name="F:StardewValley.FarmerTeam.availableSpecialOrders">
            <summary>The special orders which are currently available to choose from, across all special order boards.</summary>
        </member>
        <member name="F:StardewValley.FarmerTeam.acceptedSpecialOrderTypes">
            <summary>The order board types for the active special order.</summary>
        </member>
        <member name="F:StardewValley.FarmerTeam.chestHit">
            <summary>The synchronizer that prevents race conditions when multiplayer players hit a chest.</summary>
        </member>
        <member name="F:StardewValley.FarmerTeam.globalInventories">
             <summary>The global inventories for special containers like Junimo chests.</summary>
             <remarks>
               <para>The vanilla keys have constants like <see cref="F:StardewValley.FarmerTeam.GlobalInventoryId_JunimoChest"/>.</para>
            
               <para>Most code should call <see cref="M:StardewValley.FarmerTeam.GetOrCreateGlobalInventory(System.String)"/> instead of accessing this field directly.</para>
             </remarks>
        </member>
        <member name="F:StardewValley.FarmerTeam.globalInventoryMutexes">
            <summary>The mutexes which prevent multiple players from opening the same global inventory at once.</summary>
        </member>
        <member name="F:StardewValley.FarmerTeam.kickOutOfMinesEvent">
            <summary>An event raised when a mine area needs to kick players.</summary>
        </member>
        <member name="F:StardewValley.FarmerTeam.buildingConstructedEvent">
            <summary>An event raised when a building is placed.</summary>
        </member>
        <member name="F:StardewValley.FarmerTeam.buildingMovedEvent">
            <summary>An event raised when a building is moved.</summary>
        </member>
        <member name="F:StardewValley.FarmerTeam.buildingDemolishedEvent">
            <summary>An event raised when a building is demolished.</summary>
        </member>
        <member name="F:StardewValley.FarmerTeam.requestNutDrop">
            <summary>An event raised when a nut should be dropped.</summary>
        </member>
        <member name="F:StardewValley.FarmerTeam.requestSetSimpleFlag">
            <summary>An event raised when an action needs to set a simple flag (e.g. event seen or song heard) for a group of players.</summary>
        </member>
        <member name="F:StardewValley.FarmerTeam.requestSetMail">
            <summary>An event raised to add or remove mail for a group of players.</summary>
        </member>
        <member name="F:StardewValley.FarmerTeam.useLegacyRandom">
            <summary>When the game makes a random choice, whether to use a simpler method that's prone to repeating patterns.</summary>
            <remarks>This is mainly intended for speedrunning, where full randomization might be undesirable. Most code should use <see cref="P:StardewValley.Game1.UseLegacyRandom"/> instead.</remarks>
        </member>
        <member name="F:StardewValley.FarmerTeam.highestCalicoEggRatingToday">
            <summary>The highest Calico Egg Rating reached by any player today.</summary>
        </member>
        <member name="F:StardewValley.FarmerTeam.calicoStatueEffects">
            <summary>The Calico Statue effects currently applied, where the key is an effect ID like <see cref="!:DesertFestival.CALICO_STATUE_BAT_INVASION"/> and the key is the number of that effect currently applied.</summary>
        </member>
        <member name="M:StardewValley.FarmerTeam.OnKickOutOfMinesEvent(System.Int32)">
            <summary>Kick the player out of a mine area.</summary>
            <param name="mineshaftType">The type of mine from which to kick players, or <see cref="F:StardewValley.Locations.MineShaft.bottomOfMineLevel"/> for any area in the regular mines.</param>
        </member>
        <member name="M:StardewValley.FarmerTeam.AddSpecialOrder(System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>Add a special order to the player team if it's not already active, or log a warning if it doesn't exist.</summary>
            <param name="id">The special order ID in <c>Data/SpecialOrders</c>.</param>
            <param name="generationSeed">The seed to use for randomizing the special order, or <c>null</c> for a random seed.</param>
            <param name="forceRepeatable">Whether to consider the special order repeatable regardless of <see cref="F:StardewValley.GameData.SpecialOrders.SpecialOrderData.Repeatable"/>.</param>
        </member>
        <member name="M:StardewValley.FarmerTeam.RequestLimitedNutDrops(System.String,StardewValley.GameLocation,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Request a nut drop that only happens a set number of times.</summary>
            <param name="key">The key for the limited pool of nut drops.</param>
            <param name="location">The location where the nut will be dropped.</param>
            <param name="x">The x component of the coordinate where we will drop the nut in <paramref name="location" />.</param>
            <param name="y">The y component of the coordinate where we will drop the nut in <paramref name="location" />.</param>
            <param name="limit">The max amount of nuts that should be dropped from the pool specified by <paramref name="key" />.</param>
            <param name="rewardAmount">The amount of nuts that should be dropped. Defaults to 1.</param>
        </member>
        <member name="M:StardewValley.FarmerTeam.RequestSetSimpleFlag(StardewValley.Network.NetEvents.SimpleFlagType,StardewValley.Network.NetEvents.PlayerActionTarget,System.String,System.Boolean,System.Nullable{System.Int64})">
            <summary>Sends a request to set or unset a simple flag for a group of players.</summary>
            <param name="flag">The flag type to set for the players.</param>
            <param name="target">The players for which to perform the action.</param>
            <param name="flagId">The flag ID to update.</param>
            <param name="flagState">The flag state to set.</param>
            <param name="onlyPlayerId">The specific player ID to apply this event to, or <c>null</c> to apply it to all players matching <paramref name="target"/>.</param>
        </member>
        <member name="M:StardewValley.FarmerTeam.RequestSetMail(StardewValley.Network.NetEvents.PlayerActionTarget,System.String,StardewValley.Network.NetEvents.MailType,System.Boolean,System.Nullable{System.Int64})">
            <summary>Sends a request to add mail for a group of players.</summary>
            <param name="playerTarget">The players to update.</param>
            <param name="mailId">The mail to add.</param>
            <param name="mailType">When the mail should be received.</param>
            <param name="add">Whether to add the mail; else it'll be removed.</param>
            <param name="onlyPlayerId">The specific player ID to apply this event to, or <c>null</c> to apply it to all players matching <paramref name="playerTarget"/>.</param>
        </member>
        <member name="M:StardewValley.FarmerTeam.SendBuildingConstructedEvent(StardewValley.GameLocation,StardewValley.Buildings.Building,StardewValley.Farmer)">
            <summary>Notify all players that a building has been constructed.</summary>
            <param name="location">The location containing the building.</param>
            <param name="building">The building that was constructed.</param>
            <param name="who">The player that constructed the building.</param>
            <remarks>This is received via <see cref="M:StardewValley.FarmerTeam.OnBuildingConstructedEvent(System.IO.BinaryReader)"/> on all players, including the one who sent it.</remarks>
        </member>
        <member name="M:StardewValley.FarmerTeam.OnBuildingConstructedEvent(System.IO.BinaryReader)">
            <summary>Receive an event indicating that a building has been constructed.</summary>
            <param name="reader">The event argument reader.</param>
            <remarks>This receives an event sent via <see cref="M:StardewValley.FarmerTeam.SendBuildingConstructedEvent(StardewValley.GameLocation,StardewValley.Buildings.Building,StardewValley.Farmer)"/>.</remarks>
        </member>
        <member name="M:StardewValley.FarmerTeam.SendBuildingMovedEvent(StardewValley.GameLocation,StardewValley.Buildings.Building)">
            <summary>Notify all players that a building has been moved.</summary>
            <param name="location">The location containing the building.</param>
            <param name="building">The building that was moved.</param>
            <remarks>This is received via <see cref="M:StardewValley.FarmerTeam.OnBuildingMovedEvent(System.IO.BinaryReader)"/> on all players, including the one who sent it.</remarks>
        </member>
        <member name="M:StardewValley.FarmerTeam.OnBuildingMovedEvent(System.IO.BinaryReader)">
            <summary>Receive an event indicating that a building has been moved.</summary>
            <param name="reader">The event argument reader.</param>
            <remarks>This receives an event sent via <see cref="M:StardewValley.FarmerTeam.SendBuildingMovedEvent(StardewValley.GameLocation,StardewValley.Buildings.Building)"/>.</remarks>
        </member>
        <member name="M:StardewValley.FarmerTeam.SendBuildingDemolishedEvent(StardewValley.GameLocation,StardewValley.Buildings.Building)">
            <summary>Notify all players that a building has been demolished.</summary>
            <param name="location">The location containing the building.</param>
            <param name="building">The building that was demolished.</param>
            <remarks>This is received via <see cref="M:StardewValley.FarmerTeam.OnBuildingDemolishedEvent(System.IO.BinaryReader)"/> on all players, including the one who sent it.</remarks>
        </member>
        <member name="M:StardewValley.FarmerTeam.OnBuildingDemolishedEvent(System.IO.BinaryReader)">
            <summary>Receive an event indicating that a building has been demolished.</summary>
            <param name="reader">The event argument reader.</param>
            <remarks>This receives an event sent via <see cref="M:StardewValley.FarmerTeam.SendBuildingDemolishedEvent(StardewValley.GameLocation,StardewValley.Buildings.Building)"/>.</remarks>
        </member>
        <member name="M:StardewValley.FarmerTeam.DeleteFarmhand(StardewValley.Farmer)">
            <summary>Fully remove a farmhand player from the save. This will permanently remove their data if the game is saved.</summary>
            <param name="farmhand">The player to delete.</param>
        </member>
        <member name="M:StardewValley.FarmerTeam.GetOrCreateGlobalInventory(System.String)">
            <summary>Get a global inventory from <see cref="F:StardewValley.FarmerTeam.globalInventories"/>, creating it if needed.</summary>
            <param name="id">The inventory ID to get, usually matching a constant like <see cref="F:StardewValley.FarmerTeam.GlobalInventoryId_JunimoChest"/>.</param>
        </member>
        <member name="M:StardewValley.FarmerTeam.GetOrCreateGlobalInventoryMutex(System.String)">
            <summary>Get the mutex which restricts access to a global inventory, creating it if needed.</summary>
            <param name="id">The inventory ID to get, usually matching a constant like <see cref="F:StardewValley.FarmerTeam.GlobalInventoryId_JunimoChest"/>.</param>
        </member>
        <member name="M:StardewValley.FarmerTeam.RequestPlayerAction``1(``0,Netcode.NetEvent1{``0})">
            <summary>Synchronizes a request to perform an action on a group of players.</summary>
            <param name="request">The data of the requested action to synchronize.</param>
            <param name="event">The net event used to send the synchronization data.</param>
        </member>
        <member name="M:StardewValley.FarmerTeam.OnRequestPlayerAction(StardewValley.Network.NetEvents.BasePlayerActionRequest)">
            <summary>Handles a request to perform an action on a group of players.</summary>
            <param name="request">The arguments for the event.</param>
        </member>
        <member name="T:StardewValley.Game1">
            <summary>
            This is the main type for your game
            </summary>
        </member>
        <member name="F:StardewValley.Game1.cursor_none">
            <summary>For <see cref="F:StardewValley.Game1.mouseCursor"/>, a value indicating the cursor should be hidden.</summary>
        </member>
        <member name="F:StardewValley.Game1.cursor_default">
            <summary>For <see cref="F:StardewValley.Game1.mouseCursor"/>, a default pointer icon.</summary>
        </member>
        <member name="F:StardewValley.Game1.cursor_wait">
            <summary>For <see cref="F:StardewValley.Game1.mouseCursor"/>, a wait icon.</summary>
        </member>
        <member name="F:StardewValley.Game1.cursor_grab">
            <summary>For <see cref="F:StardewValley.Game1.mouseCursor"/>, a hand icon indicating that an item can be picked up.</summary>
        </member>
        <member name="F:StardewValley.Game1.cursor_gift">
            <summary>For <see cref="F:StardewValley.Game1.mouseCursor"/>, a gift box icon indicating that an NPC on this tile can accept a gift.</summary>
        </member>
        <member name="F:StardewValley.Game1.cursor_talk">
            <summary>For <see cref="F:StardewValley.Game1.mouseCursor"/>, a speech bubble icon indicating that an NPC can be talked to.</summary>
        </member>
        <member name="F:StardewValley.Game1.cursor_look">
            <summary>For <see cref="F:StardewValley.Game1.mouseCursor"/>, a magnifying glass icon indicating that something can be examined.</summary>
        </member>
        <member name="F:StardewValley.Game1.cursor_harvest">
            <summary>For <see cref="F:StardewValley.Game1.mouseCursor"/>, an icon indicating that something can be harvested.</summary>
        </member>
        <member name="F:StardewValley.Game1.cursor_gamepad_pointer">
            <summary>For <see cref="F:StardewValley.Game1.mouseCursor"/>, a pointer icon used when hovering elements with gamepad controls.</summary>
        </member>
        <member name="F:StardewValley.Game1.builder_robin">
            <summary>The builder name for Robin's carpenter shop.</summary>
        </member>
        <member name="F:StardewValley.Game1.builder_wizard">
            <summary>The builder name for Wizard's magical construction shop.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_adventurersGuild">
            <summary>The shop ID for the Adventurer's Guild shop.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_adventurersGuildItemRecovery">
            <summary>The shop ID for the Adventurer's Guild item recovery shop.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_animalSupplies">
            <summary>The shop ID for Marnie's animal supply shop.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_blacksmith">
            <summary>The shop ID for Clint's blacksmithery.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_blacksmithUpgrades">
            <summary>The shop ID for Clint's tool upgrade shop.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_boxOffice">
            <summary>The shop ID for the movie theater box office.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_catalogue">
            <summary>The 'shop' ID for the floorpaper/wallpaper catalogue.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_carpenter">
            <summary>The shop ID for Robin's carpenter supplies.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_casino">
            <summary>The shop ID for the casino club shop.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_desertTrader">
            <summary>The shop ID for the desert trader.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_dwarf">
            <summary>The shop ID for Dwarf's shop.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_fish">
            <summary>The shop ID for Willy's fish shop.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_furnitureCatalogue">
            <summary>The 'shop' ID for the furniture catalogue.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_generalStore">
            <summary>The shop ID for Pierre's General Store.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_hatMouse">
            <summary>The shop ID for the Hat Mouse shop.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_hospital">
            <summary>The shop ID for Harvey's clinic.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_iceCreamStand">
            <summary>The shop ID for the ice-cream stand.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_islandTrader">
            <summary>The shop ID for the island trader.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_jojaMart">
            <summary>The shop ID for Joja Mart.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_krobus">
            <summary>The shop ID for Krobus' shop.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_qiGemShop">
            <summary>The shop ID for Qi's gem shop.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_resortBar">
            <summary>The shop ID for the Ginger Island resort bar.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_sandy">
            <summary>The shop ID for Sandy's Oasis.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_saloon">
            <summary>The shop ID for the Stardrop Saloon.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_travelingCart">
            <summary>The shop ID for the traveling cart shop.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_volcanoShop">
            <summary>The shop ID for the Volcano Dungeon shop.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_bookseller">
            <summary>The shop ID for the bookseller.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_bookseller_trade">
            <summary>The shop ID for the bookseller trade-ins.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_jojaCatalogue">
            <summary>The 'shop' ID for the joja furniture catalogue.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_wizardCatalogue">
            <summary>The 'shop' ID for the wizard furniture catalogue.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_junimoCatalogue">
            <summary>The 'shop' ID for the wizard furniture catalogue.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_retroCatalogue">
            <summary>The 'shop' ID for the wizard furniture catalogue.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_trashCatalogue">
            <summary>The 'shop' ID for the wizard furniture catalogue.</summary>
        </member>
        <member name="F:StardewValley.Game1.shop_petAdoption">
            <summary>The shop ID for Marnie's pet adoption shop.</summary>
        </member>
        <member name="F:StardewValley.Game1.GameAssemblyName">
            <summary>The name of the game's main assembly.</summary>
        </member>
        <member name="F:StardewValley.Game1.version">
             <summary>The semantic game version, like <c>1.6.0</c>.</summary>
             <remarks>
               <para>
                 This mostly follows semantic versioning format with three or four numbers (without leading zeros), so
                 1.6.7 comes before 1.6.10. The first three numbers are consistent across all platforms, while some
                 platforms may add a fourth number for the port version. This doesn't include tags like <c>-alpha</c>
                 or <c>-beta</c>; see <see cref="F:StardewValley.Game1.versionLabel"/> or <see cref="M:StardewValley.Game1.GetVersionString"/> for that.
               </para>
            
               <para>Game versions can be compared using <see cref="M:StardewValley.Utility.CompareGameVersions(System.String,System.String,System.Boolean)"/>.</para>
             </remarks>
        </member>
        <member name="F:StardewValley.Game1.versionLabel">
            <summary>A human-readable label for the update, like 'modding update' or 'hotfix #3', if any.</summary>
        </member>
        <member name="F:StardewValley.Game1.versionBuildNumber">
            <summary>The game build number used to distinguish different builds with the same version number, like <c>26055</c>.</summary>
            <remarks>This value is platform-dependent.</remarks>
        </member>
        <member name="M:StardewValley.Game1.GetVersionString">
            <summary>Get a human-readable game version which includes the <see cref="F:StardewValley.Game1.version"/>, <see cref="F:StardewValley.Game1.versionLabel"/>, and <see cref="F:StardewValley.Game1.versionBuildNumber"/>.</summary>
        </member>
        <member name="F:StardewValley.Game1.xTileContent">
            <summary>
            ContentManager specifically for loading xTile.Map(s).
            Will be unloaded when returning to title.
            </summary>
        </member>
        <member name="F:StardewValley.Game1.morningQueue">
            <summary>Actions that are called after waking up in the morning. These aren't saved, so they're only use for "fluff".</summary>
        </member>
        <member name="F:StardewValley.Game1.hasStartedDay">
            <summary>Whether <see cref="M:StardewValley.Game1.OnDayStarted"/> has been called at least once since this save was loaded or joined.</summary>
        </member>
        <member name="F:StardewValley.Game1.eventsSeenSinceLastLocationChange">
            <summary>The event IDs which the current player has seen since entering the location.</summary>
        </member>
        <member name="F:StardewValley.Game1._isGreenRain">
            <summary>Internal state that tracks whether today's weather state is a green rain day.</summary>
        </member>
        <member name="F:StardewValley.Game1.wasGreenRain">
            <summary>Whether today's weather state was green rain at any point.</summary>
        </member>
        <member name="P:StardewValley.Game1.isGreenRain">
            <summary>Whether today's weather state is a green rain day.</summary>
        </member>
        <member name="F:StardewValley.Game1.greenRainNeedsCleanup">
            <summary>Whether the locations affected by green rain still need cleanup. This should only be set by <see cref="M:StardewValley.Game1._newDayAfterFade" />.</summary>
        </member>
        <member name="F:StardewValley.Game1.debrisWeatherSeason">
            <summary>The season for which the debris weather fields like <see cref="F:StardewValley.Game1.debrisWeather"/> were last generated.</summary>
        </member>
        <member name="P:StardewValley.Game1.UseLegacyRandom">
            <summary>When the game makes a random choice, whether to use a simpler method that's prone to repeating patterns.</summary>
            <remarks>This is mainly intended for speedrunning, where full randomization might be undesirable.</remarks>
        </member>
        <member name="F:StardewValley.Game1.season">
            <summary>The current season of the year.</summary>
        </member>
        <member name="P:StardewValley.Game1.currentSeason">
            <summary>The current season of the year as a string (one of <c>spring</c>, <c>summer</c>, <c>fall</c>, or <c>winter</c>).</summary>
            <remarks>Most code should use <see cref="F:StardewValley.Game1.season"/> instead.</remarks>
        </member>
        <member name="P:StardewValley.Game1.seasonIndex">
            <summary>The current season of the year as a numeric index.</summary>
            <remarks>Most code should use <see cref="F:StardewValley.Game1.season"/> instead.</remarks>
        </member>
        <member name="P:StardewValley.Game1.mailbox">
            <inheritdoc cref="F:StardewValley.Farmer.mailbox"/>
        </member>
        <member name="F:StardewValley.Game1.random">
            <summary>A default random number generator used for a wide variety of randomization in the game. This provides non-repeatable randomization (e.g. reloading the save will produce different results).</summary>
        </member>
        <member name="F:StardewValley.Game1.achievements">
            <summary>The cached data for achievements from <c>Data/Achievements</c>.</summary>
        </member>
        <member name="F:StardewValley.Game1.bigCraftableData">
            <summary>The cached data for <see cref="F:StardewValley.ItemRegistry.type_bigCraftable"/>-type items from <c>Data/BigCraftables</c>.</summary>
        </member>
        <member name="F:StardewValley.Game1.buildingData">
            <summary>The cached data for buildings from <c>Data/Buildings</c>.</summary>
        </member>
        <member name="F:StardewValley.Game1.characterData">
            <summary>The cached data for NPCs from <c>Data/Characters</c>.</summary>
        </member>
        <member name="F:StardewValley.Game1.cropData">
            <summary>The cached data for crops from <c>Data/Crops</c>.</summary>
        </member>
        <member name="F:StardewValley.Game1.farmAnimalData">
            <summary>The cached data for farm animals from <c>Data/FarmAnimals</c>.</summary>
        </member>
        <member name="F:StardewValley.Game1.floorPathData">
            <summary>The cached data for flooring and path items from <c>Data/FloorsAndPaths</c>.</summary>
        </member>
        <member name="F:StardewValley.Game1.fruitTreeData">
            <summary>The cached data for fruit trees from <c>Data/FruitTrees</c>.</summary>
        </member>
        <member name="F:StardewValley.Game1.jukeboxTrackData">
            <summary>The cached data for jukebox tracks from <c>Data/JukeboxTracks</c>.</summary>
        </member>
        <member name="F:StardewValley.Game1.locationContextData">
            <summary>The cached data for location contexts from <c>Data/LocationContexts</c>.</summary>
        </member>
        <member name="F:StardewValley.Game1.objectData">
            <summary>The cached data for <see cref="F:StardewValley.ItemRegistry.type_object"/>-type items from <c>Data/Objects</c>.</summary>
        </member>
        <member name="F:StardewValley.Game1.pantsData">
            <summary>The cached data for <see cref="F:StardewValley.ItemRegistry.type_pants"/>-type items from <c>Data/Pants</c>.</summary>
        </member>
        <member name="F:StardewValley.Game1.petData">
            <summary>The cached data for pets from <c>Data/Pets</c>.</summary>
        </member>
        <member name="F:StardewValley.Game1.shirtData">
            <summary>The cached data for <see cref="F:StardewValley.ItemRegistry.type_shirt"/>-type items from <c>Data/Shirts</c>.</summary>
        </member>
        <member name="F:StardewValley.Game1.toolData">
            <summary>The cached data for <see cref="F:StardewValley.ItemRegistry.type_tool"/>-type items from <c>Data/Tools</c>.</summary>
        </member>
        <member name="F:StardewValley.Game1.weaponData">
            <summary>The cached data for <see cref="F:StardewValley.ItemRegistry.type_weapon"/>-type items from <c>Data/Weapons</c>.</summary>
        </member>
        <member name="F:StardewValley.Game1.loopingLocationCues">
            <summary>The audio cues for the current location which are continuously looping until they're stopped.</summary>
        </member>
        <member name="F:StardewValley.Game1.sounds">
            <summary>Encapsulates the game logic for playing sound effects (excluding music and background ambience).</summary>
        </member>
        <member name="P:StardewValley.Game1.gameModeTicks">
            <summary>The number of ticks since <see cref="P:StardewValley.Game1.gameMode"/> changed.</summary>
        </member>
        <member name="F:StardewValley.Game1.log">
            <summary>Handles writing game messages to the log output.</summary>
        </member>
        <member name="F:StardewValley.Game1.hash">
            <summary>Combines hash codes in a deterministic way that's consistent between both sessions and players.</summary>
        </member>
        <member name="P:StardewValley.Game1.questOfTheDay">
            <summary>The daily quest that's shown on the billboard, if any.</summary>
        </member>
        <member name="F:StardewValley.Game1.textShadowColor">
            <summary>The default color for shadows drawn under text.</summary>
        </member>
        <member name="F:StardewValley.Game1.textShadowDarkerColor">
            <summary>A darker version of <see cref="F:StardewValley.Game1.textShadowColor"/> used in some cases.</summary>
        </member>
        <member name="P:StardewValley.Game1.activeClickableMenu">
            <summary>The menu which is currently handling player interactions (e.g. a letter viewer, dialogue box, inventory, etc).</summary>
            <remarks>See also <see cref="F:StardewValley.Game1.nextClickableMenu"/>, <see cref="F:StardewValley.Game1.onScreenMenus"/>, and <see cref="F:StardewValley.Game1.overlayMenu"/>.</remarks>
        </member>
        <member name="F:StardewValley.Game1.nextClickableMenu">
            <summary>The queue of menus to open when the <see cref="P:StardewValley.Game1.activeClickableMenu"/> is closed.</summary>
            <remarks>See also <see cref="P:StardewValley.Game1.activeClickableMenu"/>, <see cref="F:StardewValley.Game1.onScreenMenus"/>, and <see cref="F:StardewValley.Game1.overlayMenu"/>.</remarks>
        </member>
        <member name="F:StardewValley.Game1.actionsWhenPlayerFree">
            <summary>A queue of actions to perform when <see cref="M:StardewValley.Farmer.IsBusyDoingSomething"/> is false.</summary>
            <remarks>Most code should call <see cref="M:StardewValley.Game1.PerformActionWhenPlayerFree(System.Action)"/> instead of using this field directly.</remarks>
        </member>
        <member name="M:StardewValley.Game1.RefreshQuestOfTheDay">
            <summary>Reset the <see cref="P:StardewValley.Game1.questOfTheDay"/> for today and synchronize it to other player. In multiplayer, this can only be called on the host instance.</summary>
        </member>
        <member name="F:StardewValley.Game1.farmEventOverride">
            <summary>The farm event to play next, if a regular farm event doesn't play via <see cref="F:StardewValley.Game1.farmEvent"/> instead.</summary>
            <remarks>This is set via the <see cref="M:StardewValley.DebugCommands.DefaultHandlers.SetFarmEvent(System.String[],StardewValley.Logging.IGameLogger)"/> debug command.</remarks>
        </member>
        <member name="F:StardewValley.Game1.netReady">
            <summary>Manages and synchronizes ready checks, which ensure all players are ready before proceeding (e.g. before sleeping).</summary>
        </member>
        <member name="P:StardewValley.Game1.IsMultiplayer">
            <summary>Whether the game is currently in multiplayer mode with at least one other player connected.</summary>
        </member>
        <member name="P:StardewValley.Game1.IsClient">
            <summary>Whether this game instance is a farmhand connected to a remote host in multiplayer.</summary>
        </member>
        <member name="P:StardewValley.Game1.IsServer">
            <summary>Whether this game instance is the host in multiplayer.</summary>
        </member>
        <member name="P:StardewValley.Game1.IsMasterGame">
            <summary>Whether this game instance is the main or host player.</summary>
        </member>
        <member name="P:StardewValley.Game1.MasterPlayer">
            <summary>The main or host player instance.</summary>
        </member>
        <member name="M:StardewValley.Game1.Initialize">
            <summary>
            Allows the game to perform any initialization it needs to before starting to run.
            This is where it can query for any required services and load any non-graphic
            related content.  Calling base.Initialize will enumerate through any components
            and initialize them as well.
            </summary>
        </member>
        <member name="M:StardewValley.Game1.LoadContent">
            <summary>LoadContent will be called once per game and is the place to load all of your content.</summary>
        </member>
        <member name="M:StardewValley.Game1.playSound(System.String,System.Nullable{System.Int32})">
            <summary>Play a game sound for the local player.</summary>
            <param name="cueName">The sound ID to play.</param>
            <param name="pitch">The pitch modifier to apply, or <c>null</c> for the default pitch.</param>
            <returns>Returns whether the cue exists and was started successfully.</returns>
            <remarks>To play audio in a specific location, see <see cref="M:StardewValley.GameLocation.playSound(System.String,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Int32},StardewValley.Audio.SoundContext)"/> or <see cref="M:StardewValley.GameLocation.localSound(System.String,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Int32},StardewValley.Audio.SoundContext)"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.Game1.playSound(System.String,StardewValley.ICue@)">
            <summary>Play a game sound for the local player.</summary>
            <param name="cueName">The sound ID to play.</param>
            <param name="cue">The cue instance that was started, or a no-op cue if it failed.</param>
            <returns>Returns whether the cue exists and was started successfully.</returns>
            <remarks>To play audio in a specific location, see <see cref="M:StardewValley.GameLocation.playSound(System.String,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Int32},StardewValley.Audio.SoundContext)"/> or <see cref="M:StardewValley.GameLocation.localSound(System.String,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Int32},StardewValley.Audio.SoundContext)"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.Game1.playSound(System.String,System.Int32,StardewValley.ICue@)">
            <summary>Play a game sound for the local player.</summary>
            <param name="cueName">The sound ID to play.</param>
            <param name="pitch">The pitch modifier to apply.</param>
            <param name="cue">The cue instance that was started, or a no-op cue if it failed.</param>
            <returns>Returns whether the cue exists and was started successfully.</returns>
            <remarks>To play audio in a specific location, see <see cref="M:StardewValley.GameLocation.playSound(System.String,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Int32},StardewValley.Audio.SoundContext)"/> or <see cref="M:StardewValley.GameLocation.localSound(System.String,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Int32},StardewValley.Audio.SoundContext)"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.Game1.UnloadContent">
            <summary>
            UnloadContent will be called once per game and is the place to unload
            all content.
            </summary>
        </member>
        <member name="M:StardewValley.Game1._update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Allows the game to run logic such as updating the world,
            checking for collisions, gathering input, and playing audio.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="M:StardewValley.Game1.OnDayStarted">
            <summary>Handle the new day starting after the player saves, loads, or connects.</summary>
        </member>
        <member name="M:StardewValley.Game1.addMorningFluffFunction(System.Action)">
            <summary>Add an action that will be called one second after fully waking up in the morning. This won't be saved, so it should only be used for "fluff" functions like sending multiplayer chat messages, etc.</summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:StardewValley.Game1.IsThereABuildingUnderConstruction(System.String)">
            <summary>Get whether the given NPC is currently constructing a building anywhere in the world.</summary>
            <param name="builder">The NPC constructing the building, usually <see cref="F:StardewValley.Game1.builder_robin"/> or <see cref="F:StardewValley.Game1.builder_wizard"/>.</param>
        </member>
        <member name="M:StardewValley.Game1.GetBuildingUnderConstruction(System.String)">
            <summary>Get the building currently being constructed by a given builder.</summary>
            <param name="builder">The NPC constructing the building, usually <see cref="F:StardewValley.Game1.builder_robin"/> or <see cref="F:StardewValley.Game1.builder_wizard"/>.</param>
        </member>
        <member name="M:StardewValley.Game1.IsBuildingConstructed(System.String)">
            <summary>Get whether a building type was constructed anywhere in the world.</summary>
            <param name="name">The building type's ID in <c>Data/Buildings</c>.</param>
        </member>
        <member name="M:StardewValley.Game1.GetNumberBuildingsConstructed(System.Boolean)">
            <summary>Get the number of buildings of all types constructed anywhere in the world.</summary>
            <param name="includeUnderConstruction">Whether to count buildings that haven't finished construction yet.</param>
        </member>
        <member name="M:StardewValley.Game1.GetNumberBuildingsConstructed(System.String,System.Boolean)">
            <summary>Get the number of buildings of a given type constructed anywhere in the world.</summary>
            <param name="name">The building type's ID in <c>Data/Buildings</c>.</param>
            <param name="includeUnderConstruction">Whether to count buildings that haven't finished construction yet.</param>
        </member>
        <member name="M:StardewValley.Game1.PerformActionWhenPlayerFree(System.Action)">
            <summary>Perform an action when <see cref="M:StardewValley.Farmer.IsBusyDoingSomething"/> becomes false for the current player (or do it immediately if it's already false).</summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:StardewValley.Game1.OnLocationChanged(StardewValley.GameLocation,StardewValley.GameLocation)">
            <summary>Update game state when the current player finishes warping to a new location.</summary>
            <param name="oldLocation">The location which the player just left (or <c>null</c> for the first location after loading the save).</param>
            <param name="newLocation">The location which the player just arrived in.</param>
        </member>
        <member name="M:StardewValley.Game1.UpdateDishOfTheDay">
            <summary>Reset the Saloon's dish of the day.</summary>
        </member>
        <member name="M:StardewValley.Game1.UpdateFarmPerfection">
            <summary>Apply updates overnight if this save has completed perfection.</summary>
            <remarks>See also <see cref="M:StardewValley.Utility.percentGameComplete"/> to check if the save has reached perfection.</remarks>
        </member>
        <member name="M:StardewValley.Game1.IsGreenRainingHere(StardewValley.GameLocation)">
            <summary>Get whether it's green raining in the given location's context (regardless of whether the player is currently indoors and sheltered from the green rain).</summary>
            <param name="location">The location to check, or <c>null</c> to use <see cref="P:StardewValley.Game1.currentLocation"/>.</param>
        </member>
        <member name="M:StardewValley.Game1.IsRainingHere(StardewValley.GameLocation)">
            <summary>Get whether it's raining in the given location's context (regardless of whether the player is currently indoors and sheltered from the rain).</summary>
            <param name="location">The location to check, or <c>null</c> to use <see cref="P:StardewValley.Game1.currentLocation"/>.</param>
        </member>
        <member name="M:StardewValley.Game1.IsLightningHere(StardewValley.GameLocation)">
            <summary>Get whether it's storming in the given location's context (regardless of whether the player is currently indoors and sheltered from the storm).</summary>
            <param name="location">The location to check, or <c>null</c> to use <see cref="P:StardewValley.Game1.currentLocation"/>.</param>
        </member>
        <member name="M:StardewValley.Game1.IsSnowingHere(StardewValley.GameLocation)">
            <summary>Get whether it's snowing in the given location's context (regardless of whether the player is currently indoors and sheltered from the snow).</summary>
            <param name="location">The location to check, or <c>null</c> to use <see cref="P:StardewValley.Game1.currentLocation"/>.</param>
        </member>
        <member name="M:StardewValley.Game1.IsDebrisWeatherHere(StardewValley.GameLocation)">
            <summary>Get whether it's blowing debris like leaves in the given location's context (regardless of whether the player is currently indoors and sheltered from the wind).</summary>
            <param name="location">The location to check, or <c>null</c> to use <see cref="P:StardewValley.Game1.currentLocation"/>.</param>
        </member>
        <member name="M:StardewValley.Game1.setGraphicsForSeason(System.Boolean)">
            <summary>Update the game state when the season changes. Despite the name, this may update more than graphics (e.g. it'll remove grass in winter).</summary>
            <param name="onLoad">Whether the season is being initialized as part of loading the save, instead of an actual in-game season change.</param>
        </member>
        <member name="M:StardewValley.Game1.DrawAnsweringMachineDialogue(StardewValley.NPC,System.String,System.Object[])">
            <summary>Show a dialogue box with text from an NPC's answering machine.</summary>
            <param name="npc">The NPC whose answering machine to display.</param>
            <param name="translationKey">The translation key for the message text.</param>
            <param name="substitutions">The token substitutions for placeholders in the translation text, if any.</param>
        </member>
        <member name="M:StardewValley.Game1.DrawDialogue(StardewValley.NPC,System.String)">
            <summary>Show a dialogue box with text from an NPC.</summary>
            <param name="npc">The NPC whose dialogue to display.</param>
            <param name="translationKey">The translation from which to take the dialogue text, in the form <c>assetName:fieldKey</c> like <c>Strings/UI:Confirm</c>.</param>
        </member>
        <member name="M:StardewValley.Game1.DrawDialogue(StardewValley.NPC,System.String,System.Object[])">
            <summary>Show a dialogue box with text from an NPC.</summary>
            <param name="npc">The NPC whose dialogue to display.</param>
            <param name="translationKey">The translation from which to take the dialogue text, in the form <c>assetName:fieldKey</c> like <c>Strings/UI:Confirm</c>.</param>
            <param name="substitutions">The values with which to replace placeholders like <c>{0}</c> in the loaded text.</param>
        </member>
        <member name="M:StardewValley.Game1.DrawDialogue(StardewValley.Dialogue)">
            <summary>Show a dialogue box with text from an NPC.</summary>
            <param name="dialogue">The dialogue to display.</param>
        </member>
        <member name="P:StardewValley.Game1.IsSummer">
            <summary>Get whether it's summer in the valley.</summary>
            <remarks>See <see cref="M:StardewValley.GameLocation.IsSummerHere"/> to handle local seasons.</remarks>
        </member>
        <member name="P:StardewValley.Game1.IsSpring">
            <summary>Get whether it's spring in the valley.</summary>
            <remarks>See <see cref="M:StardewValley.GameLocation.IsSpringHere"/> to handle local seasons.</remarks>
        </member>
        <member name="P:StardewValley.Game1.IsFall">
            <summary>Get whether it's fall in the valley.</summary>
            <remarks>See <see cref="M:StardewValley.GameLocation.IsFallHere"/> to handle local seasons.</remarks>
        </member>
        <member name="P:StardewValley.Game1.IsWinter">
            <summary>Get whether it's winter in the valley.</summary>
            <remarks>See <see cref="M:StardewValley.GameLocation.IsWinterHere"/> to handle local seasons.</remarks>
        </member>
        <member name="M:StardewValley.Game1.GetCharacterWhere``1(System.Func{``0,System.Boolean},System.Boolean)">
            <summary>Get the first NPC which matches a condition.</summary>
            <typeparam name="T">The expected NPC type.</typeparam>
            <param name="check">The condition to check on each NPC.</param>
            <param name="includeEventActors">Whether to match temporary event actors.</param>
            <returns>Returns the matching NPC if found, else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.Game1.GetCharacterOfType``1(System.Boolean)">
            <summary>Get the first NPC of the given type.</summary>
            <typeparam name="T">The expected NPC type.</typeparam>
            <param name="includeEventActors">Whether to match temporary event actors.</param>
            <returns>Returns the matching NPC if found, else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.Game1.getCharacterFromName``1(System.String,System.Boolean,System.Boolean)">
            <summary>Get an NPC by its name.</summary>
            <typeparam name="T">The expected NPC type.</typeparam>
            <param name="name">The NPC name.</param>
            <param name="mustBeVillager">Whether to only match NPCs which return true for <see cref="P:StardewValley.NPC.IsVillager"/>.</param>
            <param name="includeEventActors">Whether to match temporary event actors.</param>
            <returns>Returns the matching NPC if found, else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.Game1.getCharacterFromName(System.String,System.Boolean,System.Boolean)">
            <summary>Get an NPC by its name.</summary>
            <param name="name">The NPC name.</param>
            <param name="mustBeVillager">Whether to only match NPCs which return true for <see cref="P:StardewValley.NPC.IsVillager"/>.</param>
            <param name="includeEventActors">Whether to match temporary event actors.</param>
            <returns>Returns the matching NPC if found, else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.Game1.RequireCharacter(System.String,System.Boolean)">
            <summary>Get an NPC by its name, or throw an exception if it's not found.</summary>
            <param name="name">The NPC name.</param>
            <param name="mustBeVillager">Whether to only match NPCs which return true for <see cref="P:StardewValley.NPC.IsVillager"/>.</param>
        </member>
        <member name="M:StardewValley.Game1.RequireCharacter``1(System.String,System.Boolean)">
            <summary>Get an NPC by its name, or throw an exception if it's not found.</summary>
            <typeparam name="T">The expected NPC type.</typeparam>
            <param name="name">The NPC name.</param>
            <param name="mustBeVillager">Whether to only match NPCs which return true for <see cref="P:StardewValley.NPC.IsVillager"/>.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">There's no NPC matching the given arguments.</exception>
            <exception cref="T:System.InvalidCastException">The NPC found can't be converted to <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:StardewValley.Game1.RequireLocation(System.String,System.Boolean)">
            <summary>Get a location by its name, or throw an exception if it's not found.</summary>
            <param name="name">The location name.</param>
            <param name="isStructure">Whether the location is an interior structure.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">There's no location matching the given arguments.</exception>
        </member>
        <member name="M:StardewValley.Game1.RequireLocation``1(System.String,System.Boolean)">
            <summary>Get a location by its name, or throw an exception if it's not found.</summary>
            <typeparam name="TLocation">The expected location type.</typeparam>
            <param name="name">The location name.</param>
            <param name="isStructure">Whether the location is an interior structure.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">There's no location matching the given arguments.</exception>
            <exception cref="T:System.InvalidCastException">The location found can't be converted to <typeparamref name="TLocation"/>.</exception>
        </member>
        <member name="M:StardewValley.Game1.getLocationFromName(System.String)">
            <summary>Get a location by its name, or <c>null</c> if it's not found.</summary>
            <param name="name">The location name.</param>
        </member>
        <member name="M:StardewValley.Game1.getLocationFromName(System.String,System.Boolean)">
            <summary>Get a location by its name, or <c>null</c> if it's not found.</summary>
            <param name="name">The location name.</param>
            <param name="isStructure">Whether the location is an interior structure.</param>
        </member>
        <member name="M:StardewValley.Game1.getLocationFromNameInLocationsList(System.String,System.Boolean)">
            <summary>Get a location by its name (ignoring the cache and current location), or <c>null</c> if it's not found.</summary>
            <param name="name">The location name.</param>
            <param name="isStructure">Whether the location is an interior structure.</param>
        </member>
        <member name="M:StardewValley.Game1.GetSeasonForLocation(StardewValley.GameLocation)">
            <summary>Get the season which currently applies to a location.</summary>
            <param name="location">The location to check, or <c>null</c> for the global season.</param>
        </member>
        <member name="M:StardewValley.Game1.GetSeasonIndexForLocation(StardewValley.GameLocation)">
            <summary>Get the season which currently applies to a location as a numeric index.</summary>
            <param name="location">The location to check, or <c>null</c> for the global season.</param>
            <remarks>Most code should use <see cref="M:StardewValley.Game1.GetSeasonForLocation(StardewValley.GameLocation)"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.Game1.GetSeasonKeyForLocation(StardewValley.GameLocation)">
            <summary>Get the season which currently applies to a location as a string.</summary>
            <param name="location">The location to check, or <c>null</c> for the global season.</param>
            <remarks>Most code should use <see cref="M:StardewValley.Game1.GetSeasonForLocation(StardewValley.GameLocation)"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.Game1.getPlatformAchievement(System.String)">
            <summary>Unlock an achievement for the current platform.</summary>
            <param name="which">The achievement to unlock.</param>
        </member>
        <member name="M:StardewValley.Game1.getAllFarmers">
            <summary>Get all players including the host, online farmhands, and offline farmhands.</summary>
        </member>
        <member name="M:StardewValley.Game1.getOnlineFarmers">
            <summary>Get all players who are currently connected, including the host player.</summary>
        </member>
        <member name="M:StardewValley.Game1.getAllFarmhands">
            <summary>Get online and offline farmhands.</summary>
        </member>
        <member name="M:StardewValley.Game1.getOfflineFarmhands">
            <summary>Get farmhands which aren't currently connected.</summary>
        </member>
        <member name="M:StardewValley.Game1.parseDebugInput(System.String,StardewValley.Logging.IGameLogger)">
            <summary>Parse a raw debug command and run it if it's valid.</summary>
            <param name="debugInput">The full debug command, including the command name and arguments.</param>
            <param name="log">The log to which to write command output, or <c>null</c> to use <see cref="F:StardewValley.Game1.log"/>.</param>
            <returns>Returns whether the command was found and executed, regardless of whether the command logic succeeded.</returns>
        </member>
        <member name="M:StardewValley.Game1.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            This is called when the game should draw itself.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="M:StardewValley.Game1.drawWithBorder(System.String,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2)">
            ###########################
            METHODS FOR DRAWING THINGS.
            ############################
        </member>
        <member name="F:StardewValley.Game1.mouseCursor">
            <summary>The cursor icon to show, usually matching a constant like <see cref="F:StardewValley.Game1.cursor_default"/>.</summary>
        </member>
        <member name="M:StardewValley.Game1.GlobalToLocal(xTile.Dimensions.Rectangle,Microsoft.Xna.Framework.Vector2)">
            ####################
            OTHER HELPER METHODS
            ####################
        </member>
        <member name="M:StardewValley.Game1.GetFarmTypeID">
            <summary>Get the internal identifier for the current farm type. This is either the numeric index for a vanilla farm, or the <see cref="F:StardewValley.GameData.ModFarmType.Id"/> field for a custom type.</summary>
        </member>
        <member name="M:StardewValley.Game1.GetFarmTypeKey">
            <summary>Get the human-readable identifier for the current farm type. For a custom farm type, this is equivalent to <see cref="M:StardewValley.Game1.GetFarmTypeID"/>.</summary>
        </member>
        <member name="M:StardewValley.Game1.GetScreenshotFolder(System.Boolean)">
            <summary>Get the absolute path to the folder containing screenshots.</summary>
            <param name="createIfMissing">Whether to create the folder if it doesn't exist already.</param>
        </member>
        <member name="T:StardewValley.GameStateQuery">
            <summary>Resolves game state queries like <c>SEASON spring</c> in data assets.</summary>
            <summary>Resolves game state queries like <c>SEASON spring</c> in data assets.</summary>
        </member>
        <member name="F:StardewValley.GameStateQuery.QueryTypeLookup">
            <summary>The supported game state queries and their resolvers.</summary>
        </member>
        <member name="F:StardewValley.GameStateQuery.Aliases">
            <summary>Alternate names for game state queries (e.g. shorthand or acronyms).</summary>
        </member>
        <member name="F:StardewValley.GameStateQuery.NextClearCacheTick">
            <summary>The <see cref="F:StardewValley.Game1.ticks"/> value when the cache should be reset.</summary>
        </member>
        <member name="F:StardewValley.GameStateQuery.ParseCache">
            <summary>The cache of parsed game state queries.</summary>
        </member>
        <member name="F:StardewValley.GameStateQuery.SeasonQueryKeys">
            <summary>The query keys which check the season, like <c>LOCATION_SEASON</c> or <c>SEASON</c>.</summary>
        </member>
        <member name="F:StardewValley.GameStateQuery.MagicBaitIgnoreQueryKeys">
            <summary>The query keys which are ignored when catching fish with the Magic Bait equipped.</summary>
        </member>
        <member name="M:StardewValley.GameStateQuery.#cctor">
            <summary>Register the default game state queries, defined as <see cref="T:StardewValley.GameStateQuery.DefaultResolvers"/> methods.</summary>
        </member>
        <member name="M:StardewValley.GameStateQuery.Update">
            <summary>Update the game state query tracking.</summary>
        </member>
        <member name="M:StardewValley.GameStateQuery.Exists(System.String)">
            <summary>Get whether a game state query exists.</summary>
            <param name="queryKey">The game state query key, like <c>SEASON</c>.</param>
        </member>
        <member name="M:StardewValley.GameStateQuery.Register(System.String,StardewValley.Delegates.GameStateQueryDelegate)">
            <summary>Register a game state query resolver.</summary>
            <param name="queryKey">The game state query key, like <c>SEASON</c>. This should only contain alphanumeric, underscore, and dot characters. For custom queries, this should be prefixed with your mod ID like <c>Example.ModId_QueryName</c>.</param>
            <param name="queryDelegate">The resolver which returns whether a given query matches in the current context.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="queryKey"/> is null or whitespace-only.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="queryDelegate"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="queryKey"/> is already registered.</exception>
        </member>
        <member name="M:StardewValley.GameStateQuery.RegisterAlias(System.String,System.String)">
            <summary>Register an alternate name for a game state query.</summary>
            <param name="alias">The alias to register. This should only contain alphanumeric, underscore, and dot characters. For custom queries, this should be prefixed with your mod ID like <c>Example.ModId_QueryName</c>.</param>
            <param name="queryKey">The game state query key to map it to, like <c>SEASON</c>. This should already be registered (e.g. via <see cref="M:StardewValley.GameStateQuery.Register(System.String,StardewValley.Delegates.GameStateQueryDelegate)"/>).</param>
            <exception cref="T:System.ArgumentException">The <paramref name="alias"/> or <paramref name="queryKey"/> is null or whitespace-only.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="queryKey"/> is already registered.</exception>
        </member>
        <member name="M:StardewValley.GameStateQuery.CheckConditions(System.String,StardewValley.GameLocation,StardewValley.Farmer,StardewValley.Item,StardewValley.Item,System.Random,System.Collections.Generic.HashSet{System.String})">
            <summary>Get whether a set of game state queries matches in the current context.</summary>
            <param name="queryString">The game state queries to check as a comma-delimited string.</param>
            <param name="location">The location for which to check the query, or <c>null</c> to use the current location.</param>
            <param name="player">The player for which to check the query, or <c>null</c> to use the current player.</param>
            <param name="targetItem">The target item (e.g. machine output or tree fruit) for which to check queries, or <c>null</c> if not applicable.</param>
            <param name="inputItem">The input item (e.g. machine input) for which to check queries, or <c>null</c> if not applicable.</param>
            <param name="random">The RNG to use for randomization, or <c>null</c> to use <see cref="F:StardewValley.Game1.random"/>.</param>
            <param name="ignoreQueryKeys">The query keys to ignore when checking conditions (like <c>LOCATION_SEASON</c>), or <c>null</c> to check all of them.</param>
            <returns>Returns whether the query matches.</returns>
        </member>
        <member name="M:StardewValley.GameStateQuery.CheckConditions(System.String,StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether a set of game state queries matches in the current context.</summary>
            <param name="queryString">The game state queries to check as a comma-delimited string.</param>
            <param name="context">The game state query context.</param>
            <returns>Returns whether the query matches.</returns>
        </member>
        <member name="M:StardewValley.GameStateQuery.IsImmutablyFalse(System.String)">
            <summary>Get whether a game state query can never be true under any circumstance (e.g. <c>FALSE</c> or <c>!TRUE</c>).</summary>
            <param name="queryString">The game state queries to check as a comma-delimited string.</param>
        </member>
        <member name="M:StardewValley.GameStateQuery.IsImmutablyTrue(System.String)">
            <summary>Get whether a game state query can never be false under any circumstance (e.g. <c>TRUE</c>, <c>!FALSE</c>, or empty).</summary>
            <param name="queryString">The game state queries to check as a comma-delimited string.</param>
        </member>
        <member name="M:StardewValley.GameStateQuery.Parse(System.String)">
            <summary>Parse a raw query string into its component query data.</summary>
            <param name="queryString">The query string to parse.</param>
            <returns>Returns the parsed game state queries. This value is cached, so it should not be modified. If any part of the query string is invalid, this returns a single value containing the invalid query with the error property set.</returns>
        </member>
        <member name="M:StardewValley.GameStateQuery.SplitRaw(System.String)">
            <summary>Split a query string into its top-level component queries without parsing them.</summary>
            <param name="queryString">The query string to split.</param>
        </member>
        <member name="T:StardewValley.GameStateQuery.Helpers">
            <summary>The helper methods which simplify implementing custom game state query resolvers.</summary>
        </member>
        <member name="M:StardewValley.GameStateQuery.Helpers.GetLocation(System.String,StardewValley.GameLocation)">
            <summary>Get the location matching a given name.</summary>
            <param name="locationName">The location to check. This can be <c>Here</c> (current location), <c>Target</c> (contextual location), or a location name.</param>
            <param name="contextualLocation">The location for which the query is being checked.</param>
        </member>
        <member name="M:StardewValley.GameStateQuery.Helpers.RequireLocation(System.String,StardewValley.GameLocation)">
            <summary>Get the location matching a given name, or throw an exception if it's not found.</summary>
            <param name="locationName">The location to check. This can be <c>Here</c> (current location), <c>Target</c> (contextual location), or a location name.</param>
            <param name="contextualLocation">The location for which the query is being checked.</param>
        </member>
        <member name="M:StardewValley.GameStateQuery.Helpers.TryGetLocationArg(System.String[],System.Int32,StardewValley.GameLocation@,System.String@)">
            <summary>Try to get a location matching a target location argument.</summary>
            <param name="query">The game state query split by space, including the query key.</param>
            <param name="index">The argument index to read.</param>
            <param name="error">An error phrase indicating why getting the argument failed (like 'required index X not found'), if applicable.</param>
            <param name="location">The contextual location instance, which will be updated if the argument is valid.</param>
        </member>
        <member name="M:StardewValley.GameStateQuery.Helpers.TryGetItemArg(System.String[],System.Int32,StardewValley.Item,StardewValley.Item,StardewValley.Item@,System.String@)">
            <summary>Try to get an item matching an item type argument.</summary>
            <param name="query">The game state query split by space, including the query key.</param>
            <param name="index">The argument index to read.</param>
            <param name="targetItem">The target item (e.g. machine output or tree fruit), or <c>null</c> if not applicable.</param>
            <param name="inputItem">The input item (e.g. machine input), or <c>null</c> if not applicable.</param>
            <param name="error">An error phrase indicating why getting the argument failed (like 'required index X not found'), if applicable.</param>
            <param name="item">The item instance, if valid.</param>
        </member>
        <member name="M:StardewValley.GameStateQuery.Helpers.WithPlayer(StardewValley.Farmer,System.String,System.Func{StardewValley.Farmer,System.Boolean})">
            <summary>Get whether a check applies to the given player or players.</summary>
            <param name="contextualPlayer">The player for which the query is being checked.</param>
            <param name="playerKey">The players to check. This can be <c>Any</c> (at least one player matches), <c>All</c> (every player matches), <c>Current</c> (the current player), <c>Target</c> (the contextual player), <c>Host</c> (the main player), or a player ID.</param>
            <param name="check">The check to perform.</param>
        </member>
        <member name="M:StardewValley.GameStateQuery.Helpers.AnyArgMatches(System.String[],System.Int32,System.Func{System.String,System.Nullable{System.Boolean}})">
            <summary>Get whether any query argument matches a condition.</summary>
            <param name="query">The game state query split by space, including the query key.</param>
            <param name="startAt">The index within <paramref name="query"/> to start iterating.</param>
            <param name="check">Check whether a query argument matches. This should return true (argument matches), false (argument doesn't match, but we can try the remaining arguments), or null (argument caused an error so we should stop iterating).</param>
        </member>
        <member name="M:StardewValley.GameStateQuery.Helpers.ErrorResult(System.String[],System.String,System.Exception)">
            <summary>Log an error indicating that a query couldn't be parsed.</summary>
            <param name="query">The game state query split by space, including the query key.</param>
            <param name="reason">The human-readable reason why the query is invalid.</param>
            <param name="exception">The underlying exception, if applicable.</param>
            <returns>Returns false.</returns>
        </member>
        <member name="M:StardewValley.GameStateQuery.Helpers.PlayerSkillLevelImpl(System.String[],StardewValley.Farmer,System.Func{StardewValley.Farmer,System.Int32})">
            <summary>The common implementation for <c>PLAYER_*_SKILL</c> game state queries.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.Helpers.RandomImpl(System.Random,System.String[],System.Int32)">
            <summary>The common implementation for most <c>RANDOM</c> game state queries.</summary>
            <param name="random">The random instance to use.</param>
            <param name="query">The condition arguments received by the query.</param>
            <param name="skipArguments">The number of arguments to skip. The next argument should be the chance value, followed by an optional <c>@addDailyLuck</c> argument.</param>
        </member>
        <member name="T:StardewValley.GameStateQuery.ParsedGameStateQuery">
            <summary>The cached metadata for a single raw game state query.</summary>
        </member>
        <member name="F:StardewValley.GameStateQuery.ParsedGameStateQuery.Negated">
            <summary>Whether the result should be negated.</summary>
        </member>
        <member name="F:StardewValley.GameStateQuery.ParsedGameStateQuery.Query">
            <summary>The game state query split by space, including the query key.</summary>
        </member>
        <member name="F:StardewValley.GameStateQuery.ParsedGameStateQuery.Resolver">
            <summary>The resolver which handles the game state query.</summary>
        </member>
        <member name="F:StardewValley.GameStateQuery.ParsedGameStateQuery.Error">
            <summary>An error indicating why the query is invalid, if applicable.</summary>
        </member>
        <member name="M:StardewValley.GameStateQuery.ParsedGameStateQuery.#ctor(System.Boolean,System.String[],StardewValley.Delegates.GameStateQueryDelegate,System.String)">
            <summary>Construct an instance.</summary>
            <param name="negated">Whether the result should be negated.</param>
            <param name="query">The game state query split by space, including the query key.</param>
            <param name="resolver">The resolver which handles the game state query.</param>
            <param name="error">An error indicating why parsing the query failed, if applicable.</param>
        </member>
        <member name="M:StardewValley.GameStateQuery.CheckConditionsImpl(System.String,StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether a set of game state queries matches in the current context without short-circuiting immutable values like <c>TRUE</c>.</summary>
            <param name="queryString">The game state queries to check as a comma-delimited string.</param>
            <param name="context">The game state query context.</param>
            <returns>Returns whether the query matches.</returns>
        </member>
        <member name="T:StardewValley.GameStateQuery.DefaultResolvers">
            <summary>The resolvers for vanilla game state queries. Most code should call <see cref="M:StardewValley.GameStateQuery.CheckConditions(System.String,StardewValley.Delegates.GameStateQueryContext)"/> instead of using these directly.</summary>
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.ANY(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether any of the given conditions match.</summary>
            <remarks>The query arguments must be passed as quoted arguments. For example, <c>ANY "SEASON Winter" "SEASON Spring, DAY_OF_WEEK Friday"</c> is true if (a) it's winter or (b) it's a spring Friday.</remarks>
            /// <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.SEASON_DAY(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.DAY_OF_MONTH(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.DAY_OF_WEEK(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.DAYS_PLAYED(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.IS_GREEN_RAIN_DAY(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.IS_FESTIVAL_DAY(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.IS_PASSIVE_FESTIVAL_OPEN(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.IS_PASSIVE_FESTIVAL_TODAY(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.SEASON(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.YEAR(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.TIME(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.IS_EVENT(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.CAN_BUILD_CABIN(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.CAN_BUILD_FOR_CABINS(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.BUILDINGS_CONSTRUCTED(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.FARM_CAVE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.FARM_NAME(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.FARM_TYPE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.FOUND_ALL_LOST_BOOKS(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether all the Lost Books for the library have been found.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.HAS_TARGET_LOCATION(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether an explicit target location is set.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.IS_COMMUNITY_CENTER_COMPLETE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.IS_CUSTOM_FARM_TYPE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.IS_HOST(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.IS_ISLAND_NORTH_BRIDGE_FIXED(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether the <see cref="T:StardewValley.Locations.IslandNorth"/> bridge is fixed.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.IS_JOJA_MART_COMPLETE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.IS_MULTIPLAYER(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.IS_VISITING_ISLAND(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.LOCATION_ACCESSIBLE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.LOCATION_CONTEXT(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.LOCATION_HAS_CUSTOM_FIELD(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether a location has a given value in its <see cref="F:StardewValley.GameData.Locations.LocationData.CustomFields"/> data field. This expects <c>LOCATION_HAS_CUSTOM_FIELD &lt;location&gt; &lt;field key&gt; [expected value]</c>, where omitting the expected value will just check if the field is defined.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.LOCATION_IS_INDOORS(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether a location is indoors.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.LOCATION_IS_OUTDOORS(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether a location is outdoors.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.LOCATION_IS_MINES(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.LOCATION_IS_SKULL_CAVE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.LOCATION_NAME(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.LOCATION_UNIQUE_NAME(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.LOCATION_SEASON(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.MUSEUM_DONATIONS(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether a given number of items have been donated to the museum, optionally filtered by type. Format: <c>MUSEUM_DONATIONS &lt;min count&gt; [max count] [object type]+</c> or <c>MUSEUM_DONATIONS &lt;min count&gt; &lt;max count&gt; [object type]+</c>.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.WEATHER(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.WORLD_STATE_FIELD(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.WORLD_STATE_ID(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.MINE_LOWEST_LEVEL_REACHED(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_COMBAT_LEVEL(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether a player has the given combat level, including any buffs which increase it.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_FARMING_LEVEL(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether a player has the given farming level, including any buffs which increase it.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_FISHING_LEVEL(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether a player has the given fishing level, including any buffs which increase it.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_FORAGING_LEVEL(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether a player has the given foraging level, including any buffs which increase it.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_LUCK_LEVEL(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether a player has the given luck level, including any buffs which increase it.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_MINING_LEVEL(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether a player has the given mining level, including any buffs which increase it.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_CURRENT_MONEY(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_FARMHOUSE_UPGRADE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_GENDER(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_ACHIEVEMENT(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_ALL_ACHIEVEMENTS(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_BUFF(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether a player has a given buff currently active.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_CAUGHT_FISH(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_CONVERSATION_TOPIC(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_CRAFTING_RECIPE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_COOKING_RECIPE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_DIALOGUE_ANSWER(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_HEARD_SONG(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_ITEM(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_MAIL(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_PROFESSION(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_RUN_TRIGGER_ACTION(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_SECRET_NOTE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_SEEN_EVENT(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_TOWN_KEY(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_TRASH_CAN_LEVEL(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_LOCATION_CONTEXT(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_LOCATION_NAME(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_LOCATION_UNIQUE_NAME(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_MOD_DATA(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_MONEY_EARNED(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_SHIPPED_BASIC_ITEM(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_SPECIAL_ORDER_ACTIVE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_SPECIAL_ORDER_RULE_ACTIVE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_SPECIAL_ORDER_COMPLETE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_KILLED_MONSTERS(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Check the number of monsters killed by the player. Format: <c>PLAYER_KILLED_MONSTERS &lt;player&gt; &lt;monster name&gt;+ [min] [max]</c>.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_STAT(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether the given player has a minimum value for a <see cref="P:StardewValley.Game1.stats"/> field returned by <see cref="M:StardewValley.Stats.Get(System.String)"/>.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_VISITED_LOCATION(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether the given player has ever visited a location name.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_FRIENDSHIP_POINTS(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_CHILDREN(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_PET(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HEARTS(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_HAS_MET(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether a player has ever talked to an NPC. Format: <c>PLAYER_HAS_MET &lt;player&gt; &lt;npc&gt;</c>.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_NPC_RELATIONSHIP(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get a player's relationship status with an NPC. Format: <c>PLAYER_NPC_RELATIONSHIP &lt;player&gt; &lt;npc&gt; &lt;type&gt;+</c>, where the type is any combination of 'Friendly', 'Dating', 'Engaged', 'Roommate', 'Married' or 'Divorced'.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_PLAYER_RELATIONSHIP(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get a player's relationship status with another player. Format: <c>PLAYER_PLAYER_RELATIONSHIP &lt;player 1&gt; &lt;player 2&gt; &lt;type&gt;+</c>, where the type is 'Engaged' or 'Married'.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.PLAYER_PREFERRED_PET(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.RANDOM(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.SYNCED_CHOICE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.SYNCED_RANDOM(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.SYNCED_SUMMER_RAIN_RANDOM(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>A custom variant of <see cref="M:StardewValley.GameStateQuery.DefaultResolvers.SYNCED_RANDOM(System.String[],StardewValley.Delegates.GameStateQueryContext)"/> with a set key and which applies a chance boost for each day after summer starts.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.ITEM_CONTEXT_TAG(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether the target item has all of the given context tags.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.ITEM_CATEGORY(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether the target item has one of the given categories.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.ITEM_HAS_EXPLICIT_OBJECT_CATEGORY(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether the item has an explicit category set in <c>Data/Objects</c>, ignoring categories assigned dynamically in code (e.g. for rings). These are often (but not always) special items like Secret Note or unimplemented items like Lumber. This is somewhat specialized.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.ITEM_ID(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether the target item has the given qualified or unqualified item ID.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.ITEM_ID_PREFIX(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether the target item's qualified or unqualified item ID starts with the given prefix.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.ITEM_NUMERIC_ID(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether the target item has a numeric item ID within the given range.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.ITEM_OBJECT_TYPE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether the target item has one of the given object types.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.ITEM_PRICE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether the target item has a price within the given range.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.ITEM_QUALITY(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether the target item has a min quality level.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.ITEM_STACK(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether the target item has a min stack size (ignoring other stacks in the inventory).</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.ITEM_TYPE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether the target item has the given item type.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.ITEM_EDIBILITY(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>Get whether the target item has a min edibility level.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.TRUE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>A condition that always passes.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="M:StardewValley.GameStateQuery.DefaultResolvers.FALSE(System.String[],StardewValley.Delegates.GameStateQueryContext)">
            <summary>A condition that always fails.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.GameStateQueryDelegate" />
        </member>
        <member name="T:StardewValley.Hashing.HashUtility">
            <inheritdoc cref="T:StardewValley.Hashing.IHashUtility" />
        </member>
        <member name="F:StardewValley.Hashing.HashUtility.Hasher">
            <summary>The underlying hashing API.</summary>
        </member>
        <member name="M:StardewValley.Hashing.HashUtility.GetDeterministicHashCode(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Hashing.HashUtility.GetDeterministicHashCode(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Hashing.HashUtility.GetDeterministicHashCode(System.Byte[])">
            <summary>Get a deterministic hash code for a byte data array.</summary>
            <param name="data">The data to hash.</param>
        </member>
        <member name="T:StardewValley.Hashing.IHashUtility">
            <summary>Combines hash codes in a deterministic way that's consistent between both sessions and players.</summary>
            <remarks>This avoids <see cref="M:System.String.GetHashCode"/> and <c>HashCode.Combine</c> which are non-deterministic across sessions or players. That's preferable for actual hashing, but it prevents us from using it as deterministic random seeds.</remarks>
        </member>
        <member name="M:StardewValley.Hashing.IHashUtility.GetDeterministicHashCode(System.String)">
            <summary>Get a deterministic hash code for a string.</summary>
            <param name="value">The string value to hash.</param>
        </member>
        <member name="M:StardewValley.Hashing.IHashUtility.GetDeterministicHashCode(System.Int32[])">
            <summary>Get a deterministic hash code for a set of values.</summary>
            <param name="values">The values to hash.</param>
        </member>
        <member name="F:StardewValley.HouseRenovation.Price">
            <inheritdoc cref="F:StardewValley.GameData.HomeRenovations.HomeRenovation.Price"/>
        </member>
        <member name="F:StardewValley.HouseRenovation.RoomId">
            <inheritdoc cref="F:StardewValley.GameData.HomeRenovations.HomeRenovation.RoomId"/>
        </member>
        <member name="P:StardewValley.HouseRenovation.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.HouseRenovation.QualifiedItemId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.HouseRenovation.sellToStorePrice(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.HouseRenovation.salePrice(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.HouseRenovation.appliesProfitMargins">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.HouseRenovation.actionWhenPurchased(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.HouseRenovation.FixStackSize">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.HouseRenovation.FixQuality">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.HouseRenovation.GetItemTypeId">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.HUDMessage.message">
            <summary>The message text to show.</summary>
        </member>
        <member name="F:StardewValley.HUDMessage.type">
            <summary>A key used to prevent multiple HUD messages from stacking, or <c>null</c> to use the item name.</summary>
        </member>
        <member name="F:StardewValley.HUDMessage.timeLeft">
            <summary>The duration in milliseconds until the message should disappear.</summary>
        </member>
        <member name="F:StardewValley.HUDMessage.transparency">
            <summary>The current opacity, from 0 (fully transparent) to 1 (fully opaque).</summary>
        </member>
        <member name="F:StardewValley.HUDMessage.number">
            <summary>The count of the <see cref="F:StardewValley.HUDMessage.messageSubject"/> that was received, if applicable.</summary>
        </member>
        <member name="F:StardewValley.HUDMessage.whatType">
            <summary>The icon to show, matching a constant like <see cref="F:StardewValley.HUDMessage.error_type"/>.</summary>
        </member>
        <member name="F:StardewValley.HUDMessage.achievement">
            <summary>Whether this is an achievement-unlocked message.</summary>
        </member>
        <member name="F:StardewValley.HUDMessage.noIcon">
            <summary>Whether to hide the icon portion of the box.</summary>
        </member>
        <member name="F:StardewValley.HUDMessage.messageSubject">
            <summary>The item that was received, if applicable.</summary>
        </member>
        <member name="M:StardewValley.HUDMessage.#ctor(System.String)">
            <summary>Construct an instance with the default time and an empty icon.</summary>
            <param name="message">The message text to show.</param>
        </member>
        <member name="M:StardewValley.HUDMessage.#ctor(System.String,System.Int32)">
            <summary>Construct an instance with a specified icon type, and a duration 1.5× default.</summary>
            <param name="message">The message text to show.</param>
            <param name="whatType">The icon to show, matching a constant like <see cref="F:StardewValley.HUDMessage.error_type"/>.</param>
        </member>
        <member name="M:StardewValley.HUDMessage.#ctor(System.String,System.Single,System.Boolean)">
            <summary>Construct an instance with the given values.</summary>
            <param name="message">The message text to show.</param>
            <param name="timeLeft">The duration in milliseconds for which to show the message.</param>
            <param name="fadeIn">Whether the message should start transparent and fade in.</param>
        </member>
        <member name="M:StardewValley.HUDMessage.ForItemGained(StardewValley.Item,System.Int32,System.String)">
            <summary>Construct a message indicating an item received.</summary>
            <param name="item">The item that was received.</param>
            <param name="count">The number of the item received.</param>
            <param name="type">A key used to prevent multiple HUD messages from stacking, or <c>null</c> to use the item name.</param>
        </member>
        <member name="M:StardewValley.HUDMessage.ForCornerTextbox(System.String)">
            <summary>Construct a larger textbox with line wrapping and no icon.</summary>
            <param name="message">The message text to show.</param>
        </member>
        <member name="M:StardewValley.HUDMessage.ForAchievement(System.String)">
            <summary>Construct an achievement display.</summary>
            <param name="achievementName">The translated achievement name.</param>
        </member>
        <member name="P:StardewValley.IHaveModData.modData">
            <summary>Custom metadata for this instance, synchronized in multiplayer and persisted in the save file.</summary>
        </member>
        <member name="P:StardewValley.IHaveModData.modDataForSerialization">
            <summary>The <see cref="P:StardewValley.IHaveModData.modData"/> adjusted for save file serialization. This returns null during save if it's empty. Most code should use <see cref="P:StardewValley.IHaveModData.modData" /> instead.</summary>
        </member>
        <member name="T:StardewValley.Internal.ForEachItemHelper">
            <summary>Iterates through every item in the game state and optionally edits, replaces, or removes instances.</summary>
            <remarks>This is a low-level class. Most code should use a utility method like <see cref="M:StardewValley.Utility.ForEachItem(System.Func{StardewValley.Item,System.Boolean})"/> or <see cref="M:StardewValley.Utility.ForEachItem(StardewValley.Delegates.ForEachItemDelegate)"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.Internal.ForEachItemHelper.ForEachItemInWorld(StardewValley.Delegates.ForEachItemDelegate)">
            <summary>Perform an action for each item in the game world, including items within items (e.g. in a chest or on a table), hats placed on children, items in player inventories, etc.</summary>
            <param name="handler">The action to perform for each item.</param>
            <returns>Returns whether to continue iterating if needed (i.e. returns false if the last <paramref name="handler"/> call did).</returns>
        </member>
        <member name="M:StardewValley.Internal.ForEachItemHelper.ForEachItemInLocation(StardewValley.GameLocation,StardewValley.Delegates.ForEachItemDelegate)">
            <summary>Perform an action for each item within a location, including items within items (e.g. in a chest or on a table), hats placed on children, items in player inventories, etc.</summary>
            <param name="location">The location whose items to iterate.</param>
            <param name="handler">The action to perform for each item.</param>
            <returns>Returns whether to continue iterating if needed (i.e. returns false if the last <paramref name="handler"/> call did).</returns>
        </member>
        <member name="M:StardewValley.Internal.ForEachItemHelper.ApplyToItem``1(``0,StardewValley.Delegates.ForEachItemDelegate,System.Action,System.Action{StardewValley.Item})">
            <summary>Apply a for-each-item callback to an item.</summary>
            <typeparam name="TItem">The item type.</typeparam>
            <param name="item">The item instance to iterate.</param>
            <param name="handler">The action to perform for each item.</param>
            <param name="remove">Delete this item instance.</param>
            <param name="replaceWith">Replace this item with a new instance.</param>
            <returns>Returns whether to continue iterating if needed.</returns>
        </member>
        <member name="M:StardewValley.Internal.ForEachItemHelper.ApplyToField``1(Netcode.NetRef{``0},StardewValley.Delegates.ForEachItemDelegate,System.Action{StardewValley.Item,StardewValley.Item})">
            <summary>Apply a for-each-item callback to an item.</summary>
            <typeparam name="TItem">The item type.</typeparam>
            <param name="field">The field instance to iterate.</param>
            <param name="handler">The action to perform for each item.</param>
            <param name="onChanged">A callback to invoke when the assigned value changes, which receives the old and new items.</param>
            <returns>Returns whether to continue iterating if needed.</returns>
        </member>
        <member name="M:StardewValley.Internal.ForEachItemHelper.ApplyToList``1(System.Collections.Generic.IList{``0},StardewValley.Delegates.ForEachItemDelegate,System.Boolean,System.Action{StardewValley.Item,StardewValley.Item,System.Int32})">
            <summary>Apply a for-each-item callback to an item.</summary>
            <typeparam name="TItem">The item type.</typeparam>
            <param name="list">The list of items to iterate.</param>
            <param name="handler">The action to perform for each item.</param>
            <param name="leaveNullSlotsOnRemoval">Whether to leave a null entry in the list when an item is removed. If <c>false</c>, the index is removed from the list instead.</param>
            <param name="onChanged">A callback to invoke when the assigned value changes, which receives the old and new items.</param>
            <returns>Returns whether to continue iterating if needed.</returns>
        </member>
        <member name="M:StardewValley.Internal.ForEachItemHelper.PrepareForReplaceWith``1(``0,``0)">
            <summary>Prepare a new item instance as a replacement for an existing item.</summary>
            <param name="previousItem">The existing item that's being replaced.</param>
            <param name="newItem">The new item that will replace <paramref name="previousItem"/>.</param>
            <returns>Returns the <paramref name="newItem"/> for convenience.</returns>
        </member>
        <member name="T:StardewValley.Internal.ItemQueryContext">
            <summary>The game context for an item search query.</summary>
        </member>
        <member name="P:StardewValley.Internal.ItemQueryContext.Location">
            <summary>The location to use for location-dependent queries like season.</summary>
        </member>
        <member name="P:StardewValley.Internal.ItemQueryContext.Player">
            <summary>The player for which to perform the search.</summary>
        </member>
        <member name="P:StardewValley.Internal.ItemQueryContext.Random">
            <summary>The instance to use for randomization, or <c>null</c> to create one dynamically.</summary>
        </member>
        <member name="P:StardewValley.Internal.ItemQueryContext.QueryString">
            <summary>The full item query string.</summary>
        </member>
        <member name="P:StardewValley.Internal.ItemQueryContext.ParentContext">
            <summary>The context for the item query which triggered this query, if any.</summary>
            <remarks>
              <para>For example, <c>LOST_BOOK_OR_ITEM RANDOM_ITEMS (O)</c> contains a fallback <c>RANDOM_ITEMS (O)</c> query which is parsed if the player already found every lost book. In that case, the former is the parent context for the latter.</para>
              <para>This is used to detect and break circular references.</para>
            </remarks>
        </member>
        <member name="P:StardewValley.Internal.ItemQueryContext.CustomFields">
            <summary>The custom fields which can be set by mods for custom item query behavior, or <c>null</c> if none were set.</summary>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryContext.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryContext.#ctor(StardewValley.Internal.ItemQueryContext)">
            <summary>Construct an instance.</summary>
            <param name="parentContext">The context for the item query which triggered this query, if any.</param>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryContext.#ctor(StardewValley.GameLocation,StardewValley.Farmer,System.Random)">
            <summary>Construct an instance.</summary>
            <param name="location">The location to use for location-dependent queries like season.</param>
            <param name="player">The player for which to perform the search.</param>
            <param name="random">The instance to use for randomization, or <c>null</c> to create one dynamically.</param>
        </member>
        <member name="T:StardewValley.Internal.ItemQueryResolver">
            <summary>Resolves item IDs like <samp>(O)128</samp> and item queries like <samp>RANDOM_ITEMS</samp> in data assets.</summary>
            <remarks>This is an internal implementation class. Most code should use higher-level code like <see cref="M:StardewValley.Utility.TryOpenShopMenu(System.String,System.String,System.Boolean)"/> instead.</remarks>
        </member>
        <member name="P:StardewValley.Internal.ItemQueryResolver.ItemResolvers">
            <summary>The item query keys that can be used instead of an item ID in list data fields like <see cref="P:StardewValley.GameData.ISpawnItemData.ItemId"/> or <see cref="P:StardewValley.GameData.ISpawnItemData.RandomItemId"/> fields, and the methods which create the items for them.</summary>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.#cctor">
            <summary>Register the default item queries, defined as <see cref="T:StardewValley.Internal.ItemQueryResolver.DefaultResolvers"/> methods.</summary>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.Register(System.String,StardewValley.Delegates.ResolveItemQueryDelegate)">
            <summary>Register an item query resolver.</summary>
            <param name="queryKey">The item query key, like <c>ALL_ITEMS</c>. This should only contain alphanumeric, underscore, and dot characters. For custom queries, this should be prefixed with your mod ID like <c>Example.ModId_QueryName</c>.</param>
            <param name="queryDelegate">The resolver which returns the items produced by the item query.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="queryKey"/> is null or whitespace-only.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="queryDelegate"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="queryKey"/> is already registered.</exception>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.TryResolve(System.String,StardewValley.Internal.ItemQueryContext,StardewValley.Internal.ItemQuerySearchMode,System.String,System.Nullable{System.Int32},System.Boolean,System.Collections.Generic.HashSet{System.String},System.Action{System.String,System.String})">
            <summary>Get the items matching an item ID or query.</summary>
            <param name="query">The item ID or query to match.</param>
            <param name="context">The contextual info for item queries, or <c>null</c> to use the global context.</param>
            <param name="filter">The filter to apply to the search results.</param>
            <param name="perItemCondition">A game state query which indicates whether an item produced from the other fields should be returned. Defaults to always true.</param>
            <param name="maxItems">The maximum number of item stacks to produce, or <c>null</c> to include all stacks produced by the <paramref name="query"/>.</param>
            <param name="avoidRepeat">Whether to avoid adding duplicate items.</param>
            <param name="avoidItemIds">The qualified item IDs which shouldn't be returned.</param>
            <param name="logError">Log an error message to the console, given the item query and error message.</param>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.TryResolve(StardewValley.GameData.ISpawnItemData,StardewValley.Internal.ItemQueryContext,StardewValley.Internal.ItemQuerySearchMode,System.Boolean,System.Collections.Generic.HashSet{System.String},System.Func{System.String,System.String},System.Action{System.String,System.String},StardewValley.Item)">
            <summary>Get the items matching spawn data from a content asset.</summary>
            <param name="data">The spawn data to match.</param>
            <param name="context">The contextual info for item queries, or <c>null</c> to use the global context.</param>
            <param name="filter">The filter to apply to the search results.</param>
            <param name="avoidRepeat">Whether to avoid adding duplicate items.</param>
            <param name="avoidItemIds">The qualified item IDs which shouldn't be returned.</param>
            <param name="formatItemId">Format the raw item ID before it's resolved. Note that this is applied after <paramref name="avoidRepeat"/> and <paramref name="avoidItemIds"/> are checked.</param>
            <param name="inputItem">The input item (e.g. machine input) for which to check queries, or <c>null</c> if not applicable.</param>
            <param name="logError">Log an error message to the console, given the item query and error message.</param>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.TryResolveRandomItem(System.String,StardewValley.Internal.ItemQueryContext,System.Boolean,System.Collections.Generic.HashSet{System.String},System.Action{System.String,System.String})">
            <summary>Get a random item matching an item ID or query.</summary>
            <param name="query">The item ID or query to match.</param>
            <param name="context">The contextual info for item queries, or <c>null</c> to use the global context.</param>
            <param name="avoidRepeat">Whether to avoid adding duplicate items.</param>
            <param name="avoidItemIds">The qualified item IDs which shouldn't be returned.</param>
            <param name="logError">Log an error message to the console, given the item query and error message.</param>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.TryResolveRandomItem(StardewValley.GameData.ISpawnItemData,StardewValley.Internal.ItemQueryContext,System.Boolean,System.Collections.Generic.HashSet{System.String},System.Func{System.String,System.String},StardewValley.Item,System.Action{System.String,System.String})">
            <summary>Get the items matching spawn data from a content asset.</summary>
            <param name="data">The spawn data to match.</param>
            <param name="context">The contextual info for item queries, or <c>null</c> to use the global context.</param>
            <param name="avoidRepeat">Whether to avoid adding duplicate items.</param>
            <param name="avoidItemIds">The qualified item IDs which shouldn't be returned.</param>
            <param name="formatItemId">Format the selected item ID before it's resolved.</param>
            <param name="inputItem">The input item (e.g. machine input) for which to check queries, or <c>null</c> if not applicable.</param>
            <param name="logError">Log an error message to the console, given the item query and error message.</param>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.ApplyItemFields(StardewValley.ISalable,StardewValley.GameData.ISpawnItemData,StardewValley.Internal.ItemQueryContext,StardewValley.Item)">
            <summary>Apply data fields to an item instance.</summary>
            <param name="item">The item to modify.</param>
            <param name="data">The spawn data to apply.</param>
            <param name="context">The contextual info for item queries, or <c>null</c> to use the global context.</param>
            <remarks>This is applied automatically by methods which take an <see cref="T:StardewValley.GameData.ISpawnItemData"/>, so it only needs to be called directly when creating an item from an item query string directly.</remarks>
            <param name="inputItem">The input item (e.g. machine input) for which to check queries, or <c>null</c> if not applicable.</param>
            <returns>Returns the modified item. This is usually the input <paramref name="item"/>, but may be a new item instance in some cases.</returns>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.ApplyItemFields(StardewValley.ISalable,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Boolean,System.Collections.Generic.List{StardewValley.GameData.QuantityModifier},StardewValley.GameData.QuantityModifier.QuantityModifierMode,System.Collections.Generic.List{StardewValley.GameData.QuantityModifier},StardewValley.GameData.QuantityModifier.QuantityModifierMode,System.Collections.Generic.Dictionary{System.String,System.String},StardewValley.Internal.ItemQueryContext,StardewValley.Item)">
            <summary>Apply data fields to an item instance.</summary>
            <param name="item">The item to modify.</param>
            <param name="minStackSize">The minimum stack size for the item to create, or <c>-1</c> to keep it as-is.</param>
            <param name="maxStackSize">The maximum stack size for the item to create, or <c>-1</c> to match <paramref name="minStackSize"/>.</param>
            <param name="toolUpgradeLevel">For tools only, the tool upgrade level to set, or <c>-1</c> to keep it as-is.</param>
            <param name="objectInternalName">For objects only, the internal name to use (or <c>null</c> for the item's name in data). This should usually be null.</param>
            <param name="objectDisplayName">For objects only, a tokenizable string for the display name to use (or <c>null</c> for the item's default display name). See remarks on <see cref="F:StardewValley.Object.displayNameFormat"/>.</param>
            <param name="quality">The object quality to set, or <c>-1</c> to keep it as-is.</param>
            <param name="isRecipe">Whether to mark the item as a recipe that can be learned by the player, instead of an instance that can be picked up.</param>
            <param name="stackSizeModifiers">The modifiers to apply to the item's stack size.</param>
            <param name="stackSizeModifierMode">How multiple <paramref name="stackSizeModifiers"/> should be combined.</param>
            <param name="qualityModifiers">The modifiers to apply to the item's quality.</param>
            <param name="qualityModifierMode">How multiple <paramref name="qualityModifiers"/> should be combined.</param>
            <param name="modData">Custom metadata to add to the created item's <c>modData</c> field for mod use.</param>
            <param name="context">The contextual info for item queries, or <c>null</c> to use the global context.</param>
            <param name="inputItem">The input item (e.g. machine input) for which to check queries, or <c>null</c> if not applicable.</param>
            <returns>Returns the modified item. This is usually the input <paramref name="item"/>, but may be a new item instance in some cases.</returns>
            <remarks>This is applied automatically by methods which take an <see cref="T:StardewValley.GameData.ISpawnItemData"/>, so it only needs to be called directly when creating an item from an item query string directly.</remarks>
        </member>
        <member name="T:StardewValley.Internal.ItemQueryResolver.DefaultResolvers">
            <summary>The resolvers for vanilla item queries. Most code should call <c>TryResolve</c> instead of using these directly.</summary>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.DefaultResolvers.ALL_ITEMS(System.String,System.String,StardewValley.Internal.ItemQueryContext,System.Boolean,System.Collections.Generic.HashSet{System.String},System.Action{System.String,System.String})">
            <summary>Get every item in the game, optionally filtered by type. Format: <c>ALL_ITEMS [type]</c>.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.ResolveItemQueryDelegate"/>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.DefaultResolvers.DISH_OF_THE_DAY(System.String,System.String,StardewValley.Internal.ItemQueryContext,System.Boolean,System.Collections.Generic.HashSet{System.String},System.Action{System.String,System.String})">
            <summary>Get the dish of the day sold at the Saloon, if any. Format: <c>DISH_OF_THE_DAY</c> (no arguments).</summary>
            <inheritdoc cref="T:StardewValley.Delegates.ResolveItemQueryDelegate"/>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.DefaultResolvers.FLAVORED_ITEM(System.String,System.String,StardewValley.Internal.ItemQueryContext,System.Boolean,System.Collections.Generic.HashSet{System.String},System.Action{System.String,System.String})">
            <summary>Get a flavored item for a given type and ingredient (like Wine + Blueberry = Blueberry Wine). Format: <c>FLAVORED_ITEM &lt;type&gt; &lt;ingredient item ID&gt; [ingredient preserved ID]</c>.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.ResolveItemQueryDelegate"/>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.DefaultResolvers.ITEMS_LOST_ON_DEATH(System.String,System.String,StardewValley.Internal.ItemQueryContext,System.Boolean,System.Collections.Generic.HashSet{System.String},System.Action{System.String,System.String})">
            <summary>Get the items lost when the player collapsed in the mines, which can be recovered from Marlon's shop. Format: <c>ITEMS_LOST_ON_DEATH</c> (no arguments).</summary>
            <inheritdoc cref="T:StardewValley.Delegates.ResolveItemQueryDelegate"/>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.DefaultResolvers.ITEMS_SOLD_BY_PLAYER(System.String,System.String,StardewValley.Internal.ItemQueryContext,System.Boolean,System.Collections.Generic.HashSet{System.String},System.Action{System.String,System.String})">
            <summary>Get items the player has recently sold to a given shop. Format: <c>ITEMS_SOLD_BY_PLAYER &lt;shop location ID&gt;</c>.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.ResolveItemQueryDelegate"/>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.DefaultResolvers.LOCATION_FISH(System.String,System.String,StardewValley.Internal.ItemQueryContext,System.Boolean,System.Collections.Generic.HashSet{System.String},System.Action{System.String,System.String})">
            <summary>Get a fish which can be caught in a location based on its <c>Data/Locations</c> entry. Format: <c>LOCATION_FISH &lt;location name&gt; &lt;bobber x&gt; &lt;bobber y&gt; &lt;water depth&gt;</c>.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.ResolveItemQueryDelegate"/>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.DefaultResolvers.LOST_BOOK_OR_ITEM(System.String,System.String,StardewValley.Internal.ItemQueryContext,System.Boolean,System.Collections.Generic.HashSet{System.String},System.Action{System.String,System.String})">
            <summary>Get a lost book (if they haven't all been found), else the given item query (if provided), else nothing. Format: <c>LOST_BOOK_OR_ITEM [alternate item query]</c>.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.ResolveItemQueryDelegate"/>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.DefaultResolvers.MONSTER_SLAYER_REWARDS(System.String,System.String,StardewValley.Internal.ItemQueryContext,System.Boolean,System.Collections.Generic.HashSet{System.String},System.Action{System.String,System.String})">
            <summary>Get the rewards that can currently be collected from Gil in the Adventurer's Guild. Format: <c>MONSTER_SLAYER_REWARDS</c> (no arguments).</summary>
            <inheritdoc cref="T:StardewValley.Delegates.ResolveItemQueryDelegate"/>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.DefaultResolvers.MOVIE_CONCESSIONS_FOR_GUEST(System.String,System.String,StardewValley.Internal.ItemQueryContext,System.Boolean,System.Collections.Generic.HashSet{System.String},System.Action{System.String,System.String})">
            <summary>Get the movie concessions to show for an invited NPC. Format <c>MOVIE_CONCESSIONS_FOR_GUEST [npcName]</c>.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.ResolveItemQueryDelegate"/>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.DefaultResolvers.RANDOM_ARTIFACT_FOR_DIG_SPOT(System.String,System.String,StardewValley.Internal.ItemQueryContext,System.Boolean,System.Collections.Generic.HashSet{System.String},System.Action{System.String,System.String})">
            <summary>Get the first artifact in <c>Data/Objects</c> which lists the current location as a spawn location and whose chance matches. Format <c>RANDOM_ARTIFACT_FOR_DIG_SPOT</c> (no arguments).</summary>
            <inheritdoc cref="T:StardewValley.Delegates.ResolveItemQueryDelegate"/>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.DefaultResolvers.RANDOM_BASE_SEASON_ITEM(System.String,System.String,StardewValley.Internal.ItemQueryContext,System.Boolean,System.Collections.Generic.HashSet{System.String},System.Action{System.String,System.String})">
            <summary>Get a random seasonal vanilla item which can be found by searching garbage cans, breaking containers in the mines, etc. Format: <c>RANDOM_BASE_SEASON_ITEM</c> (no arguments).</summary>
            <inheritdoc cref="T:StardewValley.Delegates.ResolveItemQueryDelegate"/>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.DefaultResolvers.RANDOM_ITEMS(System.String,System.String,StardewValley.Internal.ItemQueryContext,System.Boolean,System.Collections.Generic.HashSet{System.String},System.Action{System.String,System.String})">
            <summary>Get random items for a given type, optionally within a numeric ID range. Format: <c>RANDOM_ITEMS &lt;item data definition ID&gt; [min numeric id] [max numeric id]</c>.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.ResolveItemQueryDelegate"/>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.DefaultResolvers.SECRET_NOTE_OR_ITEM(System.String,System.String,StardewValley.Internal.ItemQueryContext,System.Boolean,System.Collections.Generic.HashSet{System.String},System.Action{System.String,System.String})">
            <summary>Get a secret note (if the player unlocked them and hasn't found them all), else the given item query (if provided), else nothing. Format: <c>SECRET_NOTE_OR_ITEM [alternate item query]</c>.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.ResolveItemQueryDelegate"/>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.DefaultResolvers.SHOP_TOWN_KEY(System.String,System.String,StardewValley.Internal.ItemQueryContext,System.Boolean,System.Collections.Generic.HashSet{System.String},System.Action{System.String,System.String})">
            <summary>Get a special 'key to the town' shop item. This returns an <see cref="T:StardewValley.ISalable"/> instance which may be ignored or invalid outside shops. Format: <c>SHOP_TOWN_KEY</c> (no arguments).</summary>
            <inheritdoc cref="T:StardewValley.Delegates.ResolveItemQueryDelegate"/>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.DefaultResolvers.TOOL_UPGRADES(System.String,System.String,StardewValley.Internal.ItemQueryContext,System.Boolean,System.Collections.Generic.HashSet{System.String},System.Action{System.String,System.String})">
            <summary>Get the tool upgrades listed in <c>Data/Shops</c> for the given tool ID (or all tool upgrades if <c>[tool ID]</c> is omitted). Format: <c>TOOL_UPGRADES [tool ID]</c>.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.ResolveItemQueryDelegate"/>
        </member>
        <member name="T:StardewValley.Internal.ItemQueryResolver.Helpers">
            <summary>The helper methods which simplify implementing custom item queries.</summary>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.Helpers.SplitArguments(System.String)">
            <summary>Split an argument list into individual arguments.</summary>
            <param name="arguments">The arguments to split.</param>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.Helpers.ErrorResult(System.String,System.String,System.Action{System.String,System.String},System.String)">
            <summary>Log an error for an invalid query, and return an empty list of items.</summary>
            <param name="key">The query key specified in the item ID.</param>
            <param name="arguments">Any text specified in the item ID after the <paramref name="key"/>.</param>
            <param name="logError">Log an error message to the console, given the item query and error message.</param>
            <param name="message">A human-readable message indicating why the query is invalid.</param>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.Helpers.ExcludeFromRandomSale(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <summary>Get whether to exclude this item from shops when selecting random items to sell, including catalogues.</summary>
            <param name="data">The parsed item data.</param>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResolver.LogNothing(System.String,System.String)">
            <summary>A default implementation for <c>logError</c> parameters which logs nothing.</summary>
            <param name="query">The item query which failed.</param>
            <param name="error">The error indicating why it failed.</param>
        </member>
        <member name="T:StardewValley.Internal.ItemQueryResult">
            <summary>An item resolved by the <see cref="T:StardewValley.Internal.ItemQueryResolver"/>.</summary>
        </member>
        <member name="F:StardewValley.Internal.ItemQueryResult.Item">
            <summary>The resolved item instance.</summary>
        </member>
        <member name="F:StardewValley.Internal.ItemQueryResult.OverrideBasePrice">
            <summary>The base gold price for the resolved item (i.e. <c>Item.Price</c>), or <c>null</c> to get it from the item data.</summary>
        </member>
        <member name="F:StardewValley.Internal.ItemQueryResult.OverrideStackSize">
            <summary>If set, the number of the item purchased on each click.</summary>
        </member>
        <member name="F:StardewValley.Internal.ItemQueryResult.OverrideShopAvailableStock">
            <summary>The maximum number of items available to purchase in a shop, or <see cref="F:StardewValley.Menus.ShopMenu.infiniteStock"/>, or <c>null</c> to get it from the shop data. This has no effect when used outside shops.</summary>
        </member>
        <member name="F:StardewValley.Internal.ItemQueryResult.OverrideTradeItemId">
            <summary>If set, overrides the qualified or unqualified item ID which must be traded to purchase this item.</summary>
        </member>
        <member name="F:StardewValley.Internal.ItemQueryResult.OverrideTradeItemAmount">
            <summary>If set, overrides the number of <see cref="F:StardewValley.Internal.ItemQueryResult.OverrideTradeItemId"/> needed to purchase this item.</summary>
        </member>
        <member name="F:StardewValley.Internal.ItemQueryResult.SyncStacksWith">
            <summary>If set, the stack count will be synchronized with the given item's. This is very specialized and only used for objects whose available stock are tracked separately from the normal shop stock tracking.</summary>
        </member>
        <member name="M:StardewValley.Internal.ItemQueryResult.#ctor(StardewValley.ISalable)">
            <summary>Construct an instance.</summary>
            <param name="item">The resolved item instance.</param>
        </member>
        <member name="T:StardewValley.Internal.ItemQuerySearchMode">
            <summary>The filter to apply to an item query's search results.</summary>
        </member>
        <member name="F:StardewValley.Internal.ItemQuerySearchMode.All">
            <summary>Return all matches.</summary>
        </member>
        <member name="F:StardewValley.Internal.ItemQuerySearchMode.AllOfTypeItem">
            <summary>Return all matches which are a concrete <see cref="T:StardewValley.Item"/> (instead of a different <see cref="T:StardewValley.ISalable"/> type).</summary>
        </member>
        <member name="F:StardewValley.Internal.ItemQuerySearchMode.FirstOfTypeItem">
            <summary>Return the first match which is a concrete <see cref="T:StardewValley.Item"/> (instead of a different <see cref="T:StardewValley.ISalable"/> type).</summary>
        </member>
        <member name="F:StardewValley.Internal.ItemQuerySearchMode.RandomOfTypeItem">
            <summary>Return a random match which is a concrete <see cref="T:StardewValley.Item"/> (instead of a different <see cref="T:StardewValley.ISalable"/> type).</summary>
        </member>
        <member name="T:StardewValley.Internal.OtherNamesAttribute">
            <summary>A method attribute which indicates it has alternative names.</summary>
            <remarks>This only applies to cases that specifically handle it, like debug commands or event preconditions registered by the game directly. For custom cases, you generally need to call a specific method like <see cref="M:StardewValley.GameStateQuery.RegisterAlias(System.String,System.String)"/> instead.</remarks>
        </member>
        <member name="P:StardewValley.Internal.OtherNamesAttribute.Aliases">
            <summary>The alternate names for the method.</summary>
        </member>
        <member name="M:StardewValley.Internal.OtherNamesAttribute.#ctor(System.String[])">
            <summary>Construct an instance.</summary>
            <param name="aliases">The alternate names for the method.</param>
        </member>
        <member name="T:StardewValley.Internal.ShopBuilder">
            <summary>Handles building a shop menu from data in <c>Data/Shops</c>.</summary>
            <remarks>This is an internal implementation class. Most code should use <see cref="M:StardewValley.Utility.TryOpenShopMenu(System.String,System.String,System.Boolean)"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.Internal.ShopBuilder.GetShopStock(System.String)">
            <summary>Get the inventory to sell for a shop menu.</summary>
            <param name="shopId">The shop ID matching the entry in <c>Data/Shops</c>.</param>
        </member>
        <member name="M:StardewValley.Internal.ShopBuilder.GetShopStock(System.String,StardewValley.GameData.Shops.ShopData)">
            <summary>Get the inventory to sell for a shop menu.</summary>
            <param name="shopId">The shop ID in <c>Data\Shops</c>.</param>
            <param name="shop">The shop data from <c>Data\Shops</c>.</param>
        </member>
        <member name="M:StardewValley.Internal.ShopBuilder.CheckItemCondition(System.String,System.Boolean,System.Boolean@)">
            <summary>Check a game state query which determines whether an item should be added to a shop menu.</summary>
            <param name="conditions">The conditions to check.</param>
            <param name="applyPierreMissingStockList">Whether to apply Pierre's Missing Stock List, which allows buying out-of-season crops.</param>
            <param name="isOutOfSeason">Whether this is an out-of-season item which is allowed (for a price) because the player found Pierre's Stock List.</param>
        </member>
        <member name="M:StardewValley.Internal.ShopBuilder.GetToolUpgradeData(StardewValley.GameData.Tools.ToolData,StardewValley.Farmer)">
            <summary>Get the tool upgrade data to show in the blacksmith shop for a given tool, if any.</summary>
            <param name="tool">The tool data to show as an upgrade, if possible.</param>
            <param name="player">The player viewing the shop.</param>
        </member>
        <member name="M:StardewValley.Internal.ShopBuilder.GetToolUpgradeConventionalPrice(System.Int32)">
            <summary>Get the conventional price for a tool upgrade.</summary>
            <param name="level">The level to which the tool is being upgraded.</param>
        </member>
        <member name="M:StardewValley.Internal.ShopBuilder.GetToolUpgradeConventionalTradeItem(System.Int32)">
            <summary>Get the unqualified item ID for the conventional material that must be provided for a tool upgrade.</summary>
            <param name="level">The level to which the tool is being upgraded.</param>
        </member>
        <member name="M:StardewValley.Internal.ShopBuilder.GetCurrentOwners(StardewValley.GameData.Shops.ShopData)">
            <summary>Get the owner entries for a shop whose conditions currently match.</summary>
            <param name="shop">The shop data to check.</param>
        </member>
        <member name="M:StardewValley.Internal.ShopBuilder.GetBasePrice(StardewValley.Internal.ItemQueryResult,StardewValley.GameData.Shops.ShopData,StardewValley.GameData.Shops.ShopItemData,StardewValley.ISalable,System.Boolean,System.Boolean)">
            <summary>Get the sell price for a shop item, excluding quantity modifiers.</summary>
            <param name="output">The shop item for which to get the base price.</param>
            <param name="shopData">The shop data.</param>
            <param name="itemData">The shop item's data.</param>
            <param name="item">The item instance.</param>
            <param name="outOfSeasonPrice">Whether to apply the out-of-season pricing for Pierre's Missing Stock List.</param>
            <param name="useObjectDataPrice">If <paramref name="item"/> has type <see cref="F:StardewValley.ItemRegistry.type_object"/>, whether to use the raw price in <c>Data/Objects</c> instead of the calculated sell-to-player price.</param>
        </member>
        <member name="M:StardewValley.Internal.ShopBuilder.TrackSeenItems(System.Collections.Generic.HashSet{System.String},StardewValley.ISalable)">
            <summary>Add an item to the list of items already in the shop.</summary>
            <param name="stockedItems">The item IDs in the shop.</param>
            <param name="item">The item to track.</param>
            <returns>Returns whether the item was already in the shop.</returns>
        </member>
        <member name="T:StardewValley.Internal.StaticDelegateBuilder">
            <summary>Handles creating delegates for static methods by their string method names.</summary>
        </member>
        <member name="F:StardewValley.Internal.StaticDelegateBuilder.CachedDelegates">
            <summary>A cache of delegate resolution results, indexed by delegate type and then full method name.</summary>
        </member>
        <member name="M:StardewValley.Internal.StaticDelegateBuilder.TryCreateDelegate``1(System.String,``0@,System.String@)">
            <summary>Create a delegate for a static method.</summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="fullMethodName">The full method name in the form <c>fullTypeName.methodName</c> (like <c>StardewValley.Object.OutputDeconstructor</c>).</param>
            <param name="createdDelegate">The created delegate instance, if valid.</param>
            <param name="error">An error phrase indicating why the delegate couldn't be created, if applicable.</param>
            <returns>Returns whether the delegate was successfully created.</returns>
        </member>
        <member name="T:StardewValley.Internal.StaticDelegateBuilder.CachedDelegate">
            <summary>A cached delegate creation.</summary>
        </member>
        <member name="F:StardewValley.Internal.StaticDelegateBuilder.CachedDelegate.CreatedDelegate">
            <summary>The created delegate instance, if valid.</summary>
        </member>
        <member name="F:StardewValley.Internal.StaticDelegateBuilder.CachedDelegate.Error">
            <summary>An error phrase indicating why the delegate couldn't be created, if applicable.</summary>
        </member>
        <member name="M:StardewValley.Internal.StaticDelegateBuilder.CachedDelegate.#ctor(System.Object,System.String)">
            <summary>Construct an instance.</summary>
            <param name="createdDelegate">The created delegate instance, if valid.</param>
            <param name="error">An error phrase indicating why the delegate couldn't be created, if applicable.</param>
        </member>
        <member name="T:StardewValley.Inventories.IInventory">
            <summary>A managed list of items.</summary>
        </member>
        <member name="P:StardewValley.Inventories.IInventory.LastTickSlotChanged">
            <summary>The <see cref="P:System.DateTime.UtcNow"/> <see cref="P:System.DateTime.Ticks"/> value when an item stack was last added or removed in this inventory.</summary>
            <remarks>This doesn't track changes to the data for each stack (including the stack size).</remarks>
        </member>
        <member name="M:StardewValley.Inventories.IInventory.HasAny">
            <summary>Get whether the inventory contains any items (excluding <c>null</c> slots).</summary>
        </member>
        <member name="M:StardewValley.Inventories.IInventory.HasEmptySlots">
            <summary>Get whether this inventory contains any <c>null</c> slots.</summary>
        </member>
        <member name="M:StardewValley.Inventories.IInventory.CountItemStacks">
            <summary>Get the number of item stacks in the inventory, excluding <c>null</c> slots.</summary>
        </member>
        <member name="M:StardewValley.Inventories.IInventory.OverwriteWith(System.Collections.Generic.IList{StardewValley.Item})">
            <summary>Clear all item slots and overwrite them with the slots in the given list.</summary>
            <param name="list">The item list from which to copy values.</param>
        </member>
        <member name="M:StardewValley.Inventories.IInventory.GetRange(System.Int32,System.Int32)">
            <summary>Get a subset of the item slots in the inventory.</summary>
            <param name="index">The index from which to start the range.</param>
            <param name="count">The number of items to include.</param>
        </member>
        <member name="M:StardewValley.Inventories.IInventory.AddRange(System.Collections.Generic.ICollection{StardewValley.Item})">
            <summary>Add a list of items to the inventory.</summary>
            <param name="collection">The items to add.</param>
        </member>
        <member name="M:StardewValley.Inventories.IInventory.RemoveRange(System.Int32,System.Int32)">
            <summary>Remove a subset of items from the inventory.</summary>
            <param name="index">The index from which to start removing items.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:StardewValley.Inventories.IInventory.RemoveEmptySlots">
            <summary>Remove all empty slots from the inventory.</summary>
        </member>
        <member name="M:StardewValley.Inventories.IInventory.ContainsId(System.String)">
            <summary>Get whether the inventory contains any items with the given item ID.</summary>
            <param name="itemId">The qualified or unqualified item ID to find.</param>
        </member>
        <member name="M:StardewValley.Inventories.IInventory.ContainsId(System.String,System.Int32)">
            <summary>Get whether the inventory contains a minimum number of items with the given item ID.</summary>
            <param name="itemId">The qualified or unqualified item ID to find.</param>
            <param name="minimum">The minimum number of the item to require, totaling the <see cref="P:StardewValley.Item.Stack"/> values for all items with the given <paramref name="itemId"/>.</param>
        </member>
        <member name="M:StardewValley.Inventories.IInventory.CountId(System.String)">
            <summary>Get a count of items with the given item ID.</summary>
            <param name="itemId">The qualified or unqualified item ID to find.</param>
        </member>
        <member name="M:StardewValley.Inventories.IInventory.GetById(System.String)">
            <summary>Get all items with the given item ID.</summary>
            <param name="itemId">The qualified or unqualified item ID to find.</param>
        </member>
        <member name="M:StardewValley.Inventories.IInventory.ReduceId(System.String,System.Int32)">
            <summary>Remove the specified number of the item ID from the inventory. This reduces the stack size for matching items until a total of <paramref name="count"/> have been removed, and clears any slot which reaches a stack size of zero.</summary>
            <param name="itemId">The qualified or unqualified item ID to remove.</param>
            <param name="count">The number of the item to remove.</param>
            <returns>Returns the amount by which the items were reduced. If the inventory has sufficient items, this will match <paramref name="count"/>.</returns>
        </member>
        <member name="M:StardewValley.Inventories.IInventory.RemoveButKeepEmptySlot(StardewValley.Item)">
            <summary>Set the slot containing the given item to null, without removing the empty slot.</summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="T:StardewValley.Inventories.Inventory">
            <summary>A managed list of items.</summary>
        </member>
        <member name="F:StardewValley.Inventories.Inventory.Items">
            <summary>The underlying list of items.</summary>
        </member>
        <member name="F:StardewValley.Inventories.Inventory.ItemsById">
            <summary>The <see cref="F:StardewValley.Inventories.Inventory.Items"/> indexed by their qualified item ID.</summary>
        </member>
        <member name="F:StardewValley.Inventories.Inventory.CachedItemStackCount">
            <summary>The backing field for <see cref="M:StardewValley.Inventories.Inventory.CountItemStacks"/>.</summary>
        </member>
        <member name="P:StardewValley.Inventories.Inventory.NetFields">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Inventories.Inventory.Count">
            <summary>The number of items in the inventory, including <c>null</c> slots.</summary>
        </member>
        <member name="P:StardewValley.Inventories.Inventory.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Inventories.Inventory.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="E:StardewValley.Inventories.Inventory.OnSlotChanged">
            <summary>An event raised when an item stack is added or removed.</summary>
        </member>
        <member name="E:StardewValley.Inventories.Inventory.OnInventoryReplaced">
            <summary>An event raised when the inventory is cleared or replaced.</summary>
        </member>
        <member name="P:StardewValley.Inventories.Inventory.LastTickSlotChanged">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewValley.Inventories.Inventory.HasAny">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.HasEmptySlots">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.CountItemStacks">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.OverwriteWith(System.Collections.Generic.IList{StardewValley.Item})">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.GetRange(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.AddRange(System.Collections.Generic.ICollection{StardewValley.Item})">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.RemoveEmptySlots">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.ContainsId(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.ContainsId(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.CountId(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.GetById(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.ReduceId(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.RemoveButKeepEmptySlot(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.Add(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.Clear">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.Contains(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.CopyTo(StardewValley.Item[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.Remove(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.IndexOf(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.Insert(System.Int32,StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.GetSchema">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.ReadXml(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Inventories.Inventory.GetItemsById">
            <summary>Get an index of items by ID.</summary>
        </member>
        <member name="M:StardewValley.Inventories.Inventory.HandleArrayReplaced(Netcode.NetList{StardewValley.Item,Netcode.NetRef{StardewValley.Item}},System.Collections.Generic.IList{StardewValley.Item},System.Collections.Generic.IList{StardewValley.Item})">
            <summary>Handle the <see cref="F:StardewValley.Inventories.Inventory.Items"/> data getting replaced.</summary>
            <param name="list">The item list.</param>
            <param name="before">The previous item list.</param>
            <param name="after">The new item list.</param>
        </member>
        <member name="M:StardewValley.Inventories.Inventory.HandleElementChanged(Netcode.NetList{StardewValley.Item,Netcode.NetRef{StardewValley.Item}},System.Int32,StardewValley.Item,StardewValley.Item)">
            <summary>Handle a slot in the <see cref="F:StardewValley.Inventories.Inventory.Items"/> data changing.</summary>
            <param name="list">The item list.</param>
            <param name="index">The item slot's index within the inventory.</param>
            <param name="before">The previous item value (which may be <c>null</c> when adding a stack).</param>
            <param name="after">The new item value (which may be <c>null</c> when removing a stack).</param>
        </member>
        <member name="M:StardewValley.Inventories.Inventory.ClearIndex">
            <summary>Clear the item index, so it'll be rebuilt next time it's needed.</summary>
        </member>
        <member name="T:StardewValley.Inventories.InventoryIndex">
            <summary>Manages a lookup of items in an inventory by key.</summary>
        </member>
        <member name="F:StardewValley.Inventories.InventoryIndex.Index">
            <summary>A cache of inventory items by key.</summary>
        </member>
        <member name="F:StardewValley.Inventories.InventoryIndex.AddImpl">
            <summary>Adds an item to the index by key.</summary>
        </member>
        <member name="F:StardewValley.Inventories.InventoryIndex.RemoveImpl">
            <summary>Removes an item from the index by key.</summary>
        </member>
        <member name="M:StardewValley.Inventories.InventoryIndex.#ctor(System.Action{StardewValley.Inventories.InventoryIndex,StardewValley.Item},System.Action{StardewValley.Inventories.InventoryIndex,StardewValley.Item})">
            <summary>Construct an instance.</summary>
            <param name="addImpl">Adds an item to the index by key.</param>
            <param name="removeImpl">Removes an item from the index by key.</param>
        </member>
        <member name="M:StardewValley.Inventories.InventoryIndex.ById(System.Collections.Generic.IList{StardewValley.Item})">
            <summary>Construct an index which caches items by their qualified ID.</summary>
            <param name="items">The items to index.</param>
        </member>
        <member name="M:StardewValley.Inventories.InventoryIndex.CountKeys">
            <summary>The number of unique keys used to index items.</summary>
        </member>
        <member name="M:StardewValley.Inventories.InventoryIndex.CountItems">
            <summary>The number of items in the inventory.</summary>
        </member>
        <member name="M:StardewValley.Inventories.InventoryIndex.Contains(System.String)">
            <summary>Get whether any items match a given key.</summary>
            <param name="key">The index key.</param>
        </member>
        <member name="M:StardewValley.Inventories.InventoryIndex.TryGet(System.String,System.Collections.Generic.IReadOnlyList{StardewValley.Item}@)">
            <summary>Get a read-only list of items which match a given key, if any.</summary>
            <param name="key">The index key.</param>
            <param name="items">The matching items.</param>
        </member>
        <member name="M:StardewValley.Inventories.InventoryIndex.TryGetMutable(System.String,System.Collections.Generic.IList{StardewValley.Item}@)">
            <summary>Get an editable list of items which match a given key, if any.</summary>
            <param name="key">The index key.</param>
            <param name="items">The matching items.</param>
            <remarks>Most code should use <see cref="M:StardewValley.Inventories.InventoryIndex.TryGet(System.String,System.Collections.Generic.IReadOnlyList{StardewValley.Item}@)"/> instead. Changes to the list will only affect the index, not the underlying inventory. This method is only provided for cases where you're directly changing both at once. If you clear the list, make sure to call <see cref="M:StardewValley.Inventories.InventoryIndex.RemoveKey(System.String)"/> too.</remarks>
        </member>
        <member name="M:StardewValley.Inventories.InventoryIndex.Add(StardewValley.Item)">
            <summary>Add an item to the index.</summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:StardewValley.Inventories.InventoryIndex.AddWithKey(System.String,StardewValley.Item)">
            <summary>Add an item to the index.</summary>
            <param name="key">The key to index by.</param>
            <param name="item">The item to add.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:StardewValley.Inventories.InventoryIndex.Remove(StardewValley.Item)">
            <summary>Remove an item from the index.</summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:StardewValley.Inventories.InventoryIndex.RemoveKey(System.String)">
            <summary>Remove a key from the index.</summary>
            <param name="key">The key to remove.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:StardewValley.Inventories.InventoryIndex.RemoveItem(System.String,StardewValley.Item)">
            <summary>Remove an item from the index.</summary>
            <param name="key">The key for which to remove the item.</param>
            <param name="item">The item to remove.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
        </member>
        <member name="T:StardewValley.Inventories.OnInventoryReplacedDelegate">
            <summary>The delegate for <see cref="E:StardewValley.Inventories.Inventory.OnInventoryReplaced"/>.</summary>
            <param name="inventory">The inventory instance.</param>
            <param name="before">The previous item list.</param>
            <param name="after">The new item list.</param>
        </member>
        <member name="T:StardewValley.Inventories.OnSlotChangedDelegate">
            <summary>The delegate for <see cref="E:StardewValley.Inventories.Inventory.OnSlotChanged"/>.</summary>
            <param name="inventory">The inventory instance.</param>
            <param name="index">The item slot's index within the inventory.</param>
            <param name="before">The previous item value (which may be <c>null</c> when adding a stack).</param>
            <param name="after">The new item value (which may be <c>null</c> when removing a stack).</param>
        </member>
        <member name="P:StardewValley.ISalable.TypeDefinitionId">
            <summary>A unique identifier for the base item type, like <c>(H)</c> for a hat.</summary>
            <remarks>For vanilla items, this matches one of the <see cref="T:StardewValley.ItemRegistry"/>'s <c>type_*</c> fields.</remarks>
        </member>
        <member name="P:StardewValley.ISalable.QualifiedItemId">
            <summary>A globally unique item ID.</summary>
        </member>
        <member name="M:StardewValley.ISalable.sellToStorePrice(System.Int64)">
            <summary>Get the default price when selling this item to a shop.</summary>
            <param name="specificPlayerID">The player whose professions to take into account, or -1 to apply the bonuses from all applicable players.</param>
        </member>
        <member name="M:StardewValley.ISalable.salePrice(System.Boolean)">
            <summary>Get the default price when buying this item from a shop.</summary>
            <param name="ignoreProfitMargins">Whether to ignore the configured profit margins, even if they'd normally be applicable to this item.</param>
        </member>
        <member name="M:StardewValley.ISalable.appliesProfitMargins">
            <summary>Get whether this item should apply profit margins when bought or sold in shops.</summary>
        </member>
        <member name="M:StardewValley.ISalable.actionWhenPurchased(System.String)">
            <summary>The action to perform when this item is purchased from a shop.</summary>
            <param name="shopId">The unique ID for the shop it was purchased from.</param>
            <returns>Returns <c>true</c> if the item should be discarded (e.g. because it's a learn-type item like a recipe), or <c>false</c> if it should be added to the player's inventory.</returns>
        </member>
        <member name="M:StardewValley.ISalable.FixStackSize">
            <summary>Ensure the <see cref="P:StardewValley.ISalable.Stack"/> is set to a valid value.</summary>
        </member>
        <member name="M:StardewValley.ISalable.FixQuality">
            <summary>Ensure the <see cref="P:StardewValley.ISalable.Quality"/> is set to a valid value.</summary>
        </member>
        <member name="F:StardewValley.Item.tempData">
            <summary>Temporary data used for special purposes like fish catches. This isn't synchronized or saved.</summary>
        </member>
        <member name="P:StardewValley.Item.modData">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Item.modDataForSerialization">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Item.SetFlagOnPickup">
            <summary>The mail flag to set for the player when it's added to their inventory for the first time.</summary>
            <remarks>This is a temporary value (e.g. for a freshly caught fish), and isn't persisted or synchronized.</remarks>
        </member>
        <member name="M:StardewValley.Item.HasContextTag(System.String)">
            <summary>Get whether the item has the given context tag.</summary>
            <param name="tag">The tag to match. This can be negated by prefixing with <c>!</c> (like <c>!wine_item</c> to check if the tags <em>don't</em> contain <c>wine_item</c>).</param>
        </member>
        <member name="F:StardewValley.Item.parentSheetIndex">
            <summary>The backing field for <see cref="P:StardewValley.Item.ParentSheetIndex"/>.</summary>
        </member>
        <member name="F:StardewValley.Item.itemId">
            <summary>The backing field for <see cref="P:StardewValley.Item.ItemId"/>.</summary>
        </member>
        <member name="F:StardewValley.Item._qualifiedItemId">
            <summary>The backing field for <see cref="P:StardewValley.Item.QualifiedItemId"/>.</summary>
        </member>
        <member name="P:StardewValley.Item.ParentSheetIndex">
            <summary>The sprite index within the item's spritesheet texture to draw for this item.</summary>
        </member>
        <member name="P:StardewValley.Item.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Item.ItemId">
             <summary>A key which uniquely identifies the item data among others of the same type.</summary>
             <remarks>
               <para>This identifies the item data, not the instance itself. For example, Wine and Pufferfish have different item IDs, but two instances of Wine have the same ID. Note that flavored items use the same ID as their base item (like Blueberry Wine and Wine).</para>
            
               <para>This should only contain alphanumeric, underscore, and dot characters. This should be globally unique for custom items, but vanilla items may not be for legacy reasons; you can use <see cref="P:StardewValley.Item.QualifiedItemId"/> instead as the globally unique ID.</para>
             </remarks>
        </member>
        <member name="P:StardewValley.Item.QualifiedItemId">
            <summary>A globally unique item ID which includes the <see cref="P:StardewValley.Item.TypeDefinitionId"/> and <see cref="P:StardewValley.Item.ItemId"/>.</summary>
        </member>
        <member name="M:StardewValley.Item.ShouldSerializeparentSheetIndex">
            <summary>Get whether the <see cref="F:StardewValley.Item.parentSheetIndex"/> field should be serialized.</summary>
        </member>
        <member name="M:StardewValley.Item.MigrateLegacyItemId">
            <summary>Set the <see cref="P:StardewValley.Item.ItemId"/> to match the <see cref="P:StardewValley.Item.ParentSheetIndex"/>, for vanilla items in saves created before Stardew Valley 1.6.</summary>
        </member>
        <member name="M:StardewValley.Item.initNetFields">
            <summary>Initialize the collection of fields to sync in multiplayer.</summary>
        </member>
        <member name="M:StardewValley.Item.ResetParentSheetIndex">
            <summary>Reset the parent sheet index to match the underlying item data.</summary>
            <remarks>
              <para>This should only be used for regular items (e.g. machines) before fully recalculating their offset.</para>
              <para>Limitations:</para>
              <list type="bullet">
                <item><description>This doesn't change <see cref="F:StardewValley.Object.showNextIndex"/>.</description></item>
                <item><description>This doesn't reapply dynamic offset logic (e.g. seasonal items with season-specific sprite indexes).</description></item>
              </list>
            </remarks>
        </member>
        <member name="M:StardewValley.Item.ValidateUnqualifiedItemId(System.String)">
            <summary>Validate that the given item ID is unqualified. This logs a warning if the item ID is qualified, and removes the qualifier if it matches <see cref="P:StardewValley.Item.TypeDefinitionId"/>.</summary>
            <param name="id">The item ID to validate and normalize.</param>
        </member>
        <member name="M:StardewValley.Item.GetItemTypeId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Item.addToStack(StardewValley.Item)">
            <summary>Merge an item's stack into this one if they're stackable and this stack has room.</summary>
            <param name="otherStack">The other stack to merge into this one.</param>
            <returns>Returns the amount that couldn't be added to this stack (e.g. because it reached the maximum stack size or the provided item can't stack with this one).</returns>
        </member>
        <member name="M:StardewValley.Item.sellToStorePrice(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Item.salePrice(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Item.appliesProfitMargins">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Item.CanBeLostOnDeath">
            <summary>Get whether the player can lose this item when they die.</summary>
        </member>
        <member name="M:StardewValley.Item.canBeTrashed">
            <summary>Get whether this item can be trashed by players.</summary>
        </member>
        <member name="M:StardewValley.Item.actionWhenPurchased(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Item.onDetachedFromParent">
            <summary>Detach the item from its net sync parent when it's removed from an inventory/player/container. This avoids 'changing net field parent' warnings when it's added to a new parent.</summary>
        </member>
        <member name="M:StardewValley.Item.onEquip(StardewValley.Farmer)">
            <summary>Handle the item being equipped by the player (i.e. added to an equipment slot, or selected as the active tool).</summary>
            <param name="who">The player who equipped the item.</param>
        </member>
        <member name="M:StardewValley.Item.onUnequip(StardewValley.Farmer)">
            <summary>Handle the item being unequipped by the player (i.e. removed from an equipment slot, or deselected as the active tool).</summary>
            <param name="who">The player who unequipped the item.</param>
        </member>
        <member name="M:StardewValley.Item.canBeGivenAsGift">
            <summary>Get whether this item can be given to NPCs as a gift by default.</summary>
            <remarks>This doesn't prevent giving the item for non-gift reasons (e.g. quests), and setting this to true won't allow gifting where there's a specific exclusion (e.g. only Pierre will accept Pierre's Missing Stocklist).</remarks>
        </member>
        <member name="M:StardewValley.Item.getCategoryName">
            <summary>Get the translated display name for the item's category, or an empty string if there is none.</summary>
        </member>
        <member name="M:StardewValley.Item.getCategoryColor">
            <summary>Get the display color for the item's category.</summary>
        </member>
        <member name="P:StardewValley.Item.DisplayName">
            <summary>The translated display name for the item, including metadata like the "(Recipe)" suffix.</summary>
        </member>
        <member name="P:StardewValley.Item.Name">
            <summary>The internal (non-translated) name for the item.</summary>
        </member>
        <member name="P:StardewValley.Item.Stack">
            <summary>The quantity of items in this item stack.</summary>
        </member>
        <member name="M:StardewValley.Item.getOne">
            <summary>Get a new copy of this item, with its stack size reset to one.</summary>
        </member>
        <member name="M:StardewValley.Item.GetOneNew">
             <summary>Called from <see cref="M:StardewValley.Item.getOne"/> to create a minimal instance of the same item type.</summary>
             <remarks>
               Items are cloned in two steps:
               <list type="number">
                <item><description><see cref="M:StardewValley.Item.GetOneNew"/> is called on the original item to create a new instance of the same type.</description></item>
                <item><description><see cref="M:StardewValley.Item.GetOneCopyFrom(StardewValley.Item)"/> is called on the new item to copy its values from the original.</description></item>
               </list>
            
               This separation is needed to let subclasses extend the base copy logic without needing to duplicate it, so <see cref="M:StardewValley.Item.GetOneNew"/> shouldn't copy any values beyond calling the constructor.
             </remarks>
        </member>
        <member name="M:StardewValley.Item.GetOneCopyFrom(StardewValley.Item)">
            <summary>Called from <see cref="M:StardewValley.Item.getOne"/> to copy values from the original instance.</summary>
            <param name="source">The original item instance to copy from.</param>
            <inheritdoc cref="M:StardewValley.Item.GetOneNew" path="/remarks" />
        </member>
        <member name="M:StardewValley.Item.SetTempData``1(System.String,``0)">
            <summary>Set a temporary value that's not synchronized or saved, and can be read from <see cref="F:StardewValley.Item.tempData"/>.</summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="key">The temporary data kay.</param>
            <param name="value">The value to save.</param>
        </member>
        <member name="M:StardewValley.Item.TryGetTempData``1(System.String,``0@)">
            <summary>Get a temporary value that was added via <see cref="M:StardewValley.Item.SetTempData``1(System.String,``0)"/>, if found.</summary>
            <typeparam name="T">The expected value type.</typeparam>
            <param name="key">The temporary data kay.</param>
            <param name="value">The value that was saved, if found.</param>
            <returns>Returns whether the <paramref name="key"/> was found.</returns>
        </member>
        <member name="M:StardewValley.Item.FixStackSize">
            <summary>Ensure the <see cref="F:StardewValley.Item.stack"/> is set to a valid value.</summary>
        </member>
        <member name="M:StardewValley.Item.FixQuality">
            <summary>Ensure the <see cref="F:StardewValley.Item.quality"/> is set to a valid value.</summary>
        </member>
        <member name="M:StardewValley.Item.ForEachItem(StardewValley.Delegates.ForEachItemDelegate)">
            <summary>Perform an action for each item contained within this item (e.g. items stored within a chest, item placed on a table, etc). This doesn't include the item itself.</summary>
            <param name="handler">The action to perform for each item.</param>
            <returns>Returns whether to continue iterating.</returns>
        </member>
        <member name="T:StardewValley.ItemContextTagManager">
            <summary>Handles parsing and caching item context tags.</summary>
        </member>
        <member name="F:StardewValley.ItemContextTagManager.BaseTagsCache">
            <summary>A cache of the base context tags by qualified item ID, excluding context tags added dynamically by the item instance.</summary>
        </member>
        <member name="M:StardewValley.ItemContextTagManager.GetBaseContextTags(System.String)">
            <summary>Get the base context tags for an item ID, excluding context tags added dynamically by the item instance.</summary>
            <param name="itemId">The qualified or unqualified item ID.</param>
        </member>
        <member name="M:StardewValley.ItemContextTagManager.HasBaseTag(System.String,System.String)">
            <summary>Get whether an item has a given base context tag, excluding context tags added dynamically by the item instance.</summary>
            <param name="itemId">The qualified or unqualified item ID.</param>
            <param name="tag">The tag to match.</param>
        </member>
        <member name="M:StardewValley.ItemContextTagManager.DoesTagQueryMatch(System.String,System.Collections.Generic.HashSet{System.String})">
            <summary>Get whether a tag query string (containing one or more context tags) matches the given item tags.</summary>
            <param name="tagQueryString">The comma-delimited list of context tags. Each tag can be negated by prefixing with <c>!</c> (like <c>!wine_item</c> to check if the tags <em>don't</em> contain <c>wine_item</c>).</param>
            <param name="tags">The context tags for the item to check.</param>
        </member>
        <member name="M:StardewValley.ItemContextTagManager.DoAllTagsMatch(System.Collections.Generic.IList{System.String},System.Collections.Generic.HashSet{System.String})">
            <summary>Get whether each tag matches the actual item tags.</summary>
            <param name="requiredTags">The tag values to match against the actual tag. Each tag can be negated by prefixing with <c>!</c> (like <c>!wine_item</c> to check if the tags <em>don't</em> contain <c>wine_item</c>).</param>
            <param name="actualTags">The actual tags for the item being checked.</param>
        </member>
        <member name="M:StardewValley.ItemContextTagManager.DoAnyTagsMatch(System.Collections.Generic.IList{System.String},System.Collections.Generic.HashSet{System.String})">
            <summary>Get whether any tag matches the actual item tags.</summary>
            <param name="requiredTags">The tag values to match against the actual tag. Each tag can be negated by prefixing with <c>!</c> (like <c>!wine_item</c> to check if the tags <em>don't</em> contain <c>wine_item</c>).</param>
            <param name="actualTags">The actual tags for the item being checked.</param>
        </member>
        <member name="M:StardewValley.ItemContextTagManager.DoesTagMatch(System.String,System.Collections.Generic.HashSet{System.String})">
            <summary>Get whether a single-tag query matches the given item tags.</summary>
            <param name="tag">The tag to match. This can be negated by prefixing with <c>!</c> (like <c>!wine_item</c> to check if the tags <em>don't</em> contain <c>wine_item</c>).</param>
            <param name="tags">The list of tags to search for a match to <paramref name="tag"/>.</param>
        </member>
        <member name="M:StardewValley.ItemContextTagManager.SanitizeContextTag(System.String)">
            <summary>Get a tag value with invalid characters (like spaces) escaped.</summary>
            <param name="tag">The raw tag value to sanitize.</param>
        </member>
        <member name="M:StardewValley.ItemContextTagManager.GetColorFromTags(StardewValley.Item)">
            <summary>Get the color of an item based on its <c>color_*</c> context tag, if any.</summary>
            <param name="item">The item whose context tags to check.</param>
        </member>
        <member name="M:StardewValley.ItemContextTagManager.ResetCache">
            <summary>Reset all cached item context tags.</summary>
            <remarks>This is called from <see cref="M:StardewValley.ItemRegistry.RebuildCache"/> and generally shouldn't be called directly by other code.</remarks>
        </member>
        <member name="T:StardewValley.ItemRegistry">
            <summary>Manages item data for the various item types.</summary>
        </member>
        <member name="F:StardewValley.ItemRegistry.IdentifierLookup">
            <summary>A cache of the registered <see cref="F:StardewValley.ItemRegistry.ItemTypes"/> by their <see cref="P:StardewValley.ItemTypeDefinitions.IItemDataDefinition.Identifier"/>.</summary>
        </member>
        <member name="F:StardewValley.ItemRegistry.CachedItems">
            <summary>A cache of parsed and/or resolved item IDs.</summary>
        </member>
        <member name="F:StardewValley.ItemRegistry.ItemTypes">
            <summary>The item types to search for item IDs.</summary>
            <remarks>These should be listed in the priority order for unqualified item IDs. Make sure to call <see cref="M:StardewValley.ItemRegistry.ResetCache"/> when changing this list.</remarks>
        </member>
        <member name="F:StardewValley.ItemRegistry.type_object">
            <summary>The type identifier for items provided by <see cref="T:StardewValley.ItemTypeDefinitions.ObjectDataDefinition"/>.</summary>
        </member>
        <member name="F:StardewValley.ItemRegistry.type_bigCraftable">
            <summary>The type identifier for items provided by <see cref="T:StardewValley.ItemTypeDefinitions.BigCraftableDataDefinition"/>.</summary>
        </member>
        <member name="F:StardewValley.ItemRegistry.type_boots">
            <summary>The type identifier for items provided by <see cref="T:StardewValley.ItemTypeDefinitions.BootsDataDefinition"/>.</summary>
        </member>
        <member name="F:StardewValley.ItemRegistry.type_floorpaper">
            <summary>The type identifier for items provided by <see cref="T:StardewValley.ItemTypeDefinitions.FlooringDataDefinition"/>.</summary>
        </member>
        <member name="F:StardewValley.ItemRegistry.type_furniture">
            <summary>The type identifier for items provided by <see cref="T:StardewValley.ItemTypeDefinitions.FurnitureDataDefinition"/>.</summary>
        </member>
        <member name="F:StardewValley.ItemRegistry.type_hat">
            <summary>The type identifier for items provided by <see cref="T:StardewValley.ItemTypeDefinitions.HatDataDefinition"/>.</summary>
        </member>
        <member name="F:StardewValley.ItemRegistry.type_mannequin">
            <summary>The type identifier for items provided by <see cref="!:MannequinDataDefintion"/>.</summary>
        </member>
        <member name="F:StardewValley.ItemRegistry.type_pants">
            <summary>The type identifier for items provided by <see cref="T:StardewValley.ItemTypeDefinitions.PantsDataDefinition"/>.</summary>
        </member>
        <member name="F:StardewValley.ItemRegistry.type_shirt">
            <summary>The type identifier for items provided by <see cref="T:StardewValley.ItemTypeDefinitions.ShirtDataDefinition"/>.</summary>
        </member>
        <member name="F:StardewValley.ItemRegistry.type_tool">
            <summary>The type identifier for items provided by <see cref="T:StardewValley.ItemTypeDefinitions.ToolDataDefinition"/>.</summary>
        </member>
        <member name="F:StardewValley.ItemRegistry.type_trinket">
            <summary>The type identifier for items provided by <see cref="T:StardewValley.ItemTypeDefinitions.TrinketDataDefinition"/>.</summary>
        </member>
        <member name="F:StardewValley.ItemRegistry.type_wallpaper">
            <summary>The type identifier for items provided by <see cref="T:StardewValley.ItemTypeDefinitions.WallpaperDataDefinition"/>.</summary>
        </member>
        <member name="F:StardewValley.ItemRegistry.type_weapon">
            <summary>The type identifier for items provided by <see cref="T:StardewValley.ItemTypeDefinitions.WeaponDataDefinition"/>.</summary>
        </member>
        <member name="M:StardewValley.ItemRegistry.RegisterItemTypes">
            <summary>Register the vanilla item types.</summary>
            <remarks>This should only be invoked once.</remarks>
        </member>
        <member name="M:StardewValley.ItemRegistry.AddTypeDefinition(StardewValley.ItemTypeDefinitions.IItemDataDefinition)">
            <summary>Add an item type definition which can provide items.</summary>
            <param name="definition">The item type definition to add.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="definition"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="definition"/>'s <see cref="P:StardewValley.ItemTypeDefinitions.IItemDataDefinition.Identifier"/> value is invalid or already exists in the registry.</exception>
        </member>
        <member name="M:StardewValley.ItemRegistry.GetTypeDefinition(System.String)">
            <summary>Get the item type definition with the given identifier, or <c>null</c> if none is found.</summary>
            <param name="identifier">The <see cref="P:StardewValley.ItemTypeDefinitions.IItemDataDefinition.Identifier"/> value to match.</param>
            <returns>Returns the item type definition (if found), else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.ItemRegistry.RequireTypeDefinition(System.String)">
            <summary>Get the item type definition with the given identifier.</summary>
            <param name="identifier">The <see cref="P:StardewValley.ItemTypeDefinitions.IItemDataDefinition.Identifier"/> value to match.</param>
            <returns>Returns the item type definition.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No type definition was found for the given identifier.</exception>
        </member>
        <member name="M:StardewValley.ItemRegistry.RequireTypeDefinition``1(System.String)">
            <summary>Get the item type definition with the given identifier.</summary>
            <param name="identifier">The <see cref="P:StardewValley.ItemTypeDefinitions.IItemDataDefinition.Identifier"/> value to match.</param>
            <returns>Returns the item type definition.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No type definition was found for the given identifier.</exception>
            <exception cref="T:System.InvalidCastException">The type definition found can't be cast to <typeparamref name="TItemDataDefinition"/>.</exception>
        </member>
        <member name="M:StardewValley.ItemRegistry.GetObjectTypeDefinition">
            <summary>Get the item type definition for <see cref="F:StardewValley.ItemRegistry.type_object"/>.</summary>
            <remarks>See <see cref="M:StardewValley.ItemRegistry.GetTypeDefinition(System.String)"/> or <see cref="M:StardewValley.ItemRegistry.RequireTypeDefinition(System.String)"/> for other item types.</remarks>
        </member>
        <member name="M:StardewValley.ItemRegistry.ResetCache">
            <summary>Reset all cached item data.</summary>
        </member>
        <member name="M:StardewValley.ItemRegistry.HasItemId(StardewValley.Item,System.String)">
            <summary>Get whether an item has the given qualified or unqualified item ID. If the item ID is unqualified, this checks whether it's the item that would be selected based on the item type priority order (e.g. <c>128</c> would always match object 128, not hat 128).</summary>
            <param name="item">The item instance to compare.</param>
            <param name="itemId">The item ID to compare with.</param>
        </member>
        <member name="M:StardewValley.ItemRegistry.IsQualifiedItemId(System.String)">
            <summary>Get whether the item ID is qualified with the type definition prefix (like <c>(O)128</c> instead of <c>128</c>).</summary>
            <param name="itemId">The item ID to check.</param>
            <remarks>This only checks the item ID format. To check if the item exists, use <see cref="M:StardewValley.ItemRegistry.Exists(System.String)"/> or <see cref="M:StardewValley.ItemRegistry.ResolveMetadata(System.String)"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.ItemRegistry.QualifyItemId(System.String)">
            <summary>Get a qualified item ID for a given item ID.</summary>
            <param name="itemId">The qualified or unqualified item ID.</param>
            <returns>Returns the qualified item ID (if the item was successfully resolved), else the <paramref name="itemId"/> as-is (if it's already qualified), else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.ItemRegistry.ManuallyQualifyItemId(System.String,System.String,System.Boolean)">
            <summary>Qualify an item ID with the given type, without trying to resolve the item.</summary>
            <param name="itemId">The qualified or unqualified item ID.</param>
            <param name="typeDefinitionId">The type definition ID to set (like <see cref="F:StardewValley.ItemRegistry.type_object"/>).</param>
            <param name="overrideIfQualified">If the <paramref name="itemId"/> is already qualified, whether to replace its type with <paramref name="typeDefinitionId"/>. If false, this method will only change unqualified item IDs.</param>
            <remarks>This is specialized, and usually only used to migrate older data which has a predefined type. You should usually use <see cref="M:StardewValley.ItemRegistry.QualifyItemId(System.String)"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.ItemRegistry.GetMetadata(System.String)">
            <summary>Parse an item ID and get the associated item metadata.</summary>
            <param name="itemId">The qualified or unqualified item ID to parse.</param>
            <returns>Returns the item metadata (if the <paramref name="itemId"/> format is valid), else <c>null</c>. This may return an item which doesn't exist, as long as the ID format is valid. You can use <see cref="M:StardewValley.ItemRegistry.ResolveMetadata(System.String)"/> instead if you need a valid item, or check <see cref="M:StardewValley.ItemTypeDefinitions.ItemMetadata.Exists"/> on the returned value.</returns>
        </member>
        <member name="M:StardewValley.ItemRegistry.Exists(System.String)">
            <summary>Get whether an item exists with the given ID.</summary>
            <param name="itemId">The qualified or unqualified item ID.</param>
        </member>
        <member name="M:StardewValley.ItemRegistry.ResolveMetadata(System.String)">
            <summary>Parse an item ID and get the associated item metadata if it exists.</summary>
            <param name="itemId">The raw item ID to parse.</param>
            <returns>Returns the item metadata (if the <paramref name="itemId"/> format is valid and the item exists), else <c>null</c>. This is a shortcut for calling <see cref="M:StardewValley.ItemRegistry.GetMetadata(System.String)"/> and then checking <see cref="M:StardewValley.ItemTypeDefinitions.ItemMetadata.Exists"/>.</returns>
        </member>
        <member name="M:StardewValley.ItemRegistry.GetTypeDefinitionFor(StardewValley.ItemTypeDefinitions.ItemMetadata)">
            <summary>Get the type definition for the given item metadata.</summary>
            <param name="metadata">The item meta data to resolve.</param>
            <returns>Returns the type definition, or <c>null</c> if none was found.</returns>
            <remarks>This is called from <see cref="M:StardewValley.ItemTypeDefinitions.ItemMetadata.GetTypeDefinition"/> if needed, and should not be called by other code.</remarks>
        </member>
        <member name="M:StardewValley.ItemRegistry.GetData(System.String)">
            <summary>Get the parsed data for an item.</summary>
            <param name="itemId">The qualified or unqualified item ID.</param>
            <returns>Returns the item data if found, else <c>null</c>.</returns>
            <remarks>This is a shortcut for calling <see cref="M:StardewValley.ItemRegistry.ResolveMetadata(System.String)"/> and then <see cref="M:StardewValley.ItemTypeDefinitions.ItemMetadata.GetParsedData"/>.</remarks>
        </member>
        <member name="M:StardewValley.ItemRegistry.GetDataOrErrorItem(System.String)">
            <summary>Get the parsed data for an item.</summary>
            <param name="itemId">The qualified or unqualified item ID.</param>
            <returns>Returns the data for the item if found, else for a default error item.</returns>
        </member>
        <member name="M:StardewValley.ItemRegistry.Create(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Create an item instance.</summary>
            <param name="itemId">The qualified or unqualified item ID.</param>
            <param name="amount">The stack size for the created item, if applicable.</param>
            <param name="quality">The quality for the created item, if applicable.</param>
            <param name="allowNull">Whether to return <c>null</c> if the item doesn't exist. If this is false, an Error Item instance will be returned instead.</param>
            <returns>Returns the item instance (if the <paramref name="itemId"/> is valid), else an Error Item instance (if <paramref name="allowNull"/> is false), else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.ItemRegistry.Create``1(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Create an item instance as the given type.</summary>
            <typeparam name="TItem">The expected item type.</typeparam>
            <param name="itemId">The qualified or unqualified item ID.</param>
            <param name="amount">The stack size for the created item, if applicable.</param>
            <param name="quality">The quality for the created item, if applicable.</param>
            <param name="allowNull">Whether to return <c>null</c> if the item doesn't exist. If this is false, an Error Item instance will be returned instead.</param>
            <returns>Returns the item instance (if the <paramref name="itemId"/> is valid), else an Error Item instance (if <paramref name="allowNull"/> is false), else <c>null</c>.</returns>
            <exception cref="T:System.InvalidCastException">The item type isn't compatible with <typeparamref name="TItem"/>.</exception>
            <remarks>In most cases you should call the non-generic implementation and work with the base <see cref="T:StardewValley.Item"/> type instead.</remarks>
        </member>
        <member name="M:StardewValley.ItemRegistry.GetErrorItemName">
            <summary>Get a translated 'Error Item' name.</summary>
        </member>
        <member name="M:StardewValley.ItemRegistry.GetErrorItemName(System.String)">
            <summary>Get a translated 'Error Item ({id})' name.</summary>
            <param name="itemId">The item ID to display.</param>
        </member>
        <member name="M:StardewValley.ItemRegistry.GetUnnamedItemName">
            <summary>Get a translated 'Unnamed Item' name.</summary>
        </member>
        <member name="M:StardewValley.ItemRegistry.GetUnnamedItemName(System.String)">
            <summary>Get a translated 'Unnamed Item ({id})' name.</summary>
            <param name="itemId">The item ID to display.</param>
        </member>
        <member name="M:StardewValley.ItemRegistry.RebuildCache">
            <summary>Reset the cache and store all known item IDs.</summary>
            <remarks>This minimizes re-scanning item types for unqualified IDs and parsing qualified IDs. See also <see cref="M:StardewValley.ItemRegistry.ResetCache"/> which defers the rebuild until the next item lookup.</remarks>
        </member>
        <member name="F:StardewValley.ItemStockInformation.ItemToSyncStack">
            <summary>If set, the stack count will be synchronized with the given item's. This is very specialized and only used for objects whose available stock are tracked separately from the normal shop stock tracking.</summary>
        </member>
        <member name="F:StardewValley.ItemStockInformation.StackDrawType">
            <summary>Override how the item's stack number is drawn in the shop menu, or <c>null</c> for the default behavior.</summary>
        </member>
        <member name="F:StardewValley.ItemStockInformation.ActionsOnPurchase">
            <summary>The actions to perform when the item is purchased.</summary>
        </member>
        <member name="T:StardewValley.ItemTypeDefinitions.BaseItemDataDefinition">
            <summary>The base implementation for <see cref="T:StardewValley.ItemTypeDefinitions.IItemDataDefinition"/> instances.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.BaseItemDataDefinition.ParsedItemCache">
            <summary>A cache of parsed data by item ID.</summary>
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.BaseItemDataDefinition.Identifier">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.BaseItemDataDefinition.StandardDescriptor">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BaseItemDataDefinition.GetAllIds">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BaseItemDataDefinition.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BaseItemDataDefinition.GetData(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BaseItemDataDefinition.GetErrorData(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BaseItemDataDefinition.CreateItem(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BaseItemDataDefinition.GetSourceRect(StardewValley.ItemTypeDefinitions.ParsedItemData,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BaseItemDataDefinition.GetErrorTexture">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BaseItemDataDefinition.GetErrorTextureName">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BaseItemDataDefinition.GetErrorSourceRect">
            <inheritdoc />
        </member>
        <member name="T:StardewValley.ItemTypeDefinitions.BigCraftableDataDefinition">
            <summary>Manages the data for big craftable items.</summary>
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.BigCraftableDataDefinition.Identifier">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.BigCraftableDataDefinition.StandardDescriptor">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BigCraftableDataDefinition.GetAllIds">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BigCraftableDataDefinition.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BigCraftableDataDefinition.GetData(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BigCraftableDataDefinition.CreateItem(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BigCraftableDataDefinition.GetSourceRect(StardewValley.ItemTypeDefinitions.ParsedItemData,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BigCraftableDataDefinition.GetRawData(System.String)">
            <summary>Get the raw data fields for an item.</summary>
            <param name="itemId">The unqualified item ID.</param>
        </member>
        <member name="T:StardewValley.ItemTypeDefinitions.BootsDataDefinition">
            <summary>Manages the data for boot items.</summary>
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.BootsDataDefinition.Identifier">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.BootsDataDefinition.StandardDescriptor">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BootsDataDefinition.GetAllIds">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BootsDataDefinition.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BootsDataDefinition.GetData(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BootsDataDefinition.GetSourceRect(StardewValley.ItemTypeDefinitions.ParsedItemData,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BootsDataDefinition.CreateItem(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BootsDataDefinition.GetDataSheet">
            <summary>Get the item type's data asset.</summary>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BootsDataDefinition.GetRawData(System.String)">
            <summary>Get the raw data fields for an item.</summary>
            <param name="itemId">The unqualified item ID.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.BootsDataDefinition.GetSpriteIndex(System.String,System.String[])">
            <summary>Get the sprite index for an item.</summary>
            <param name="itemId">The unqualified item ID.</param>
            <param name="fields">The raw data fields.</param>
        </member>
        <member name="T:StardewValley.ItemTypeDefinitions.FlooringDataDefinition">
            <summary>Manages the data for 'floorpaper' flooring items.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.FlooringDataDefinition.LegacyFlooringCount">
            <summary>The number of older floorings in <c>Maps\walls_and_floors</c> that aren't defined in a data asset.</summary>
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.FlooringDataDefinition.Identifier">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.FlooringDataDefinition.GetAllIds">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.FlooringDataDefinition.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.FlooringDataDefinition.GetData(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.FlooringDataDefinition.CreateItem(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.FlooringDataDefinition.GetSourceRect(StardewValley.ItemTypeDefinitions.ParsedItemData,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.FlooringDataDefinition.TryParseLegacyId(System.String,System.Int32@)">
            <summary>Try to parse the ID as a vanilla flooring ID that's not defined in <c>Data/AdditionalWallpaperFlooring</c>.</summary>
            <param name="raw">The item ID to parse.</param>
            <param name="legacyId">The parsed legacy ID, if applicable.</param>
            <returns>Returns whether the ID is a legacy vanilla ID.</returns>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.FlooringDataDefinition.ParseStandardId(System.String,System.String@,System.Int32@)">
            <summary>Parse a standard flooring ID that should be defined in <c>Data/AdditionalWallpaperFlooring</c>. This may include a sprite index within the texture. For example, <c>ExampleMod.CustomFlooring:5</c> is a flooring at index 5 in the spritesheet texture defined under <c>ExampleMod.CustomFlooring</c> in <c>Data/AdditionalWallpaperFlooring</c>.</summary>
            <param name="raw">The item ID to parse.</param>
            <param name="id">The item ID without the index.</param>
            <param name="index">The sprite index, if any.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.FlooringDataDefinition.GetFlooringSet(System.String)">
            <summary>Get a set of flooring items from the data asset.</summary>
            <param name="setId">The unqualified item ID.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.FlooringDataDefinition.GetData(System.String,System.Int32,System.String,System.Object)">
            <summary>Get the base data for a flooring item.</summary>
            <param name="itemId">The unqualified item ID.</param>
            <param name="spriteIndex">The item's index within the sprite sheet.</param>
            <param name="textureName">The asset name for the sprite sheet to use when drawing the item to the screen.</param>
            <param name="rawData">The raw data fields from the underlying data asset if applicable, else <c>null</c>.</param>
        </member>
        <member name="T:StardewValley.ItemTypeDefinitions.FurnitureDataDefinition">
            <summary>Manages the data for furniture items.</summary>
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.FurnitureDataDefinition.Identifier">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.FurnitureDataDefinition.StandardDescriptor">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.FurnitureDataDefinition.GetAllIds">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.FurnitureDataDefinition.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.FurnitureDataDefinition.GetData(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.FurnitureDataDefinition.GetSourceRect(StardewValley.ItemTypeDefinitions.ParsedItemData,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.FurnitureDataDefinition.CreateItem(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.FurnitureDataDefinition.GetDataSheet">
            <summary>Get the item type's data asset.</summary>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.FurnitureDataDefinition.GetRawData(System.String)">
            <summary>Get the raw data fields for an item.</summary>
            <param name="itemId">The unqualified item ID.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.FurnitureDataDefinition.GetSpriteIndex(System.String,System.String[])">
            <summary>Get the sprite index for an item.</summary>
            <param name="itemId">The unqualified item ID.</param>
            <param name="fields">The raw data fields.</param>
        </member>
        <member name="T:StardewValley.ItemTypeDefinitions.HatDataDefinition">
            <summary>Manages the data for hat items.</summary>
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.HatDataDefinition.Identifier">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.HatDataDefinition.StandardDescriptor">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.HatDataDefinition.GetAllIds">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.HatDataDefinition.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.HatDataDefinition.GetData(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.HatDataDefinition.GetSourceRect(StardewValley.ItemTypeDefinitions.ParsedItemData,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.HatDataDefinition.CreateItem(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.HatDataDefinition.GetDataSheet">
            <summary>Get the item type's data asset.</summary>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.HatDataDefinition.GetRawData(System.String)">
            <summary>Get the raw data fields for an item.</summary>
            <param name="itemId">The unqualified item ID.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.HatDataDefinition.GetSpriteIndex(System.String,System.String[])">
            <summary>Get the sprite index for an item.</summary>
            <param name="itemId">The unqualified item ID.</param>
            <param name="fields">The raw data fields.</param>
        </member>
        <member name="T:StardewValley.ItemTypeDefinitions.IHaveItemTypeId">
            <summary>An item or item data which has an item data definition ID.</summary>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.IHaveItemTypeId.GetItemTypeId">
            <summary>Get the unique ID of the item data definition which specifies this item, like <c>(H)</c> for a hat.</summary>
            <remarks>For vanilla items, this matches one of the <see cref="T:StardewValley.ItemRegistry"/>'s <c>type_*</c> fields.</remarks>
        </member>
        <member name="T:StardewValley.ItemTypeDefinitions.IItemDataDefinition">
            <summary>Manages the data for items of a given type.</summary>
            <remarks>This is the low-level implementation for the type. Most code should use the <see cref="T:StardewValley.ItemRegistry"/> instead.</remarks>
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.IItemDataDefinition.Identifier">
            <summary>The unique identifier for the type, prefixed to item names to uniquely qualify them.</summary>
            <remarks>This must be surrounded with parentheses, like <c>(O)</c> for objects or <c>(BC)</c> for big craftables.</remarks>
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.IItemDataDefinition.StandardDescriptor">
            <summary>A legacy type identifier used in context tags.</summary>
            <remarks>All items have a context tag in the form <c>id_{qualified id}</c>. When this value is set, created items will also have an extra context tag in the form <c>id_{descriptor}_{id}</c>. This is intended to support some older item types, and isn't needed for newer item types which have unique item IDs.</remarks>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.IItemDataDefinition.GetAllIds">
            <summary>Get a list of all the item IDs defined by this type.</summary>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.IItemDataDefinition.Exists(System.String)">
            <summary>Get whether an item ID is defined for this type.</summary>
            <param name="itemId">The unqualified item ID.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.IItemDataDefinition.GetData(System.String)">
            <summary>Get the base data for an item.</summary>
            <param name="itemId">The unqualified item ID.</param>
            <returns>Returns the item data (if valid), else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.IItemDataDefinition.GetErrorData(System.String)">
            <summary>Get the base data for a generic Error Item instance.</summary>
            <param name="itemId">The unqualified item ID.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.IItemDataDefinition.CreateItem(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <summary>Create an item instance.</summary>
            <param name="data">The parsed item data.</param>
            <returns>Returns an item instance, or a generic Error Item if it's invalid.</returns>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.IItemDataDefinition.GetSourceRect(StardewValley.ItemTypeDefinitions.ParsedItemData,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <summary>Get the pixel area to render within an item's sprite sheet.</summary>
            <param name="data">The parsed item ID.</param>
            <param name="texture">The texture for which to get the source rectangle.</param>
            <param name="spriteIndex">The sprite index to render.</param>
            <remarks>Note: implementations should not try to access the texture or source rect through <paramref name="data"/>, to avoid an infinite loop when this method is called to initialize it.</remarks>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.IItemDataDefinition.GetErrorTexture">
            <summary>Get the texture to render for broken Error Item instances.</summary>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.IItemDataDefinition.GetErrorTextureName">
            <summary>Get the asset name for the texture returned by <see cref="M:StardewValley.ItemTypeDefinitions.IItemDataDefinition.GetErrorTexture"/>.</summary>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.IItemDataDefinition.GetErrorSourceRect">
            <summary>Get the pixel area to render within the texture returned by <see cref="M:StardewValley.ItemTypeDefinitions.IItemDataDefinition.GetErrorTexture"/>.</summary>
        </member>
        <member name="T:StardewValley.ItemTypeDefinitions.ItemMetadata">
            <summary>General metadata about an item accessed from the <see cref="T:StardewValley.ItemRegistry"/>.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ItemMetadata.ParsedData">
            <summary>The parsed item data.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ItemMetadata.IsParsedDataLoaded">
            <summary>Whether the parsed data has been loaded.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ItemMetadata.TypeDefinition">
            <summary>The item type which defines it, if known.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ItemMetadata.IsTypeResolveAttempted">
            <summary>Whether we tried to resolve the <see cref="P:StardewValley.ItemTypeDefinitions.ItemMetadata.TypeIdentifier"/> (regardless of whether it was found).</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ItemMetadata.TypeDefinitionContainsItem">
            <summary>Whether the <see cref="F:StardewValley.ItemTypeDefinitions.ItemMetadata.TypeDefinition"/> is known and contains this item.</summary>
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.ItemMetadata.LocalItemId">
            <summary>The unqualified item ID.</summary>
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.ItemMetadata.QualifiedItemId">
            <summary>The fully qualified item ID, if known.</summary>
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.ItemMetadata.TypeIdentifier">
            <summary>The item type identifier, if known.</summary>
            <remarks>This may be null for an unqualified item ID which hasn't been resolved via <see cref="M:StardewValley.ItemRegistry.ResolveMetadata(System.String)"/> or <see cref="M:StardewValley.ItemTypeDefinitions.ItemMetadata.GetTypeDefinition"/> yet.</remarks>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ItemMetadata.#ctor(System.String,System.String,System.String)">
            <summary>Construct an instance.</summary>
            <param name="qualifiedItemId">The fully qualified item ID.</param>
            <param name="localItemId">The unqualified item ID.</param>
            <param name="typeIdentifier">>The item type identifier, if known.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ItemMetadata.SetTypeDefinition(System.String,StardewValley.ItemTypeDefinitions.IItemDataDefinition,System.Nullable{System.Boolean})">
            <summary>Set the type definition data.</summary>
            <param name="typeIdentifier">The type identifier for the item, if known.</param>
            <param name="typeDefinition">The item type which defines it, if known.</param>
            <param name="itemExists">Whether the item exists within the <paramref name="typeDefinition"/>.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ItemMetadata.GetTypeDefinition">
            <summary>Get the item type definition which contains this item, if it's valid.</summary>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ItemMetadata.GetParsedData">
            <summary>Get the parsed item data from the underlying type definition, if it exists.</summary>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ItemMetadata.GetParsedOrErrorData">
            <summary>Get the parsed item data from the underlying type definition (if it exists), else data for a generic Error Item instance.</summary>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ItemMetadata.Exists">
            <summary>Get whether the item ID is valid and the item definition returned by <see cref="M:StardewValley.ItemTypeDefinitions.ItemMetadata.GetTypeDefinition"/> contains this item.</summary>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ItemMetadata.CreateItem(System.Int32,System.Int32)">
            <summary>Create an item instance if the metadata is valid.</summary>
            <param name="amount">The stack size for the created item, if applicable.</param>
            <param name="quality">The quality for the created item, if applicable.</param>
            <returns>Returns the item instance (if the metadata is valid), else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ItemMetadata.CreateItemOrErrorItem(System.Int32,System.Int32)">
            <summary>Create an item instance.</summary>
            <param name="amount">The stack size for the created item, if applicable.</param>
            <param name="quality">The quality for the created item, if applicable.</param>
            <returns>Returns the item instance (if the metadata is valid), else a generic Error Item.</returns>
        </member>
        <member name="T:StardewValley.ItemTypeDefinitions.MannequinDataDefinition">
            <summary>Manages the data for mannequin items.</summary>
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.MannequinDataDefinition.Identifier">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.MannequinDataDefinition.StandardDescriptor">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.MannequinDataDefinition.GetAllIds">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.MannequinDataDefinition.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.MannequinDataDefinition.GetData(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.MannequinDataDefinition.CreateItem(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.MannequinDataDefinition.GetSourceRect(StardewValley.ItemTypeDefinitions.ParsedItemData,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.MannequinDataDefinition.GetDataSheet">
            <summary>Get the item type's data asset.</summary>
        </member>
        <member name="T:StardewValley.ItemTypeDefinitions.ObjectDataDefinition">
            <summary>Manages the data for object items.</summary>
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.Identifier">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.StandardDescriptor">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.GetAllIds">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.GetData(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.GetSourceRect(StardewValley.ItemTypeDefinitions.ParsedItemData,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.CreateItem(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.HasExplicitCategory(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <summary>Get whether an object has an explicit category set in <c>Data/Objects</c>, regardless of whether a category is dynamically assigned after it's loaded.</summary>
            <param name="data">The parsed item data to check.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.GetRawPrice(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <summary>Get the raw price field set in <c>Data/Objects</c>.</summary>
            <param name="data">The parsed item data to check.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.CreateFlavoredAgedRoe(StardewValley.Object)">
            <summary>Create a flavored Aged Roe item (like 'Aged Tuna Roe').</summary>
            <param name="ingredient">The roe to age, or the fish whose aged roe to create.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.CreateFlavoredHoney(StardewValley.Object)">
            <summary>Create a flavored honey item (like 'Poppy Honey').</summary>
            <param name="ingredient">The item for which to create a honey, or <c>null</c> for a Wild Honey.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.CreateFlavoredJelly(StardewValley.Object)">
            <summary>Create a flavored jelly item (like 'Apple Jelly').</summary>
            <param name="ingredient">The item to jelly.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.CreateFlavoredJuice(StardewValley.Object)">
            <summary>Create a flavored juice item (like 'Apple Juice').</summary>
            <param name="ingredient">The item for which to create a juice.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.CreateFlavoredPickle(StardewValley.Object)">
            <summary>Create a pickled item (like 'Pickled Beet').</summary>
            <param name="ingredient">The item to pickle.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.CreateFlavoredRoe(StardewValley.Object)">
            <summary>Create a flavored Roe item (like 'Tuna Roe').</summary>
            <param name="ingredient">The fish whose roe to create.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.CreateFlavoredWine(StardewValley.Object)">
            <summary>Create a flavored wine item (like 'Apple Wine').</summary>
            <param name="ingredient">The item for which to create a wine.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.CreateFlavoredBait(StardewValley.Object)">
            <summary>Create a flavored bait item (like 'Squid Bait').</summary>
            <param name="ingredient">The item for which to create a bait.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.CreateFlavoredDriedFruit(StardewValley.Object)">
            <summary>Create a flavored dried fruit item (like 'Dried Apple').</summary>
            <param name="ingredient">The item for which to create a wine.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.CreateFlavoredDriedMushroom(StardewValley.Object)">
            <summary>Create a flavored dried fruit item (like 'Dried Apple').</summary>
            <param name="ingredient">The item for which to create a wine.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.CreateFlavoredSmokedFish(StardewValley.Object)">
            <summary>Create a flavored dried fruit item (like 'Dried Apple').</summary>
            <param name="ingredient">The item for which to create a wine.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.CreateFlavoredItem(StardewValley.Object.PreserveType,StardewValley.Object)">
            <summary>Create a flavored item (like 'Apple Juice').</summary>
            <param name="preserveType">The flavored item type to create.</param>
            <param name="ingredient">The ingredient to apply to the flavored item (like apple for Apple Juice).</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ObjectDataDefinition.GetRawData(System.String)">
            <summary>Get the raw data fields for an item.</summary>
            <param name="itemId">The unqualified item ID.</param>
        </member>
        <member name="T:StardewValley.ItemTypeDefinitions.PantsDataDefinition">
            <summary>Manages the data for pants clothing items.</summary>
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.PantsDataDefinition.Identifier">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.PantsDataDefinition.StandardDescriptor">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.PantsDataDefinition.GetAllIds">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.PantsDataDefinition.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.PantsDataDefinition.GetData(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.PantsDataDefinition.GetSourceRect(StardewValley.ItemTypeDefinitions.ParsedItemData,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.PantsDataDefinition.CreateItem(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <inheritdoc />
        </member>
        <member name="T:StardewValley.ItemTypeDefinitions.ParsedItemData">
            <summary>The base parsed metadata for an item.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ParsedItemData.LoadedTexture">
            <summary>Whether the <see cref="F:StardewValley.ItemTypeDefinitions.ParsedItemData.Texture"/> has been loaded, regardless of whether the load was successful.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ParsedItemData.Texture">
            <summary>The texture containing the sprites to render for this item.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ParsedItemData.DefaultSourceRect">
            <summary>The pixel area for the default sprite within the <see cref="F:StardewValley.ItemTypeDefinitions.ParsedItemData.Texture"/>.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ParsedItemData.ItemType">
            <summary>The item type which defines this item.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ParsedItemData.ItemId">
            <summary>The item's unqualified ID within the <see cref="F:StardewValley.ItemTypeDefinitions.ParsedItemData.ItemType"/>.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ParsedItemData.QualifiedItemId">
            <summary>The item's qualified ID.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ParsedItemData.SpriteIndex">
            <summary>The item's index within the sprite sheet.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ParsedItemData.TextureName">
            <summary>The asset name for the sprite sheet to use when drawing the item to the screen.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ParsedItemData.InternalName">
            <summary>The internal (non-localized) item name.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ParsedItemData.DisplayName">
            <summary>The localized item name.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ParsedItemData.Description">
            <summary>The localized item description.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ParsedItemData.Category">
            <summary>The object category ID.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ParsedItemData.ObjectType">
            <summary>The object type.</summary>
            <remarks>This is the in-game type like <see cref="P:StardewValley.Object.Type"/>, not the item type definition.</remarks>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ParsedItemData.RawData">
            <summary>The raw data fields from the underlying data asset if applicable, else <c>null</c>.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ParsedItemData.IsErrorItem">
            <summary>Whether this is a broken Error Item instance.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.ParsedItemData.ExcludeFromRandomSale">
            <summary>Whether to exclude this item from shops when selecting random items to sell, including catalogues.</summary>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ParsedItemData.#ctor(StardewValley.ItemTypeDefinitions.IItemDataDefinition,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="itemType">The item type which defines this item.</param>
            <param name="itemId">The item's unqualified ID within the <paramref name="itemType"/>.></param>
            <param name="spriteIndex">The item's index within the sprite sheet.</param>
            <param name="textureName">The asset name for the sprite sheet to use when drawing the item to the screen.</param>
            <param name="internalName">The internal (non-localized) item name.</param>
            <param name="displayName">The localized item name.</param>
            <param name="description">The localized item description.</param>
            <param name="category">The object category ID.</param>
            <param name="objectType">The object type.</param>
            <param name="rawData">The raw data fields from the underlying data asset if applicable, else <c>null</c>.</param>
            <param name="isErrorItem">Whether this is a broken Error Item instance.</param>
            <param name="excludeFromRandomSale">Whether to exclude this item from shops when selecting random items to sell, including catalogues.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ParsedItemData.GetItemTypeId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ParsedItemData.GetTexture">
            <summary>Get the texture to render for this item.</summary>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ParsedItemData.GetTextureName">
            <summary>Get the texture name to render for this item.</summary>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ParsedItemData.GetSourceRect(System.Int32,System.Nullable{System.Int32})">
            <summary>Get the pixel rectangle to render for the item's sprite within the texture returned by <see cref="M:StardewValley.ItemTypeDefinitions.ParsedItemData.GetTexture"/> or <see cref="M:StardewValley.ItemTypeDefinitions.ParsedItemData.GetTextureName"/>.</summary>
            <param name="offset">An index offset to apply to the sprite index.</param>
            <param name="spriteIndex">The sprite index to render, or <c>null</c> to use the parsed <see cref="F:StardewValley.ItemTypeDefinitions.ParsedItemData.SpriteIndex"/>.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ParsedItemData.HasCategory">
            <summary>Get whether the item specifies an object category.</summary>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ParsedItemData.LoadTextureIfNeeded">
            <summary>Load the texture data if it's not already loaded.</summary>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ParsedItemData.TryLoadTexture">
            <summary>Load the texture instance.</summary>
        </member>
        <member name="T:StardewValley.ItemTypeDefinitions.ShirtDataDefinition">
            <summary>Manages the data for shirt clothing items.</summary>
            <remarks>Shirt textures must be evenly split into two parts: the left half contains the clothing sprites, and the right half contains equivalent dye masks (if any). The texture can be any width as long as it's evenly split (e.g. three clothing sprites + three dye masks wide).</remarks>
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.ShirtDataDefinition.Identifier">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.ShirtDataDefinition.StandardDescriptor">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ShirtDataDefinition.GetAllIds">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ShirtDataDefinition.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ShirtDataDefinition.GetData(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ShirtDataDefinition.GetSourceRect(StardewValley.ItemTypeDefinitions.ParsedItemData,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ShirtDataDefinition.CreateItem(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <inheritdoc />
        </member>
        <member name="T:StardewValley.ItemTypeDefinitions.ToolDataDefinition">
            <summary>Manages the data for tool items.</summary>
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.ToolDataDefinition.Identifier">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ToolDataDefinition.GetAllIds">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ToolDataDefinition.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ToolDataDefinition.GetData(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ToolDataDefinition.GetSourceRect(StardewValley.ItemTypeDefinitions.ParsedItemData,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ToolDataDefinition.CreateItem(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ToolDataDefinition.GetRawData(System.String)">
            <summary>Get the raw data fields for an item.</summary>
            <param name="itemId">The unqualified item ID.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ToolDataDefinition.CreateToolInstance(StardewValley.ItemTypeDefinitions.ParsedItemData,StardewValley.GameData.Tools.ToolData)">
            <summary>Create an empty instance of a tool's type, if valid.</summary>
            <param name="itemData">The parsed item data.</param>
            <param name="toolData">The tool data.</param>
            <remarks>Note for mods: this method deliberately doesn't allow custom types that aren't part of the game code because that will cause crashes in multiplayer or when saving the game. If you patch this logic to allow a custom class type, you should be aware of the consequences and avoid permanently breaking players' saves when your mod is removed.</remarks>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ToolDataDefinition.GetErrorTool(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <summary>Create an Error Item tool, for use when we don't have a class to initialize.</summary>
            <param name="data">The item data.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.ToolDataDefinition.TrySetProperty(System.Type,StardewValley.Tool,System.String,System.String)">
            <summary>Set a tool property.</summary>
            <param name="type">The tool type.</param>
            <param name="tool">The tool instance.</param>
            <param name="name">The property name.</param>
            <param name="rawValue">The raw property value.</param>
        </member>
        <member name="T:StardewValley.ItemTypeDefinitions.TrinketDataDefinition">
            <summary>Manages the data for trinket items.</summary>
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.TrinketDataDefinition.Identifier">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.TrinketDataDefinition.StandardDescriptor">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.TrinketDataDefinition.GetAllIds">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.TrinketDataDefinition.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.TrinketDataDefinition.GetData(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.TrinketDataDefinition.CreateItem(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.TrinketDataDefinition.GetSourceRect(StardewValley.ItemTypeDefinitions.ParsedItemData,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.TrinketDataDefinition.GetDataSheet">
            <summary>Get the item type's data asset.</summary>
        </member>
        <member name="T:StardewValley.ItemTypeDefinitions.WallpaperDataDefinition">
            <summary>Manages the data for wallpaper items.</summary>
        </member>
        <member name="F:StardewValley.ItemTypeDefinitions.WallpaperDataDefinition.LegacyWallpaperCount">
            <summary>The number of older wallpapers in <c>Maps\walls_and_floors</c> that aren't defined in a data asset.</summary>
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.WallpaperDataDefinition.Identifier">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.WallpaperDataDefinition.GetAllIds">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.WallpaperDataDefinition.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.WallpaperDataDefinition.GetData(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.WallpaperDataDefinition.GetSourceRect(StardewValley.ItemTypeDefinitions.ParsedItemData,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.WallpaperDataDefinition.CreateItem(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.WallpaperDataDefinition.TryParseLegacyId(System.String,System.Int32@)">
            <summary>Try to parse the ID as a vanilla wallpaper ID that's not defined in <c>Data/AdditionalWallpaperFlooring</c>.</summary>
            <param name="raw">The item ID to parse.</param>
            <param name="legacyId">The parsed legacy ID, if applicable.</param>
            <returns>Returns whether the ID is a legacy vanilla ID.</returns>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.WallpaperDataDefinition.ParseStandardId(System.String,System.String@,System.Int32@)">
            <summary>Parse a standard wallpaper ID that should be defined in <c>Data/AdditionalWallpaperFlooring</c>. This may include a sprite index within the texture. For example, <c>ExampleMod.CustomWallpapers:5</c> is a wallpaper at index 5 in the spritesheet texture defined under <c>ExampleMod.CustomWallpapers</c> in <c>Data/AdditionalWallpaperFlooring</c>.</summary>
            <param name="raw">The item ID to parse.</param>
            <param name="id">The item ID without the index.</param>
            <param name="index">The sprite index, if any.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.WallpaperDataDefinition.GetWallpaperSet(System.String)">
            <summary>Get a set of wallpaper items from the data asset.</summary>
            <param name="setId">The unqualified item ID.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.WallpaperDataDefinition.GetData(System.String,System.Int32,System.String,System.Object)">
            <summary>Get the base data for a wallpaper item.</summary>
            <param name="itemId">The unqualified item ID.</param>
            <param name="spriteIndex">The item's index within the sprite sheet.</param>
            <param name="textureName">The asset name for the sprite sheet to use when drawing the item to the screen.</param>
            <param name="rawData">The raw data fields from the underlying data asset if applicable, else <c>null</c>.</param>
        </member>
        <member name="T:StardewValley.ItemTypeDefinitions.WeaponDataDefinition">
            <summary>Manages the data for weapon items.</summary>
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.WeaponDataDefinition.Identifier">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.ItemTypeDefinitions.WeaponDataDefinition.StandardDescriptor">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.WeaponDataDefinition.GetAllIds">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.WeaponDataDefinition.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.WeaponDataDefinition.GetData(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.WeaponDataDefinition.GetSourceRect(StardewValley.ItemTypeDefinitions.ParsedItemData,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.WeaponDataDefinition.CreateItem(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.WeaponDataDefinition.GetRawData(System.String)">
            <summary>Get the raw data fields for an item.</summary>
            <param name="itemId">The unqualified item ID.</param>
        </member>
        <member name="M:StardewValley.ItemTypeDefinitions.WeaponDataDefinition.GetSpriteIndex(System.String,System.String[])">
            <summary>Get the sprite index for an item.</summary>
            <param name="itemId">The unqualified item ID.</param>
            <param name="fields">The raw data fields.</param>
        </member>
        <member name="E:StardewValley.KeyboardInput.CharEntered">
            <summary>
            Event raised when a character has been entered.
            </summary>
        </member>
        <member name="E:StardewValley.KeyboardInput.KeyDown">
            <summary>
            Event raised when a key has been pressed down. May fire multiple times due to keyboard repeat.
            </summary>
        </member>
        <member name="E:StardewValley.KeyboardInput.KeyUp">
            <summary>
            Event raised when a key has been released.
            </summary>
        </member>
        <member name="M:StardewValley.KeyboardInput.Initialize(Microsoft.Xna.Framework.GameWindow)">
            <summary>
            Initialize the TextInput with the given GameWindow.
            </summary>
            <param name="window">The XNA window to which text input should be linked.</param>
        </member>
        <member name="T:StardewValley.LegacyShims">
            <summary>Wraps newer .NET features that improve performance, but aren't available on .NET Framework platforms.</summary>
        </member>
        <member name="M:StardewValley.LegacyShims.EmptyArray``1">
            <summary>Get an empty array without allocating a new array each time.</summary>
            <typeparam name="T">The array value type.</typeparam>
        </member>
        <member name="M:StardewValley.LegacyShims.SplitAndTrim(System.String,System.Char,System.StringSplitOptions)">
            <summary>Split a string into substrings based on a specified separator, and trim the resulting substrings.</summary>
            <param name="str">The string to split.</param>
            <param name="separator">The character that delimits the substrings within the string.</param>
            <param name="options">The split options to apply.</param>
            <remarks>This method exists for cross-compatibility between .NET Framework and .NET platforms. Mod code should generally use <see cref="M:System.String.Split(System.Char,System.StringSplitOptions)"/> with <see cref="F:System.StringSplitOptions.TrimEntries"/> directly instead.</remarks>
        </member>
        <member name="M:StardewValley.LegacyShims.SplitAndTrim(System.String,System.String,System.StringSplitOptions)">
            <summary>Split a string into substrings based on a specified separator, and trim the resulting substrings.</summary>
            <param name="str">The string to split.</param>
            <param name="separator">The string that delimits the substrings within the string.</param>
            <param name="options">The split options to apply.</param>
            <remarks>This method exists for cross-compatibility between .NET Framework and .NET platforms. Mod code should generally use <see cref="M:System.String.Split(System.String,System.StringSplitOptions)"/> with <see cref="F:System.StringSplitOptions.TrimEntries"/> directly instead.</remarks>
        </member>
        <member name="M:StardewValley.LightSource.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,StardewValley.GameLocation,System.Single)">
            <summary>Draw the light source to the screen if needed.</summary>
            <param name="spriteBatch">The sprite batch being drawn.</param>
            <param name="location">The location containing the light source.</param>
            <param name="lightMultiplier">A multiplier to apply to the light strength (e.g. for the darkness debuff).</param>
        </member>
        <member name="T:StardewValley.LocalizedContentManager">
            <summary>Loads assets and translations from the game's content folder.</summary>
        </member>
        <member name="F:StardewValley.LocalizedContentManager._CachedContentRoot">
            <summary>The backing field for <see cref="M:StardewValley.LocalizedContentManager.GetContentRoot"/>.</summary>
        </member>
        <member name="T:StardewValley.LocalizedContentManager.LanguageCode">
            <summary>A language supported by the game.</summary>
        </member>
        <member name="F:StardewValley.LocalizedContentManager.LanguageCode.en">
            <summary>The English language.</summary>
        </member>
        <member name="F:StardewValley.LocalizedContentManager.LanguageCode.ja">
            <summary>The Japanese language.</summary>
        </member>
        <member name="F:StardewValley.LocalizedContentManager.LanguageCode.ru">
            <summary>The Russian language.</summary>
        </member>
        <member name="F:StardewValley.LocalizedContentManager.LanguageCode.zh">
            <summary>The Chinese language.</summary>
        </member>
        <member name="F:StardewValley.LocalizedContentManager.LanguageCode.pt">
            <summary>The Portuguese language.</summary>
        </member>
        <member name="F:StardewValley.LocalizedContentManager.LanguageCode.es">
            <summary>The Spanish language.</summary>
        </member>
        <member name="F:StardewValley.LocalizedContentManager.LanguageCode.de">
            <summary>The German language.</summary>
        </member>
        <member name="F:StardewValley.LocalizedContentManager.LanguageCode.th">
            <summary>The Thai language.</summary>
        </member>
        <member name="F:StardewValley.LocalizedContentManager.LanguageCode.fr">
            <summary>The French language.</summary>
        </member>
        <member name="F:StardewValley.LocalizedContentManager.LanguageCode.ko">
            <summary>The Korean language.</summary>
        </member>
        <member name="F:StardewValley.LocalizedContentManager.LanguageCode.it">
            <summary>The Italian language.</summary>
        </member>
        <member name="F:StardewValley.LocalizedContentManager.LanguageCode.tr">
            <summary>The Turkish language.</summary>
        </member>
        <member name="F:StardewValley.LocalizedContentManager.LanguageCode.hu">
            <summary>The Hungarian language.</summary>
        </member>
        <member name="F:StardewValley.LocalizedContentManager.LanguageCode.mod">
            <summary>A custom language added by a mod.</summary>
        </member>
        <member name="F:StardewValley.LocalizedContentManager._currentLangCode">
            <summary>The backing field for <see cref="P:StardewValley.LocalizedContentManager.CurrentLanguageCode"/>.</summary>
        </member>
        <member name="F:StardewValley.LocalizedContentManager._currentLangString">
            <summary>The backing field for <see cref="P:StardewValley.LocalizedContentManager.CurrentLanguageString"/>.</summary>
        </member>
        <member name="P:StardewValley.LocalizedContentManager.CurrentLanguageString">
            <summary>The current language as a string which appears in localized asset names (like <c>pt-BR</c>).</summary>
        </member>
        <member name="P:StardewValley.LocalizedContentManager.CurrentLanguageCode">
            <summary>The current language as an enum.</summary>
            <remarks>Note that <see cref="F:StardewValley.LocalizedContentManager.LanguageCode.mod"/> is used for any custom language, so you'll need to use <see cref="P:StardewValley.LocalizedContentManager.CurrentLanguageString"/> to distinguish those.</remarks>
        </member>
        <member name="M:StardewValley.LocalizedContentManager.GetContentRoot">
            <summary>Get the absolute path to the root content directory from which this manager loads assets.</summary>
        </member>
        <member name="M:StardewValley.LocalizedContentManager.DoesAssetExist``1(System.String)">
            <summary>Get whether an asset exists without loading it.</summary>
            <typeparam name="T">The expected asset type.</typeparam>
            <param name="assetName">The asset name to check.</param>
        </member>
        <member name="M:StardewValley.LocalizedContentManager.LoadImpl``1(System.String,System.String,StardewValley.LocalizedContentManager.LanguageCode)">
            <summary>Load an asset through the content pipeline.</summary>
            <typeparam name="T">The type of asset to load.</typeparam>
            <param name="baseAssetName">The unlocalized asset name relative to the game's root directory.</param>
            <param name="localizedAssetName">The localized asset name relative to the game's root directory.</param>
            <param name="languageCode">The language for which to load the asset.</param>
        </member>
        <member name="M:StardewValley.LocalizedContentManager.Load``1(System.String)">
            <summary>Load an asset through the content pipeline.</summary>
            <typeparam name="T">The type of asset to load.</typeparam>
            <param name="assetName">The unlocalized asset name relative to the game's root directory.</param>
        </member>
        <member name="M:StardewValley.LocalizedContentManager.Load``1(System.String,StardewValley.LocalizedContentManager.LanguageCode)">
            <summary>Load an asset through the content pipeline.</summary>
            <typeparam name="T">The type of asset to load.</typeparam>
            <param name="assetName">The unlocalized asset name relative to the game's root directory.</param>
            <param name="language">The language for which to load the asset.</param>
        </member>
        <member name="M:StardewValley.LocalizedContentManager.LanguageCodeString(StardewValley.LocalizedContentManager.LanguageCode)">
            <summary>Get the language string which appears in localized asset names for a language (like <c>pt-BR</c>).</summary>
            <param name="code">The language whose asset name code to get.</param>
            <remarks>For the current language, see <see cref="P:StardewValley.LocalizedContentManager.CurrentLanguageString"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.LocalizedContentManager.GetCurrentLanguage">
            <summary>Get the current language as an enum.</summary>
        </member>
        <member name="M:StardewValley.LocalizedContentManager.GetString(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>Read a translation key from a loaded strings asset.</summary>
            <param name="strings">The loaded strings asset.</param>
            <param name="key">The translation key to load.</param>
        </member>
        <member name="M:StardewValley.LocalizedContentManager.IsValidTranslationKey(System.String)">
            <summary>Get whether a string is a valid translation key which can be loaded by methods like <see cref="M:StardewValley.LocalizedContentManager.LoadString(System.String)"/>.</summary>
            <param name="path">The potential translation key to check.</param>
        </member>
        <member name="M:StardewValley.LocalizedContentManager.LoadStringReturnNullIfNotFound(System.String)">
            <summary>Get translation text from a data asset, if found.</summary>
            <param name="path">The translation from which to take the text, in the form <c>assetName:fieldKey</c> like <c>Strings/UI:Confirm</c>.</param>
            <returns>Returns the loaded string if found, else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.LocalizedContentManager.LoadString(System.String)">
            <summary>Get translation text from a data asset.</summary>
            <param name="path">The translation from which to take the text, in the form <c>assetName:fieldKey</c> like <c>Strings/UI:Confirm</c>.</param>
            <returns>Returns the loaded string if found, else the <paramref name="path"/>.</returns>
        </member>
        <member name="M:StardewValley.LocalizedContentManager.PreprocessString(System.String)">
            <summary>Apply generic preprocessing to strings loaded from <see cref="M:StardewValley.LocalizedContentManager.LoadString(System.String)"/> and its overloads.</summary>
            <param name="text">The text to preprocess.</param>
        </member>
        <member name="M:StardewValley.LocalizedContentManager.LoadString(System.String,System.Object)">
            <summary>Get translation text from a data asset.</summary>
            <param name="path">The translation from which to take the text, in the form <c>assetName:fieldKey</c> like <c>Strings/UI:Confirm</c>.</param>
            <param name="sub1">The value with which to replace the <c>{0}</c> placeholder in the loaded text.</param>
            <returns>Returns the loaded string if found, else the <paramref name="path"/>.</returns>
        </member>
        <member name="M:StardewValley.LocalizedContentManager.LoadString(System.String,System.Object,System.Object)">
            <summary>Get translation text from a data asset.</summary>
            <param name="path">The translation from which to take the text, in the form <c>assetName:fieldKey</c> like <c>Strings/UI:Confirm</c>.</param>
            <param name="sub1">The value with which to replace the <c>{0}</c> placeholder in the loaded text.</param>
            <param name="sub2">The value with which to replace the <c>{1}</c> placeholder in the loaded text.</param>
            <returns>Returns the loaded string if found, else the <paramref name="path"/>.</returns>
        </member>
        <member name="M:StardewValley.LocalizedContentManager.LoadString(System.String,System.Object,System.Object,System.Object)">
            <summary>Get translation text from a data asset.</summary>
            <param name="path">The translation from which to take the text, in the form <c>assetName:fieldKey</c> like <c>Strings/UI:Confirm</c>.</param>
            <param name="sub1">The value with which to replace the <c>{0}</c> placeholder in the loaded text.</param>
            <param name="sub2">The value with which to replace the <c>{1}</c> placeholder in the loaded text.</param>
            <param name="sub3">The value with which to replace the <c>{2}</c> placeholder in the loaded text.</param>
            <returns>Returns the loaded string if found, else the <paramref name="path"/>.</returns>
        </member>
        <member name="M:StardewValley.LocalizedContentManager.LoadString(System.String,System.Object[])">
            <summary>Get translation text from a data asset.</summary>
            <param name="path">The translation from which to take the text, in the form <c>assetName:fieldKey</c> like <c>Strings/UI:Confirm</c>.</param>
            <param name="substitutions">The values with which to replace placeholders like <c>{0}</c> in the loaded text.</param>
            <returns>Returns the loaded string if found, else the <paramref name="path"/>.</returns>
        </member>
        <member name="T:StardewValley.InstanceStatics">
            <summary>
            When specified, all static fields in this class will be instanced for split screen multiplayer by default.
            </summary>
        </member>
        <member name="T:StardewValley.InstancedStatic">
            <summary>
            When specified, this static field will be instanced for split screen multiplayer.
            </summary>
        </member>
        <member name="T:StardewValley.NonInstancedStatic">
            <summary>
            When specified, this static field will be remain static for split screen multiplayer.
            </summary>
        </member>
        <member name="M:StardewValley.Locations.AdventureGuild.OnRewardCollected(StardewValley.Item,StardewValley.Farmer,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,StardewValley.GameData.MonsterSlayerQuestData}})">
            <summary>Handle a reward item collected for a completed monster eradication goal.</summary>
            <param name="item">The item that was collected.</param>
            <param name="who">The player who collected the item.</param>
            <param name="completedGoals">The goals for which rewards are being collected.</param>
        </member>
        <member name="M:StardewValley.Locations.AdventureGuild.HasCollectedReward(StardewValley.Farmer,System.String)">
            <summary>Get whether a player has collected the reward for a monster eradication goal.</summary>
            <param name="player">The player to check.</param>
            <param name="goalId">The monster eradication goal ID.</param>
        </member>
        <member name="M:StardewValley.Locations.AdventureGuild.IsComplete(StardewValley.GameData.MonsterSlayerQuestData)">
            <summary>Get whether a monster eradication goal has been completed, regardless of whether the player has collected the rewards yet.</summary>
            <param name="goal">The monster eradication goal data.</param>
        </member>
        <member name="M:StardewValley.Locations.AdventureGuild.OpenRewardMenuIfNeeded(System.Collections.Generic.List{StardewValley.Item},System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,StardewValley.GameData.MonsterSlayerQuestData}})">
            <summary>Open a menu to collect rewards for completed goals, if any.</summary>
            <param name="rewards">The rewards to collect.</param>
            <param name="completedGoals">The goals for which rewards are being collected.</param>
        </member>
        <member name="M:StardewValley.Locations.Beach.checkForMusic(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Locations.BoatTunnel.TicketPrice">
            <summary>The gold price to buy a ticket on the boat.</summary>
        </member>
        <member name="P:StardewValley.Locations.BusStop.TicketPrice">
            <summary>The gold price to buy a ticket on the bus.</summary>
        </member>
        <member name="M:StardewValley.Locations.BusStop.IgnoreTouchActions">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Locations.Cabin.owner">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Locations.Cabin.obsolete_farmhand">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Locations.Cabin.owner"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Locations.Cabin.farmhandReference">
            <summary>A net reference to the farmhand who owns this cabin. Most code should use <see cref="P:StardewValley.Locations.Cabin.owner"/> instead.</summary>
        </member>
        <member name="M:StardewValley.Locations.Cabin.DeleteFarmhand">
            <summary>Fully delete the farmhand associated with this cabin. This will permanently remove their data if the game is saved.</summary>
        </member>
        <member name="M:StardewValley.Locations.Cabin.CanAssignTo(StardewValley.Farmer)">
            <summary>Get whether this cabin is available to assign to a farmhand.</summary>
            <param name="farmhand">The farmhand to check.</param>
        </member>
        <member name="M:StardewValley.Locations.Cabin.AssignFarmhand(StardewValley.Farmer)">
            <summary>Assign a farmhand to this cabin.</summary>
            <param name="farmhand">The farmhand to assign to this cabin.</param>
            <exception cref="T:System.InvalidOperationException">The farmhand can't be assigned to this cabin because an existing player is already assigned. You must call <see cref="M:StardewValley.Locations.Cabin.DeleteFarmhand"/> first in that case.</exception>
        </member>
        <member name="M:StardewValley.Locations.Club.checkForMusic(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.CommunityCenter.performAction(System.String[],StardewValley.Farmer,xTile.Dimensions.Location)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Locations.DecoratableLocation.wallPaper">
            <summary>Obsolete.</summary>
        </member>
        <member name="F:StardewValley.Locations.DecoratableLocation.floor">
            <summary>Obsolete.</summary>
        </member>
        <member name="M:StardewValley.Locations.Desert.IgnoreTouchActions">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.Desert.performTouchAction(System.String[],Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.FarmCave.checkForMusic(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Locations.FarmHouse.owner">
            <summary>The player who owns this home.</summary>
        </member>
        <member name="P:StardewValley.Locations.FarmHouse.HasOwner">
            <summary>Whether the home has an assigned player, regardless of whether they've finished creating their character..</summary>
            <remarks>See also <see cref="P:StardewValley.Locations.FarmHouse.IsOwnerActivated"/>.</remarks>
        </member>
        <member name="P:StardewValley.Locations.FarmHouse.OwnerId">
            <summary>The unique ID of the player who owns this home, if any.</summary>
        </member>
        <member name="P:StardewValley.Locations.FarmHouse.IsOwnerActivated">
            <summary>Whether the home has an assigned player and they've finished creating their character.</summary>
            <remarks>See also <see cref="P:StardewValley.Locations.FarmHouse.HasOwner"/>.</remarks>
        </member>
        <member name="P:StardewValley.Locations.FarmHouse.IsOwnedByCurrentPlayer">
            <summary>Whether the home is owned by the current player.</summary>
        </member>
        <member name="M:StardewValley.Locations.FarmHouse.AddStarterGiftBox(StardewValley.Farm)">
            <summary>Place the starter gift box when the farmhouse is first created.</summary>
            <param name="farm">The farm instance to which a farmhouse is being added.</param>
        </member>
        <member name="M:StardewValley.Locations.FarmHouse.AddStarterFurniture(StardewValley.Farm)">
            <summary>Place the starter furniture when the farmhouse is first created.</summary>
            <param name="farm">The farm instance to which a farmhouse is being added.</param>
        </member>
        <member name="M:StardewValley.Locations.FarmHouse.SetStarterFlooring(StardewValley.Farm,System.String)">
            <summary>Set the initial flooring when the farmhouse is first created, if any.</summary>
            <param name="farm">The farm instance to which a farmhouse is being added.</param>
        </member>
        <member name="M:StardewValley.Locations.FarmHouse.SetStarterWallpaper(StardewValley.Farm,System.String)">
            <summary>Set the initial wallpaper when the farmhouse is first created, if any.</summary>
            <param name="farm">The farm instance to which a farmhouse is being added.</param>
        </member>
        <member name="M:StardewValley.Locations.FarmHouse.HasNpcSpouseOrRoommate">
            <summary>Get whether the player who owns this home is married to or roommates with an NPC.</summary>
        </member>
        <member name="M:StardewValley.Locations.FarmHouse.HasNpcSpouseOrRoommate(System.String)">
            <summary>Get whether the player who owns this home is married to or roommates with the given NPC.</summary>
            <param name="spouseName">The NPC name.</param>
        </member>
        <member name="M:StardewValley.Locations.FarmHouse.GetCellar">
            <summary>Get the cellar location linked to this cabin, or <c>null</c> if there is none.</summary>
        </member>
        <member name="M:StardewValley.Locations.FarmHouse.GetCellarName">
            <summary>Get the name of the cellar location linked to this cabin, or <c>null</c> if there is none.</summary>
        </member>
        <member name="M:StardewValley.Locations.FishShop.performAction(System.String[],StardewValley.Farmer,xTile.Dimensions.Location)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Locations.Forest.obsolete_log">
            <summary>Obsolete. This is only kept to preserve data from old save files. The log blocking access to the Secret Woods is now in <see cref="F:StardewValley.GameLocation.resourceClumps"/>.</summary>
        </member>
        <member name="M:StardewValley.Locations.Forest.ShouldTravelingMerchantVisitToday">
            <summary>Get whether the traveling cart should visit the forest today.</summary>
        </member>
        <member name="M:StardewValley.Locations.Forest.GetTravelingMerchantCartTile">
            <summary>Get the tile coordinates for the top-left corner of the traveling cart's bounding area.</summary>
        </member>
        <member name="M:StardewValley.Locations.IslandEast.performAction(System.String[],StardewValley.Farmer,xTile.Dimensions.Location)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.IslandFarmCave.performAction(System.String[],StardewValley.Farmer,xTile.Dimensions.Location)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.IslandFieldOffice.donatePiece(System.Int32)">
            <summary>
            returns true if a new uncollected reward was added.
            </summary>
            <param name="which"></param>
            <returns></returns>
        </member>
        <member name="M:StardewValley.Locations.IslandFieldOffice.performAction(System.String[],StardewValley.Farmer,xTile.Dimensions.Location)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.IslandHut.performAction(System.String[],StardewValley.Farmer,xTile.Dimensions.Location)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.IslandLocation.SeedsIgnoreSeasonsHere">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.IslandLocation.catchOceanCrabPotFishFromThisSpot(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.IslandLocation.seasonUpdate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.IslandLocation.AreMoonlightJelliesOut">
            <summary>Get whether the moonlight jellies are out right now.</summary>
        </member>
        <member name="M:StardewValley.Locations.IslandNorth.catchOceanCrabPotFishFromThisSpot(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.IslandSecret.performAction(System.String[],StardewValley.Farmer,xTile.Dimensions.Location)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.IslandSouth.CanVisitIslandToday(StardewValley.NPC)">
            <summary>Get whether an NPC can visit the island resort today.</summary>
            <param name="npc">The NPC to check.</param>
        </member>
        <member name="M:StardewValley.Locations.IslandSouth.performAction(System.String[],StardewValley.Farmer,xTile.Dimensions.Location)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.IslandSouth.performTouchAction(System.String[],Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.IslandSouthEastCave.performAction(System.String[],StardewValley.Farmer,xTile.Dimensions.Location)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.IslandWest.CanPlantSeedsHere(System.String,System.Int32,System.Int32,System.Boolean,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.IslandWest.CanPlantTreesHere(System.String,System.Int32,System.Int32,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.IslandWest.performAction(System.String[],StardewValley.Farmer,xTile.Dimensions.Location)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.IslandWest.GetDirtDecayChance(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.IslandWestCave1.performAction(System.String[],StardewValley.Farmer,xTile.Dimensions.Location)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.LibraryMuseum.HasDonatedArtifacts">
            <summary>Get whether any artifacts have been donated to the museum.</summary>
        </member>
        <member name="M:StardewValley.Locations.LibraryMuseum.HasDonatedArtifactAt(Microsoft.Xna.Framework.Vector2)">
            <summary>Get whether an artifact has been placed on a given museum tile.</summary>
            <param name="tile">The tile position to check.</param>
        </member>
        <member name="M:StardewValley.Locations.LibraryMuseum.HasDonatedArtifact(System.String)">
            <summary>Get whether an artifact has been donated to the museum.</summary>
            <param name="itemId">The qualified or unqualified item ID to check.</param>
        </member>
        <member name="M:StardewValley.Locations.LibraryMuseum.IsItemSuitableForDonation(System.String,System.Boolean)">
            <summary>Get whether an item can be donated to the museum.</summary>
            <param name="itemId">The qualified or unqualified item ID.</param>
            <param name="checkDonatedItems">Whether to return false if the item has already been donated to the museum.</param>
        </member>
        <member name="M:StardewValley.Locations.LibraryMuseum.performAction(System.String[],StardewValley.Farmer,xTile.Dimensions.Location)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.LibraryMuseum.getRewardsForPlayer(StardewValley.Farmer)">
            <summary>Get the reward items which can be collected by a player.</summary>
            <param name="player">The player collecting rewards.</param>
        </member>
        <member name="M:StardewValley.Locations.LibraryMuseum.AddNonItemRewards(StardewValley.GameData.Museum.MuseumRewards,System.String,StardewValley.Farmer)">
            <summary>Give the player a set of non-item donation rewards.</summary>
            <param name="data">The museum donation rewards to give to the player.</param>
            <param name="rewardId">The unique ID for <paramref name="data"/>.</param>
            <param name="player">The player collecting rewards.</param>
        </member>
        <member name="M:StardewValley.Locations.LibraryMuseum.AddRewardItemIfUncollected(StardewValley.Farmer,System.Collections.Generic.List{StardewValley.Item},StardewValley.Item)">
            <summary>Add the item to the reward list only if the item hasn't been marked as collected.</summary>
            <param name="player">The player collecting rewards.</param>
            <param name="rewards">The list of rewards to update.</param>
            <param name="rewardItem">The reward to add if it's uncollected.</param>
        </member>
        <member name="M:StardewValley.Locations.LibraryMuseum.HighlightCollectableRewards(StardewValley.Item)">
            <summary>Get whether the player can collect an item from the reward menu.</summary>
            <param name="item">The item to check.</param>
        </member>
        <member name="M:StardewValley.Locations.LibraryMuseum.OpenRearrangeMenu">
            <summary>Open the artifact rearranging menu.</summary>
        </member>
        <member name="M:StardewValley.Locations.LibraryMuseum.OpenRewardMenu">
            <summary>Open the reward collection menu.</summary>
        </member>
        <member name="M:StardewValley.Locations.LibraryMuseum.OpenDonationMenu">
            <summary>Open the artifact donation menu.</summary>
        </member>
        <member name="M:StardewValley.Locations.LibraryMuseum.OnDonationMenuClosed">
            <summary>Handle the player closing the artifact donation screen.</summary>
        </member>
        <member name="M:StardewValley.Locations.LibraryMuseum.OnRewardCollected(StardewValley.Item,StardewValley.Farmer)">
            <summary>Handle the player collecting an item from the reward screen.</summary>
            <param name="item">The item that was collected.</param>
            <param name="who">The player collecting rewards.</param>
        </member>
        <member name="M:StardewValley.Locations.LibraryMuseum.OpenGuntherDialogueMenu">
            <summary>Open the dialogue menu for Gunther.</summary>
        </member>
        <member name="M:StardewValley.Locations.LibraryMuseum.GetDonatedByContextTag(System.Collections.Generic.Dictionary{System.String,StardewValley.GameData.Museum.MuseumRewards})">
            <summary>Get a count of donated items by context tag.</summary>
            <param name="museumRewardData">The museum rewards for which to count context tags.</param>
        </member>
        <member name="M:StardewValley.Locations.LibraryMuseum.CanCollectReward(StardewValley.GameData.Museum.MuseumRewards,System.String,StardewValley.Farmer,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>Get whether a reward can be collected by a player.</summary>
            <param name="reward">The reward data to check.</param>
            <param name="rewardId">The unique ID for the <paramref name="reward"/>.</param>
            <param name="player">The player collecting rewards.</param>
            <param name="countsByTag">The number of donated items matching each context tag.</param>
        </member>
        <member name="M:StardewValley.Locations.ManorHouse.performAction(System.String[],StardewValley.Farmer,xTile.Dimensions.Location)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.Mine.GetBoulderPosition">
            <summary>Get the tile position for the boulder which initially blocks access to the dwarf.</summary>
        </member>
        <member name="M:StardewValley.Locations.MineShaft.ShouldExcludeFromNpcPathfinding">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.MineShaft.checkForMusic(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.MineShaft.GetLevelName(System.Int32)">
            <summary>Get the location name for a generated mine level.</summary>
            <param name="level">The mine level.</param>
        </member>
        <member name="M:StardewValley.Locations.MineShaft.IsGeneratedLevel(StardewValley.GameLocation,System.Int32@)">
            <summary>Get whether a location is a generated mine level.</summary>
            <param name="location">The location to check.</param>
            <param name="level">The parsed mine level, if applicable.</param>
        </member>
        <member name="M:StardewValley.Locations.MineShaft.IsGeneratedLevel(System.String,System.Int32@)">
            <summary>Get whether a location name is a generated mine level.</summary>
            <param name="locationName">The location name to check.</param>
            <param name="level">The parsed mine level, if applicable.</param>
        </member>
        <member name="T:StardewValley.Locations.MovieTheater">
            <summary>The movie theater location.</summary>
            <remarks>See also <see cref="T:StardewValley.Events.MovieTheaterScreeningEvent"/>.</remarks>
        </member>
        <member name="F:StardewValley.Locations.MovieTheater.forceMovieId">
            <summary>If set, the movie ID to watch when a movie is requested, instead of the movie for the current date.</summary>
        </member>
        <member name="M:StardewValley.Locations.MovieTheater.GetMovieData">
            <summary>Get the data for all movies.</summary>
        </member>
        <member name="M:StardewValley.Locations.MovieTheater.GetMovieDataById">
            <summary>Get the data for all movies by ID.</summary>
        </member>
        <member name="M:StardewValley.Locations.MovieTheater.TryGetMovieData(System.String,StardewValley.GameData.Movies.MovieData@)">
            <summary>Get the data for a specific movie, if it exists.</summary>
            <param name="id">The movie ID in <c>Data/Movies</c>.</param>
            <param name="data">The movie data, if found.</param>
            <returns>Returns whether the movie data was found.</returns>
        </member>
        <member name="M:StardewValley.Locations.MovieTheater.GetMovieIdFromLegacyIndex(System.String)">
            <summary>Get the movie ID corresponding to a pre-1.6 movie index.</summary>
            <param name="id">The movie index.</param>
        </member>
        <member name="M:StardewValley.Locations.MovieTheater.GetSourceRectForScreen(System.Int32,System.Int32)">
            <summary>Get the pixel area in a movie's spritesheet which contains a screen frame.</summary>
            <param name="movieIndex">The movie's sprite index in its spritesheet.</param>
            <param name="frame">The screen index within the movie's area.</param>
        </member>
        <member name="M:StardewValley.Locations.MovieTheater.GetSourceRectForPoster(System.Int32)">
            <summary>Get the pixel area in a movie's spritesheet which contains a screen frame.</summary>
            <param name="movieIndex">The movie's sprite index in its spritesheet.</param>
        </member>
        <member name="M:StardewValley.Locations.MovieTheater.GetMovieToday">
            <summary>Get the movie that plays today.</summary>
        </member>
        <member name="M:StardewValley.Locations.MovieTheater.GetMoviesForSeason(StardewValley.WorldDate)">
            <summary>Get the movies that play in a given season.</summary>
            <param name="date">The date whose season and year to check.</param>
        </member>
        <member name="M:StardewValley.Locations.MovieTheater.GetMovieForDate(StardewValley.WorldDate)">
            <summary>Get the movie that plays on the given date.</summary>
            <param name="date">The date to check.</param>
        </member>
        <member name="M:StardewValley.Locations.MovieTheater.GetUpcomingMovie">
            <summary>Get the next different movie that will play after today.</summary>
        </member>
        <member name="M:StardewValley.Locations.MovieTheater.GetUpcomingMovieForDate(StardewValley.WorldDate)">
            <summary>Get the next different movie that will play after the given date.</summary>
            <param name="afterDate">The date of the current movie for which to get the upcoming movie.</param>
        </member>
        <member name="M:StardewValley.Locations.MovieTheater.MovieYearMatches(StardewValley.GameData.Movies.MovieData,System.Int32)">
            <summary>Get whether a movie should play in a given year.</summary>
            <param name="movie">The movie data to check.</param>
            <param name="year">The relative year when the movie theater was built (e.g. 0 if built this year).</param>
        </member>
        <member name="M:StardewValley.Locations.MovieTheater.MovieSeasonMatches(StardewValley.GameData.Movies.MovieData,StardewValley.Season)">
            <summary>Get whether a movie should play in a given season.</summary>
            <param name="movie">The movie data to check.</param>
            <param name="season">The calendar season.</param>
        </member>
        <member name="M:StardewValley.Locations.MovieTheater.checkForMusic(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.MovieTheater.GetConcessionItem(System.String)">
            <summary>Get a movie concession.</summary>
            <param name="id">The concession ID.</param>
        </member>
        <member name="M:StardewValley.Locations.MovieTheater.performTouchAction(System.String[],Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.MovieTheater.performAction(System.String[],StardewValley.Farmer,xTile.Dimensions.Location)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.MovieTheater.ClearCachedConcessionTastes">
            <summary>Reset the cached concession tastes, so they're reloaded from <c>Data/ConcessionTastes</c> next time they're accessed.</summary>
        </member>
        <member name="M:StardewValley.Locations.Summit.checkForMusic(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.Summit.TryDrawNpc(System.String,StardewValley.GameData.Characters.CharacterData,System.Int32,System.Int32)">
            <summary>Try to draw an NPC in the ending slide show.</summary>
            <param name="name">The NPC's internal name.</param>
            <param name="data">The NPC's content data.</param>
            <param name="animationInterval">The interval for their walking animation.</param>
            <param name="delayBeforeAnimationStart">The millisecond delay until they begin walking across the screen.</param>
        </member>
        <member name="M:StardewValley.Locations.Town.CanPlantTreesHere(System.String,System.Int32,System.Int32,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.VolcanoDungeon.checkForMusic(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.VolcanoDungeon.GetLevelName(System.Int32)">
            <summary>Get the location name for a generated Volcano Dungeon level.</summary>
            <param name="level">The dungeon level.</param>
        </member>
        <member name="M:StardewValley.Locations.VolcanoDungeon.IsGeneratedLevel(System.String,System.Int32@)">
            <summary>Get whether a location name is a generated Volcano Dungeon level.</summary>
            <param name="locationName">The location name to check.</param>
            <param name="level">The parsed dungeon level, if applicable.</param>
        </member>
        <member name="M:StardewValley.Locations.VolcanoDungeon.ShouldExcludeFromNpcPathfinding">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Locations.VolcanoDungeon.performTouchAction(System.String[],Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.AnimalHouse.OnParentBuildingUpgraded(StardewValley.Buildings.Building)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.AnimalHouse.addNewHatchedAnimal(System.String)">
            <summary>Hatch an incubated animal egg that's ready to hatch, if there are any.</summary>
            <param name="name">The name of the animal to set.</param>
        </member>
        <member name="M:StardewValley.AnimalHouse.adoptAnimal(StardewValley.FarmAnimal)">
            <summary>Add an animal to this location and set the location as the animal's home.</summary>
            <param name="animal">The animal to adopt.</param>
        </member>
        <member name="M:StardewValley.AnimalHouse.dropObject(StardewValley.Object,Microsoft.Xna.Framework.Vector2,xTile.Dimensions.Rectangle,System.Boolean,StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Farm.housePaintColor">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="F:StardewValley.Buildings.Building.netBuildingPaintColor"/> instead.</summary>
        </member>
        <member name="M:StardewValley.Farm.AddDefaultBuildings(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Farm.GetStarterShippingBinLocation">
            <summary>Get the tile position at which the shipping bin should be created when it's missing.</summary>
        </member>
        <member name="M:StardewValley.Farm.GetStarterPetBowlLocation">
            <summary>Get the tile position at which the pet bowl should be created when it's missing.</summary>
        </member>
        <member name="M:StardewValley.Farm.GetStarterFarmhouseLocation">
            <summary>Get the tile position at which the farmhouse should be created when it's missing.</summary>
            <remarks>See also <see cref="M:StardewValley.Farm.GetMainFarmHouseEntry"/>.</remarks>
        </member>
        <member name="M:StardewValley.Farm.GetGreenhouseStartLocation">
            <summary>Get the tile position at which the greenhouse should be created when it's missing.</summary>
        </member>
        <member name="M:StardewValley.Farm.catchOceanCrabPotFishFromThisSpot(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Farm.OnBuildingMoved(StardewValley.Buildings.Building)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Farm.ShouldExcludeFromNpcPathfinding">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Farm.GetMainFarmHouseEntry">
            <summary>Get the door tile position for the farmhouse.</summary>
            <remarks>See also <see cref="M:StardewValley.Farm.GetStarterFarmhouseLocation"/>.</remarks>
        </member>
        <member name="M:StardewValley.Farm.GetMainFarmHouse">
            <summary>Get the main player's farmhouse, if found.</summary>
        </member>
        <member name="F:StardewValley.GameLocation.OceanCrabPotFishTypes">
            <summary>The ocean fish types.</summary>
        </member>
        <member name="F:StardewValley.GameLocation.DefaultCrabPotFishTypes">
            <summary>The default fish types caught by crab pots in all locations which don't have a specific value in <c>Data/Locations</c>.</summary>
        </member>
        <member name="F:StardewValley.GameLocation.seasonOverride">
            <summary>The cached value for <see cref="M:StardewValley.GameLocation.GetSeason"/>.</summary>
            <remarks>Most code should use <see cref="M:StardewValley.GameLocation.GetSeason"/> instead.</remarks>
        </member>
        <member name="F:StardewValley.GameLocation.locationContextId">
            <summary>The cached location context ID for <see cref="M:StardewValley.GameLocation.GetLocationContextId"/>.</summary>
            <remarks>Most code should use <see cref="M:StardewValley.GameLocation.GetLocationContextId"/> or <see cref="M:StardewValley.GameLocation.GetLocationContext"/> instead.</remarks>
        </member>
        <member name="F:StardewValley.GameLocation.parentLocationName">
            <summary>The unique name of the parent location, if applicable.</summary>
        </member>
        <member name="T:StardewValley.GameLocation.DamagePlayersEventArg">
            <summary>A request to damage players who overlap a bounding box within the current location.</summary>
        </member>
        <member name="F:StardewValley.GameLocation.DamagePlayersEventArg.Area">
            <summary>The location pixel area where players will take damage.</summary>
        </member>
        <member name="F:StardewValley.GameLocation.DamagePlayersEventArg.Damage">
            <summary>The amount of damage the player should take.</summary>
        </member>
        <member name="F:StardewValley.GameLocation.DamagePlayersEventArg.IsBomb">
            <summary>Whether the damage source was a bomb.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.DamagePlayersEventArg.Read(System.IO.BinaryReader)">
            <summary>Reads the request data from a net-sync stream.</summary>
            <param name="reader">The binary stream to read.</param>
        </member>
        <member name="M:StardewValley.GameLocation.DamagePlayersEventArg.Write(System.IO.BinaryWriter)">
            <summary>Writes the request data to a net-sync stream.</summary>
            <param name="writer">The binary stream to write to.</param>
        </member>
        <member name="F:StardewValley.GameLocation.isAlwaysActive">
             <summary>Whether this location should always be synchronized in multiplayer. </summary>
             <remarks>
               <para>This value should only be set when the location is instantiated, it shouldn't be modified during gameplay.</para>
            
               <para>Most code should call <see cref="M:StardewValley.Multiplayer.isAlwaysActiveLocation(StardewValley.GameLocation)"/> instead.</para>
             </remarks>
        </member>
        <member name="P:StardewValley.GameLocation.ExtraMillisecondsPerInGameMinute">
            <summary>The number of milliseconds to add to <see cref="F:StardewValley.Game1.realMilliSecondsPerGameMinute"/> when calculating the flow of time within this location.</summary>
        </member>
        <member name="F:StardewValley.GameLocation._activeTerrainFeatures">
            <summary>The terrain features whose <see cref="M:StardewValley.TerrainFeatures.TerrainFeature.tickUpdate(Microsoft.Xna.Framework.GameTime)"/> method should be called on each tick.</summary>
        </member>
        <member name="P:StardewValley.GameLocation.IsTemporary">
            <summary>Whether this is a temporary location for a festival or event.</summary>
            <remarks>This is set automatically based on <see cref="M:StardewValley.GameLocation.IsTemporaryName(System.String)"/>.</remarks>
        </member>
        <member name="F:StardewValley.GameLocation.damagePlayersEvent">
            <summary>An event raised to damage players within the current location.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.SeedsIgnoreSeasonsHere">
            <summary>Whether seeds and sapling can be planted and grown in any season here.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.CanPlantSeedsHere(System.String,System.Int32,System.Int32,System.Boolean,System.String@)">
            <summary>Get whether crop seeds can be planted in this location.</summary>
            <param name="itemId">The qualified or unqualified item ID for the seed being planted.</param>
            <param name="tileX">The X tile position for which to apply location-specific overrides.</param>
            <param name="tileY">The Y tile position for which to apply location-specific overrides.</param>
            <param name="isGardenPot">Whether the item is being planted in a garden pot.</param>
            <param name="deniedMessage">The translated message to show to the user indicating why it can't be planted, if applicable.</param>
        </member>
        <member name="M:StardewValley.GameLocation.CanPlantTreesHere(System.String,System.Int32,System.Int32,System.String@)">
            <summary>Get whether tree saplings can be planted in this location.</summary>
            <param name="itemId">The qualified or unqualified item ID for the sapling being planted.</param>
            <param name="tileX">The X tile position for which to apply location-specific overrides.</param>
            <param name="tileY">The Y tile position for which to apply location-specific overrides.</param>
            <param name="deniedMessage">The translated message to show to the user indicating why it can't be planted, if applicable.</param>
        </member>
        <member name="M:StardewValley.GameLocation.CheckItemPlantRules(System.String,System.Boolean,System.Boolean,System.String@)">
            <summary>Get whether a crop or tree can be planted here according to the planting rules in its data.</summary>
            <param name="itemId">The qualified or unqualified item ID for the seed or sapling being planted.</param>
            <param name="isGardenPot">Whether the item is being planted in a garden pot.</param>
            <param name="defaultAllowed">The result to return when no rules apply, or the selected rule uses <see cref="F:StardewValley.GameData.PlantableResult.Default"/>.</param>
            <param name="deniedMessage">The translated message to show to the user indicating why it can't be planted, if applicable.</param>
            <remarks>This is a low-level method which doesn't check higher-level requirements. Most code should call <see cref="M:StardewValley.GameLocation.CanPlantSeedsHere(System.String,System.Int32,System.Int32,System.Boolean,System.String@)"/> or <see cref="M:StardewValley.GameLocation.CanPlantTreesHere(System.String,System.Int32,System.Int32,System.String@)"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.GameLocation.CheckItemPlantRules(System.Collections.Generic.List{StardewValley.GameData.PlantableRule},System.Boolean,System.Boolean,System.String@)">
            <summary>Get whether a crop or tree can be planted here according to the planting rules in its data.</summary>
            <param name="rules">The plantable rules to check.</param>
            <param name="isGardenPot">Whether the item is being planted in a garden pot.</param>
            <param name="defaultAllowed">The result to return when no rules apply, or the selected rule uses <see cref="F:StardewValley.GameData.PlantableResult.Default"/>.</param>
            <param name="deniedMessage">The translated message to show to the user indicating why it can't be planted, if applicable.</param>
            <remarks>This is a low-level method which doesn't check higher-level requirements. Most code should call <see cref="M:StardewValley.GameLocation.CanPlantSeedsHere(System.String,System.Int32,System.Int32,System.Boolean,System.String@)"/> or <see cref="M:StardewValley.GameLocation.CanPlantTreesHere(System.String,System.Int32,System.Int32,System.String@)"/> instead.</remarks>
        </member>
        <member name="P:StardewValley.GameLocation.modData">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.GameLocation.modDataForSerialization">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.GameLocation.OnNameChanged">
            <summary>Reset cached data when the name or unique name changes.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.OnParentLocationChanged">
            <summary>Reset cached data when the parent location changes.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.OnParentBuildingUpgraded(StardewValley.Buildings.Building)">
            <summary>Update when the building containing this location is upgraded, if applicable.</summary>
            <param name="building">The building containing this location.</param>
        </member>
        <member name="M:StardewValley.GameLocation.OnObjectAdded(Microsoft.Xna.Framework.Vector2,StardewValley.Object)">
            <summary>Handle an object added to the location.</summary>
            <param name="tile">The tile position.</param>
            <param name="obj">The object that was added.</param>
        </member>
        <member name="M:StardewValley.GameLocation.OnResourceClumpAdded(StardewValley.TerrainFeatures.ResourceClump)">
            <summary>Handle a resource clump added to the location.</summary>
            <param name="obj">The resource clump that was added.</param>
        </member>
        <member name="M:StardewValley.GameLocation.OnResourceClumpRemoved(StardewValley.TerrainFeatures.ResourceClump)">
            <summary>Handle a resource clump removed from the location.</summary>
            <param name="tile">The tile position.</param>
            <param name="obj">The resource clump that was removed.</param>
        </member>
        <member name="M:StardewValley.GameLocation.OnTerrainFeatureAdded(StardewValley.TerrainFeatures.TerrainFeature,Microsoft.Xna.Framework.Vector2)">
            <summary>Handle a terrain feature added to the location.</summary>
            <param name="tile">The tile position.</param>
            <param name="obj">The terrain feature that was added.</param>
        </member>
        <member name="M:StardewValley.GameLocation.OnTerrainFeatureRemoved(StardewValley.TerrainFeatures.TerrainFeature)">
            <summary>Handle a terrain feature removed from the location.</summary>
            <param name="tile">The tile position.</param>
            <param name="obj">The terrain feature that was removed.</param>
        </member>
        <member name="M:StardewValley.GameLocation.GetSeasonIndex">
            <summary>Get the season which currently applies to this location as a numeric index.</summary>
            <remarks>Most code should use <see cref="M:StardewValley.GameLocation.GetSeason"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.GameLocation.LoadSeasonOverride">
            <summary>Read the override season from the map or location context.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.GetSeason">
            <summary>Get the season which currently applies to this location.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.GetSeasonKey">
            <summary>Get the season which currently applies to this location as a string.</summary>
            <remarks>Most code should use <see cref="M:StardewValley.GameLocation.GetSeason"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.GameLocation.IsSpringHere">
            <summary>Get whether it's spring in this location's context.</summary>
            <remarks>This is a shortcut for convenience. When checking multiple season, consider caching the result from <see cref="M:StardewValley.GameLocation.GetSeason"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.GameLocation.IsSummerHere">
            <summary>Get whether it's summer in this location's context.</summary>
            <inheritdoc cref="M:StardewValley.GameLocation.IsSpringHere" path="/remarks" />
        </member>
        <member name="M:StardewValley.GameLocation.IsFallHere">
            <summary>Get whether it's fall in this location's context.</summary>
            <inheritdoc cref="M:StardewValley.GameLocation.IsSpringHere" path="/remarks" />
        </member>
        <member name="M:StardewValley.GameLocation.IsWinterHere">
            <summary>Get whether it's winter in this location's context.</summary>
            <inheritdoc cref="M:StardewValley.GameLocation.IsSpringHere" path="/remarks" />
        </member>
        <member name="M:StardewValley.GameLocation.GetWeather">
            <summary>Get the weather which applies in this location's context.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.IsRainingHere">
            <summary>Get whether it's raining in this location's context (regardless of whether the player is currently indoors and sheltered from the rain).</summary>
        </member>
        <member name="M:StardewValley.GameLocation.IsGreenRainingHere">
            <summary>Get whether it's green raining in this location's context (regardless of whether the player is currently indoors and sheltered from the green rain).</summary>
        </member>
        <member name="M:StardewValley.GameLocation.IsLightningHere">
            <summary>Get whether it's storming in this location's context (regardless of whether the player is currently indoors and sheltered from the storm).</summary>
        </member>
        <member name="M:StardewValley.GameLocation.IsSnowingHere">
            <summary>Get whether it's snowing in this location's context (regardless of whether the player is currently indoors and sheltered from the snow).</summary>
        </member>
        <member name="M:StardewValley.GameLocation.IsDebrisWeatherHere">
            <summary>Get whether it's blowing debris like leaves in this location's context (regardless of whether the player is currently indoors and sheltered from the wind).</summary>
        </member>
        <member name="M:StardewValley.GameLocation.IsTemporaryName(System.String)">
            <summary>Get whether a location name matches the pattern used by temporary locations for events or minigames.</summary>
            <param name="name">The location name to check.</param>
        </member>
        <member name="M:StardewValley.GameLocation.AddDefaultBuildings(System.Boolean)">
            <summary>Add the default buildings which should always exist on the farm, if missing.</summary>
            <param name="load">Whether to call <see cref="M:StardewValley.Buildings.Building.load"/>. This should be true unless you'll be calling it separately.</param>
        </member>
        <member name="M:StardewValley.GameLocation.AddDefaultBuilding(System.String,Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>Add a default building which should always exist on the farm, if it's missing.</summary>
            <param name="id">The building ID in <c>Data/Buildings</c>.</param>
            <param name="tile">The tile position at which to construct it.</param>
            <param name="load">Whether to call <see cref="M:StardewValley.Buildings.Building.load"/>. This should be true unless you'll be calling it separately.</param>
        </member>
        <member name="M:StardewValley.GameLocation.playSound(System.String,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Int32},StardewValley.Audio.SoundContext)">
            <summary>Play a sound for each online player in the location if they can hear it.</summary>
            <param name="audioName">The sound ID to play.</param>
            <param name="position">The tile position from which to play the sound, or <c>null</c> if it should be played throughout the location.</param>
            <param name="pitch">The pitch modifier to apply, or <c>null</c> to keep it as-is.</param>
            <param name="context">The source which triggered the sound.</param>
        </member>
        <member name="M:StardewValley.GameLocation.localSound(System.String,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Int32},StardewValley.Audio.SoundContext)">
            <summary>Play a sound for the current player only, if they can hear it.</summary>
            <param name="audioName">The sound ID to play.</param>
            <param name="position">The tile position from which to play the sound, or <c>null</c> if not applicable.</param>
            <param name="pitch">The pitch modifier to apply, or <c>null</c> to keep it as-is.</param>
            <param name="context">The source which triggered the sound.</param>
        </member>
        <member name="M:StardewValley.GameLocation.cleanUpTileForMapOverride(Microsoft.Xna.Framework.Point)">
            <summary>Destroy any organic material like weeds or twigs, and send any player items to the lost and found. Used to clean up areas before map overrides.</summary>
            <param name="tile">The tile position to clean up.</param>
        </member>
        <member name="M:StardewValley.GameLocation.GetFirstPlayerWarp">
            <summary>Get the first warp which the player can use to leave the location, accounting for any gender restrictions and NPC-only flags if possible.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.IsOutOfBounds(Microsoft.Xna.Framework.Rectangle)">
            <summary>Get whether a pixel area is fully outside the bounds of the map.</summary>
            <param name="pixelPosition">The pixel position.</param>
        </member>
        <member name="M:StardewValley.GameLocation.HandleMusicChange(StardewValley.GameLocation,StardewValley.GameLocation)">
            <summary>Update the music when the player changes location.</summary>
            <param name="oldLocation">The location the player just left.</param>
            <param name="newLocation">The location the player just arrived in.</param>
            <remarks>For changes to music while a location is active, see <see cref="M:StardewValley.GameLocation.checkForMusic(Microsoft.Xna.Framework.GameTime)"/>.</remarks>
        </member>
        <member name="M:StardewValley.GameLocation.checkForMusic(Microsoft.Xna.Framework.GameTime)">
            <summary>Check for music changes while the level is active.</summary>
            <param name="time">The current game time.</param>
            <remarks>This should only be used for music changes while a location is active. Other music changes should be in <see cref="M:StardewValley.GameLocation.HandleMusicChange(StardewValley.GameLocation,StardewValley.GameLocation)"/>.</remarks>
        </member>
        <member name="M:StardewValley.GameLocation.IgnoreTouchActions">
            <summary>Whether to ignore any touch actions the player walks over.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.performTouchAction(System.String,Microsoft.Xna.Framework.Vector2)">
            <summary>Handle a <c>TouchAction</c> property from a <c>Back</c> map tile in the location when a player steps on the tile.</summary>
            <param name="fullActionString">The full action string to parse, including the <c>TouchAction</c> prefix.</param>
            <param name="playerStandingPosition">The tile coordinate containing the tile which was stepped on.</param>
        </member>
        <member name="M:StardewValley.GameLocation.performTouchAction(System.String[],Microsoft.Xna.Framework.Vector2)">
            <summary>Handle a <c>TouchAction</c> property from a <c>Back</c> map tile in the location when a player steps on the tile.</summary>
            <param name="action">The action arguments to parse, including the <c>TouchAction</c> prefix.</param>
            <param name="playerStandingPosition">The tile coordinate containing the tile which was stepped on.</param>
        </member>
        <member name="M:StardewValley.GameLocation.GetContainingBuilding">
            <summary>Get the building which contains this location, if applicable.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.GetParentLocation">
            <summary>Get the location which contains this one, if applicable.</summary>
            <remarks>
              <para>For example, the interior for a farm building will have the farm as its root location.</para>
              <para>See also <see cref="M:StardewValley.GameLocation.GetRootLocation"/>.</para>
            </remarks>
        </member>
        <member name="M:StardewValley.GameLocation.GetRootLocation">
            <summary>Get the parent location which contains this one, or the current location if it has no parent.</summary>
            <remarks>See also <see cref="M:StardewValley.GameLocation.GetParentLocation"/>.</remarks>
        </member>
        <member name="M:StardewValley.GameLocation.onMonsterKilled(StardewValley.Farmer,StardewValley.Monsters.Monster,Microsoft.Xna.Framework.Rectangle)">
            <summary>Handle a monster reaching zero health after being hit by the player.</summary>
            <param name="who">The player who damaged the monster.</param>
            <param name="monster">The monster whose health reached zero.</param>
            <param name="monsterBox">The monster's pixel hitbox.</param>
        </member>
        <member name="M:StardewValley.GameLocation.DayUpdate(System.Int32)">
            <summary>Update the location state when setting up the new day, before the game saves overnight.</summary>
            <param name="dayOfMonth">The current day of month.</param>
            <remarks>See also <see cref="M:StardewValley.GameLocation.OnDayStarted"/>, which happens after saving when the day has started.</remarks>
        </member>
        <member name="M:StardewValley.GameLocation.GetDirtDecayChance(Microsoft.Xna.Framework.Vector2)">
            <summary>Get the probability that a hoed dirt tile decays overnight, as a value between 0 (never) and 1 (always).</summary>
            <param name="tile">The dirt tile position.</param>
        </member>
        <member name="M:StardewValley.GameLocation.RespawnStumpsFromMapProperty">
            <summary>If the location's map has the <c>Stumps</c> map property, respawn any missing stumps. This will destroy any objects placed on the same tile.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.getMapProperty(System.String)">
            <summary>Get the value of a map property, if it's defined.</summary>
            <param name="propertyName">The property name to check.</param>
            <returns>Returns the map property value, or null if it's not set.</returns>
        </member>
        <member name="M:StardewValley.GameLocation.TryGetMapProperty(System.String,System.String@)">
            <summary>Get the value of a map property, if it's defined.</summary>
            <param name="propertyName">The property name to check.</param>
            <param name="propertyValue">The map property value, if it's set.</param>
            <returns>Returns whether the map property is set.</returns>
        </member>
        <member name="M:StardewValley.GameLocation.GetMapPropertySplitBySpaces(System.String)">
            <summary>Get the space-delimited values defined by a map property.</summary>
            <param name="propertyName">The property name to read.</param>
            <returns>Returns the map property value, or an empty array if it's empty or unset.</returns>
        </member>
        <member name="M:StardewValley.GameLocation.TryGetMapPropertyAs(System.String,System.Boolean@,System.Boolean)">
            <summary>Get a map property which defines a boolean value.</summary>
            <param name="key">The property name to read.</param>
            <param name="parsed">The parsed boolean value, if the map property was present and valid.</param>
            <param name="required">Whether to log an error if the map property isn't defined.</param>
        </member>
        <member name="M:StardewValley.GameLocation.TryGetMapPropertyAs(System.String,System.Double@,System.Boolean)">
            <summary>Get a map property which defines a space-delimited <see cref="T:System.Double"/> value.</summary>
            <param name="key">The property name to read.</param>
            <param name="parsed">The parsed value, if the map property was present and valid.</param>
            <param name="required">Whether to log an error if the map property isn't defined.</param>
        </member>
        <member name="M:StardewValley.GameLocation.TryGetMapPropertyAs(System.String,Microsoft.Xna.Framework.Point@,System.Boolean)">
            <summary>Get a map property which defines a space-delimited <see cref="T:Microsoft.Xna.Framework.Point"/> position.</summary>
            <param name="key">The property name to read.</param>
            <param name="parsed">The parsed position value, if the map property was present and valid.</param>
            <param name="required">Whether to log an error if the map property isn't defined.</param>
        </member>
        <member name="M:StardewValley.GameLocation.TryGetMapPropertyAs(System.String,Microsoft.Xna.Framework.Vector2@,System.Boolean)">
            <summary>Get a map property which defines a space-delimited <see cref="T:Microsoft.Xna.Framework.Vector2"/> position.</summary>
            <param name="key">The property name to read.</param>
            <param name="parsed">The parsed position value, if the map property was present and valid.</param>
            <param name="required">Whether to log an error if the map property isn't defined.</param>
        </member>
        <member name="M:StardewValley.GameLocation.TryGetMapPropertyAs(System.String,Microsoft.Xna.Framework.Rectangle@,System.Boolean)">
            <summary>Get a map property which defines a space-delimited position and size.</summary>
            <param name="key">The property name to read.</param>
            <param name="parsed">The parsed position value, if the map property was present and valid.</param>
            <param name="required">Whether to log an error if the map property isn't defined.</param>
        </member>
        <member name="M:StardewValley.GameLocation.HasMapPropertyWithValue(System.String)">
            <summary>Get whether a map property is defined and has a non-empty value.</summary>
            <param name="propertyName">The property name to check.</param>
        </member>
        <member name="M:StardewValley.GameLocation.CanItemBePlacedHere(Microsoft.Xna.Framework.Vector2,System.Boolean,StardewValley.CollisionMask,StardewValley.CollisionMask,System.Boolean,System.Boolean)">
            <summary>Get whether items in general can be placed on a tile.</summary>
            <param name="tile">The tile position within the location.</param>
            <param name="itemIsPassable">Whether the item being placed can be walked over by players and characters.</param>
            <param name="collisionMask">The collision types to look for. This should usually be kept default.</param>
            <param name="ignorePassables">The collision types to ignore when they don't block movement (e.g. tilled dirt).</param>
            <param name="useFarmerTile">When checking collisions with farmers, whether to check their tile position instead of their bounding box.</param>
            <param name="ignorePassablesExactly">Whether to use the exact <paramref name="ignorePassables"/> value provided, without adjusting it for <paramref name="itemIsPassable"/>. This should only be true in specialized cases.</param>
        </member>
        <member name="M:StardewValley.GameLocation.IsTileBlockedBy(Microsoft.Xna.Framework.Vector2,StardewValley.CollisionMask,StardewValley.CollisionMask,System.Boolean)">
            <summary>Get whether a tile is either occupied by an object or is a non-passable tile.</summary>
            <param name="tile">The tile position within the location.</param>
            <param name="collisionMask">The collision types to look for. This should usually be kept default.</param>
            <param name="ignorePassables">The collision types to ignore when they don't block movement (e.g. tilled dirt).</param>
            <param name="useFarmerTile">When checking collisions with farmers, whether to check their tile position instead of their bounding box.</param>
        </member>
        <member name="M:StardewValley.GameLocation.IsTileOccupiedBy(Microsoft.Xna.Framework.Vector2,StardewValley.CollisionMask,StardewValley.CollisionMask,System.Boolean)">
            <summary>Get whether a tile is occupied.</summary>
            <param name="tile">The tile position within the location.</param>
            <param name="collisionMask">The collision types to look for. This should usually be kept default.</param>
            <param name="ignorePassables">The collision types to ignore when they don't block movement (e.g. tilled dirt).</param>
            <param name="useFarmerTile">When checking collisions with farmers, whether to check their tile position instead of their bounding box.</param>
        </member>
        <member name="M:StardewValley.GameLocation.GetHoeDirtAtTile(Microsoft.Xna.Framework.Vector2)">
            <summary>Get any tilled dirt at a tile position, whether it's on the ground or in a garden pot.</summary>
            <param name="tile">The tile position to check.</param>
            <returns>Returns the tilled dirt found, else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.GameLocation.isTileHoeDirt(Microsoft.Xna.Framework.Vector2)">
            <summary>Get whether a tile contains a hoe dirt, or an object that should behave like a hoe dirt, such as a Garden Pot.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.isTileLocationOpen(xTile.Dimensions.Location)">
            <summary>Get whether a tile is not on the water, and is unobstructed by a tile on the Buildings layer or higher. This can be used to ensure items don't spawn behind high walls, etc.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.isTileLocationOpen(Microsoft.Xna.Framework.Vector2)">
            <summary>Get whether a tile is not on the water, and is unobstructed by a tile on the Buildings layer or higher. This can be used to ensure items don't spawn behind high walls, etc.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.isTilePlaceable(Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>Get whether a tile is allowed to have an object placed on it. Note that this function does not factor in the tile's current occupancy.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.GetFridge(System.Boolean)">
            <summary>Get the fridge that's part of this map, if it has one.</summary>
            <param name="onlyUnlocked">Whether to only return the fridge if it's available to the player (e.g. they've unlocked the required house upgrade).</param>
        </member>
        <member name="M:StardewValley.GameLocation.GetFridgePosition">
            <summary>Get the tile position of the fridge that's part of this map, if it has one and it's available to the player (e.g. they've unlocked the required house upgrade).</summary>
        </member>
        <member name="M:StardewValley.GameLocation.ActivateKitchen">
            <summary>Open the cooking menu, with ingredients available from any <see cref="M:StardewValley.GameLocation.GetFridge(System.Boolean)"/> or mini-fridges in the location.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.CheckGarbage(System.String,Microsoft.Xna.Framework.Vector2,StardewValley.Farmer,System.Boolean,System.Boolean,System.Action{System.String})">
            <summary>Search a garbage can for a player if they haven't searched it today, and give or drop the resulting item (if any).</summary>
            <param name="id">The unique ID for the garbage can to search.</param>
            <param name="tile">The tile position for the garbage can being searched.</param>
            <param name="who">The player performing the search.</param>
            <param name="playAnimations">Whether to play animations and sounds.</param>
            <param name="reactNpcs">Whether nearby NPCs should react to the search (e.g. friendship point impact or dialogue).</param>
            <param name="logError">Log an error if the search fails due to invalid data, or <c>null</c> to fail silently.</param>
            <returns>Returns whether the garbage can was searched successfully, regardless of whether an item was found.</returns>
        </member>
        <member name="M:StardewValley.GameLocation.TryGetGarbageItem(System.String,System.Double,StardewValley.Item@,StardewValley.GameData.GarbageCans.GarbageCanItemData@,System.Random@,System.Action{System.String})">
            <summary>Try to get the item that would be produced by checking a garbage can in the location, without marking it checked or playing animations or sounds.</summary>
            <param name="id">The garbage can ID in <c>Data/GarbageCans</c>.</param>
            <param name="dailyLuck">The daily luck of the player checking the garbage can.</param>
            <param name="item">The item produced by the garbage can, if any.</param>
            <param name="selected">The data entry which produced the <paramref name="item"/>, if applicable.</param>
            <param name="garbageRandom">The RNG used to select the item, and which would normally be used for subsequent effects like animations.</param>
            <param name="logError">Log an error if the search fails due to invalid data, or <c>null</c> to fail silently.</param>
            <returns>Returns whether an item was produced.</returns>
        </member>
        <member name="M:StardewValley.GameLocation.performAction(System.String,StardewValley.Farmer,xTile.Dimensions.Location)">
            <summary>Handle an <c>Action</c> property from a <c>Buildings</c> map tile in the location when the player interacts with the tile.</summary>
            <param name="fullActionString">The full action string to parse, <strong>excluding</strong> the <c>Action</c> prefix.</param>
            <param name="who">The player performing the action.</param>
            <param name="tileLocation">The tile coordinate of the action to handle.</param>
        </member>
        <member name="M:StardewValley.GameLocation.ShouldIgnoreAction(System.String[],StardewValley.Farmer,xTile.Dimensions.Location)">
            <summary>Get whether an <c>Action</c> property from a <c>Buildings</c> map tile in the location should be ignored, so it doesn't show an action cursor and isn't triggered on click.</summary>
            <param name="action">The action arguments to parse, including the <c>Action</c> prefix.</param>
            <param name="who">The player performing the action.</param>
            <param name="tileLocation">The tile coordinate of the action to handle.</param>
        </member>
        <member name="M:StardewValley.GameLocation.performAction(System.String[],StardewValley.Farmer,xTile.Dimensions.Location)">
            <summary>Handle an <c>Action</c> property from a <c>Buildings</c> map tile in the location when the player interacts with the tile.</summary>
            <param name="action">The action arguments to parse, <strong>excluding</strong> the <c>Action</c> prefix.</param>
            <param name="who">The player performing the action.</param>
            <param name="tileLocation">The tile coordinate of the action to handle.</param>
        </member>
        <member name="M:StardewValley.GameLocation.ShowMineCartMenu(System.String,System.String)">
            <summary>Show a minecart destination menu if the network is unlocked.</summary>
            <param name="networkId">The network whose destinations to show.</param>
            <param name="excludeDestinationId">The destination to hide from the list (usually the ID of the minecart we're using), or <c>null</c> to show all of them.</param>
        </member>
        <member name="M:StardewValley.GameLocation.MinecartWarp(StardewValley.GameData.Minecarts.MinecartDestinationData)">
            <summary>Warp to a minecart destination.</summary>
            <param name="destination">The minecart destination data.</param>
        </member>
        <member name="M:StardewValley.GameLocation.getTotalCrops">
            <summary>Get the number of crops currently planted in this location.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.getTotalCropsReadyForHarvest">
            <summary>Get the number of crops currently planted in this location which are ready to harvest.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.getTotalUnwateredCrops">
            <summary>Get the number of crops currently planted in this location which need to be watered.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.getTotalGreenhouseCropsReadyForHarvest">
            <summary>Get the number of crops currently planted in a greenhouse within this location.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.getTotalOpenHoeDirt">
            <summary>Get the number of tiles currently tilled in this location which don't contain a crop.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.getTotalForageItems">
            <summary>Get the number of forage items currently in this location.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.getNumberOfMachinesReadyForHarvest">
            <summary>Get the number of machines within this location with output ready to collect.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.HandleBuyAction(System.String)">
            <summary>Handle an <c>Action Buy</c> tile property in this location.</summary>
            <param name="which">The legacy shop ID. This is not necessarily the same ID used in <c>Data/ShopData</c>.</param>
            <remarks>This is used to apply hardcoded game logic (like showing a message when Pierre is visiting the island). Most code should use <c>Action OpenShop</c> or <see cref="M:StardewValley.Utility.TryOpenShopMenu(System.String,System.String,System.Boolean)"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.GameLocation.ShowConstructOptions(System.String,System.Int32)">
            <summary>Show a dialogue menu to choose where to construct buildings.</summary>
            <param name="builder">The name of the NPC whose building menu is being shown (the vanilla values are <see cref="F:StardewValley.Game1.builder_robin"/> and <see cref="F:StardewValley.Game1.builder_wizard"/>).</param>
            <param name="page">The page of location names to show, if there are multiple pages.</param>
        </member>
        <member name="M:StardewValley.GameLocation.ShowAnimalShopMenu(System.Action{StardewValley.Menus.PurchaseAnimalsMenu})">
            <summary>Show a shop menu to select a location (if multiple have animal buildings) and purchase animals.</summary>
            <param name="onMenuOpened">An callback to invoke when the purchase menu is opened.</param>
        </member>
        <member name="M:StardewValley.GameLocation.catchOceanCrabPotFishFromThisSpot(System.Int32,System.Int32)">
            <summary>Whether crab pots on a given tile can only catch ocean fish, regardless of the location's crab pot fish areas.</summary>
            <param name="x">The X tile position to check.</param>
            <param name="y">The Y tile position to check.</param>
            <returns>Returns true to only catch ocean fish, or false to apply the normal crab pot behavior based on <c>Data/Locations</c> or <see cref="F:StardewValley.GameLocation.DefaultCrabPotFishTypes"/>.</returns>
        </member>
        <member name="M:StardewValley.GameLocation.GetLocationContextId">
            <summary>Get the unique ID of the location context in <c>Data/LocationContexts</c> which includes this location.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.GetLocationContext">
            <summary>Get the data for the location context in <c>Data/LocationContexts</c> which includes this location.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.InDesertContext">
            <summary>Get whether this location is in the desert context.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.InIslandContext">
            <summary>Get whether this location is in the Ginger Island context.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.InValleyContext">
            <summary>Get whether this location is in the default valley context.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.IsNoSpawnTile(Microsoft.Xna.Framework.Vector2,System.String,System.Boolean)">
            <summary>Get whether the given tile prohibits spawned items.</summary>
            <param name="tile">The tile position to check.</param>
            <param name="type">The spawn type. This can be <c>Grass</c> (weeds, stones, and other debris), <c>Tree</c> (trees), or <c>All</c> (any other type).</param>
        </member>
        <member name="M:StardewValley.GameLocation.GetTilePropertySplitBySpaces(System.String,System.String,System.Int32,System.Int32)">
            <summary>Get the space-delimited values defined by a map property.</summary>
            <param name="propertyName">The property name to read.</param>
            <param name="layerId">The ID for the layer whose tile to check.</param>
            <param name="tileX">The X tile position for the map tile to check.</param>
            <param name="tileY">The Y tile position for the map tile to check.</param>
            <returns>Returns the map property value, or an empty array if it's empty or unset.</returns>
            <remarks>See <see cref="M:StardewValley.GameLocation.doesTileHaveProperty(System.Int32,System.Int32,System.String,System.String,System.Boolean)"/> or <see cref="M:StardewValley.GameLocation.doesTileHavePropertyNoNull(System.Int32,System.Int32,System.String,System.String)"/> to get a tile property without splitting it.</remarks>
        </member>
        <member name="M:StardewValley.GameLocation.isWaterTile(System.Int32,System.Int32)">
            <summary>Whether a tile coordinate matches a map water tile.</summary>
            <param name="xTile">The X tile position.</param>
            <param name="yTile">The Y tile position.</param>
        </member>
        <member name="M:StardewValley.GameLocation.dropObject(StardewValley.Object,Microsoft.Xna.Framework.Vector2,xTile.Dimensions.Rectangle,System.Boolean,StardewValley.Farmer)">
            <summary>Try to add an object to the location.</summary>
            <param name="obj">The object to place. This must be a new instance or <see cref="M:StardewValley.Item.getOne"/> copy; passing a stack that's stored in an inventory will link their state and cause unexpected behaviors.</param>
            <param name="dropLocation">The pixel position at which to place the item.</param>
            <param name="viewport">Unused.</param>
            <param name="initialPlacement">Whether to place the item regardless of the <see cref="F:StardewValley.Object.canBeSetDown"/> field.</param>
            <param name="who">The player placing the object, if applicable.</param>
            <returns>Returns whether the object was added to the location.</returns>
        </member>
        <member name="M:StardewValley.GameLocation.damagePlayers(Microsoft.Xna.Framework.Rectangle,System.Int32,System.Boolean)">
            <summary>Sends a request to damage players within the current location.</summary>
            <param name="area">The location pixel area where players will take damage.</param>
            <param name="damage">The amount of damage the player should take.</param>
            <param name="isBomb">Whether the damage source was a bomb.</param>
        </member>
        <member name="M:StardewValley.GameLocation.passTimeForObjects(System.Int32)">
            <summary>Update all object when the time of day changes.</summary>
            <param name="timeElapsed">The number of minutes that passed.</param>
        </member>
        <member name="M:StardewValley.GameLocation.GetCrabPotFishForTile(Microsoft.Xna.Framework.Vector2)">
            <summary>Get the fish types that can be caught by crab pots on a given tile.</summary>
            <param name="tile">The tile position containing the crab pot.</param>
        </member>
        <member name="M:StardewValley.GameLocation.TryGetFishAreaForTile(Microsoft.Xna.Framework.Vector2,System.String@,StardewValley.GameData.Locations.FishAreaData@)">
            <summary>Get the fish area that applies to the given tile, if any.</summary>
            <param name="tile">The tile to check.</param>
            <param name="id">The fish area ID which applies, if any.</param>
            <param name="data">The fish area data which applies, if any.</param>
        </member>
        <member name="M:StardewValley.GameLocation.GetFishingAreaDisplayName(System.String)">
            <summary>Get the display name for a fishing area, if it has one.</summary>
            <param name="id">The fishing area ID, as returned by <see cref="M:StardewValley.GameLocation.TryGetFishAreaForTile(Microsoft.Xna.Framework.Vector2,System.String@,StardewValley.GameData.Locations.FishAreaData@)"/>.</param>
        </member>
        <member name="M:StardewValley.GameLocation.getFish(System.Single,System.String,System.Int32,StardewValley.Farmer,System.Double,Microsoft.Xna.Framework.Vector2,System.String)">
            <summary>Get a random fish that can be caught in this location.</summary>
            <param name="millisecondsAfterNibble">The number of milliseconds after the fish starting biting before the player reacted and pressed the tool button.</param>
            <param name="bait">The qualified item ID for the bait attached to the fishing rod, if any.</param>
            <param name="waterDepth">The tile distance from the nearest shore.</param>
            <param name="who">The player who's fishing.</param>
            <param name="baitPotency">Unused.</param>
            <param name="bobberTile">The tile position where the fishing rod's bobber is floating.</param>
            <param name="locationName">The name of the location whose fish to get, or <c>null</c> for the current location.</param>
        </member>
        <member name="M:StardewValley.GameLocation.GetFishFromLocationData(System.String,Microsoft.Xna.Framework.Vector2,System.Int32,StardewValley.Farmer,System.Boolean,System.Boolean,StardewValley.GameLocation)">
            <summary>Get a random fish that can be caught for a given location based on its <c>Data\Locations</c> entry. This doesn't include global default fish and special cases; most code should call <see cref="M:StardewValley.GameLocation.getFish(System.Single,System.String,System.Int32,StardewValley.Farmer,System.Double,Microsoft.Xna.Framework.Vector2,System.String)"/> instead.</summary>
            <param name="locationName">The name of the location whose fish to get.</param>
            <param name="bobberTile">The tile position where the fishing rod's bobber is floating.</param>
            <param name="waterDepth">The tile distance from the nearest shore.</param>
            <param name="player">The player who's fishing.</param>
            <param name="isTutorialCatch">Whether this is the player's first catch, so it should be an easy fish for the tutorial.</param>
            <param name="isInherited">Whether we're loading fish indirectly (e.g. via the <c>LOCATION_FISH</c> item query), rather than for the actual location.</param>
            <param name="location">The location instance from which to get context data. If this is <c>null</c>, it'll be loaded based on the <paramref name="locationName"/>; if that fails, generic context info (e.g. current location's weather) will be used instead.</param>
            <returns>Returns the fish to catch, or <c>null</c> if no match was found.</returns>
        </member>
        <member name="M:StardewValley.GameLocation.GetFishFromLocationData(System.String,Microsoft.Xna.Framework.Vector2,System.Int32,StardewValley.Farmer,System.Boolean,System.Boolean,StardewValley.GameLocation,StardewValley.Internal.ItemQueryContext)">
            <summary>Get a random fish that can be caught for a given location based on its <c>Data\Locations</c> entry. This doesn't include global default fish and special cases; most code should call <see cref="M:StardewValley.GameLocation.getFish(System.Single,System.String,System.Int32,StardewValley.Farmer,System.Double,Microsoft.Xna.Framework.Vector2,System.String)"/> instead.</summary>
            <param name="locationName">The name of the location whose fish to get.</param>
            <param name="bobberTile">The tile position where the fishing rod's bobber is floating.</param>
            <param name="waterDepth">The tile distance from the nearest shore.</param>
            <param name="player">The player who's fishing.</param>
            <param name="isTutorialCatch">Whether this is the player's first catch, so it should be an easy fish for the tutorial.</param>
            <param name="isInherited">Whether we're loading fish indirectly (e.g. via the <c>LOCATION_FISH</c> item query), rather than for the actual location.</param>
            <param name="location">The location instance from which to get context data. If this is <c>null</c>, it'll be loaded based on the <paramref name="locationName"/>; if that fails, generic context info (e.g. current location's weather) will be used instead.</param>
            <param name="itemQueryContext">The context for the item query which led to this call, if applicable. This is used internally to prevent circular loops.</param>
            <returns>Returns the fish to catch, or <c>null</c> if no match was found.</returns>
        </member>
        <member name="M:StardewValley.GameLocation.CheckGenericFishRequirements(StardewValley.Item,System.Collections.Generic.Dictionary{System.String,System.String},StardewValley.GameLocation,StardewValley.Farmer,StardewValley.GameData.Locations.SpawnFishData,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Get whether a fish can be spawned based on its requirements in Data/Fish, if applicable.</summary>
            <param name="fish">The fish being checked.</param>
            <param name="allFishData">The Data/Fish data to check.</param>
            <param name="location">The location for which fish are being caught.</param>
            <param name="player">The player catching fish.</param>
            <param name="spawn">The fish spawn rule for which a fish is being checked.</param>
            <param name="waterDepth">The current water depth for the fishing bobber.</param>
            <param name="usingMagicBait">Whether the player has the magic bait equipped.</param>
            <param name="hasCuriosityLure">Whether the player has the curiosity lure equipped.</param>
            <param name="usingTargetBait">Whether the player has the target bait equipped.</param>
            <param name="isTutorialCatch">Whether this is the player's first catch, so it should be an easy fish for the tutorial.</param>
        </member>
        <member name="M:StardewValley.GameLocation.GetData">
            <summary>Get the underlying data from <c>Data/Locations</c> for this location, if available.</summary>
            <remarks>If this is a passive festival location and doesn't have its own data, this will return the data matching its <see cref="F:StardewValley.GameData.PassiveFestivalData.MapReplacements"/> field.</remarks>
        </member>
        <member name="M:StardewValley.GameLocation.GetData(System.String)">
            <summary>Get the underlying data from <c>Data/Locations</c> for this location, if available.</summary>
            <param name="name">The location name to match.</param>
            <remarks>If this is a passive festival location and doesn't have its own data, this will return the data matching its <see cref="F:StardewValley.GameData.PassiveFestivalData.MapReplacements"/> field.</remarks>
        </member>
        <member name="M:StardewValley.GameLocation.ShouldExcludeFromNpcPathfinding">
            <summary>Get whether NPCs should ignore this location when pathfinding between locations.</summary>
        </member>
        <member name="M:StardewValley.GameLocation.shiftContents(System.Int32,System.Int32,System.Func{Microsoft.Xna.Framework.Vector2,System.Object,System.Boolean})">
            <summary>Move all objects, furniture, terrain features, and large terrain features within the location.</summary>
            <param name="dx">The X tile offset to apply.</param>
            <param name="dy">The Y tile offset to apply.</param>
            <param name="where">If set, a filter which indicates whether something should be moved.</param>
        </member>
        <member name="M:StardewValley.GameLocation.getTileIndexAt(xTile.Dimensions.Location,System.String)">
            <summary>Get the tile index at the given map coordinate.</summary>
            <param name="p">The tile coordinate.</param>
            <param name="layer">The layer whose tiles to check.</param>
            <returns>Returns the matching tile's index, or <c>-1</c> if no tile was found.</returns>
        </member>
        <member name="M:StardewValley.GameLocation.getTileIndexAt(Microsoft.Xna.Framework.Point,System.String)">
            <summary>Get the tile index at the given map coordinate.</summary>
            <param name="p">The tile coordinate.</param>
            <param name="layer">The layer whose tiles to check.</param>
            <returns>Returns the matching tile's index, or <c>-1</c> if no tile was found.</returns>
        </member>
        <member name="M:StardewValley.GameLocation.getTileIndexAt(System.Int32,System.Int32,System.String)">
            <summary>Get the tile index at the given layer coordinate.</summary>
            <param name="x">The tile X coordinate.</param>
            <param name="y">The tile Y coordinate.</param>
            <param name="layer">The layer whose tiles to check.</param>
            <returns>Returns the matching tile's index, or <c>-1</c> if no tile was found.</returns>
        </member>
        <member name="M:StardewValley.GameLocation.OnBuildingConstructed(StardewValley.Buildings.Building,StardewValley.Farmer)">
            <summary>Handle a building in this location being constructed by any player.</summary>
            <param name="building">The building that was constructed.</param>
            <param name="who">The player that constructed the building.</param>
        </member>
        <member name="M:StardewValley.GameLocation.OnBuildingMoved(StardewValley.Buildings.Building)">
            <summary>Handle a building in this location being moved by any player.</summary>
            <param name="building">The building that was moved.</param>
        </member>
        <member name="M:StardewValley.GameLocation.OnBuildingDemolished(System.String,System.Guid)">
            <summary>Handle a building in this location being demolished by the current player.</summary>
            <param name="building">The building type that was demolished.</param>
            <param name="id">The unique building ID.</param>
        </member>
        <member name="M:StardewValley.GameLocation.OnDayStarted">
            <summary>Handle the new day starting after the player saves, loads, or connects.</summary>
            <remarks>See also <see cref="M:StardewValley.GameLocation.DayUpdate(System.Int32)"/>, which happens while setting up the day before saving.</remarks>
        </member>
        <member name="M:StardewValley.GameLocation.OnStoneDestroyed(System.String,System.Int32,System.Int32,StardewValley.Farmer)">
            <summary>Handle a breakable mine stone being destroyed.</summary>
            <param name="stoneId">The unqualified item ID for the stone object.</param>
            <param name="x">The stone's X tile position.</param>
            <param name="y">The stone's Y tile position.</param>
            <param name="who">The player who broke the stone.</param>
            <remarks>This is the entry point for creating item drops when breaking stone.</remarks>
        </member>
        <member name="M:StardewValley.GameLocation.removeObjectsAndSpawned(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Remove all objects, bushes, resource clumps, and terrain features within an area.</summary>
            <param name="x">The top-left X position of the area to clear.</param>
            <param name="y">The top-right X position of the area to clear.</param>
            <param name="width">The width of the area to clear.</param>
            <param name="height">The height of the area to clear.</param>
        </member>
        <member name="M:StardewValley.GameLocation.tryToCreateUnseenSecretNote(StardewValley.Farmer)">
            <summary>Try to create a secret note or journal scrap that hasn't been seen by a player, based on the random spawn chance.</summary>
            <param name="who">The farmer for whom to create a secret note.</param>
            <returns>Returns an unseen secret note/journal scrap, or <see langworld="null" /> if there are none left or the random spawn chance fails.</returns>
        </member>
        <member name="M:StardewValley.GameLocation.seasonUpdate(System.Boolean)">
            <summary>Update the location when the season changes.</summary>
            <param name="onLoad">Whether the season is being initialized as part of loading the save, instead of an actual in-game season change.</param>
        </member>
        <member name="M:StardewValley.GameLocation.GetHayFromAnySilo(StardewValley.GameLocation)">
            <summary>Get hay from any non-empty silos.</summary>
            <param name="currentLocation">The location in which the hay was found.</param>
        </member>
        <member name="M:StardewValley.GameLocation.StoreHayInAnySilo(System.Int32,StardewValley.GameLocation)">
            <summary>Store hay in any silos that have available space.</summary>
            <param name="count">The number of hay items to store.</param>
            <param name="currentLocation">The location in which the hay was found.</param>
            <returns>Returns the number of hay that couldn't be stored.</returns>
        </member>
        <member name="M:StardewValley.GameLocation.tryToAddHay(System.Int32)">
            <summary>Store hay in the current location's silos, if they have space available.</summary>
            <param name="num">The number of hay items to store.</param>
            <returns>Returns the number of hay that couldn't be stored.</returns>
        </member>
        <member name="M:StardewValley.GameLocation.getBuildingByType(System.String)">
            <summary>Get a building by its <see cref="F:StardewValley.Buildings.Building.buildingType"/> value.</summary>
            <param name="id">The building type key.</param>
        </member>
        <member name="M:StardewValley.GameLocation.getBuildingById(System.Guid)">
            <summary>Get a building by its <see cref="F:StardewValley.Buildings.Building.id"/> value.</summary>
            <param name="id">The unique building ID.</param>
        </member>
        <member name="M:StardewValley.GameLocation.getBuildingByName(System.String)">
            <summary>Get a building by the unique name of its interior location.</summary>
            <param name="id">The building interior location's unique name.</param>
        </member>
        <member name="M:StardewValley.GameLocation.buildStructure(System.String,StardewValley.GameData.Buildings.BuildingData,Microsoft.Xna.Framework.Vector2,StardewValley.Farmer,StardewValley.Buildings.Building@,System.Boolean,System.Boolean)">
            <summary>Construct a building in the location.</summary>
            <param name="typeId">The building type ID in <c>Data/Buildings</c>.</param>
            <param name="data">The building data from <c>Data/Buildings</c>.</param>
            <param name="tileLocation">The top-left tile position of the building.</param>
            <param name="who">The player constructing the building.</param>
            <param name="magicalConstruction">Whether construction should complete instantly.</param>
            <param name="skipSafetyChecks">Whether to ignore safety checks (e.g. making sure the area is clear).</param>
            <returns>Returns whether the building was successfully placed.</returns>
        </member>
        <member name="M:StardewValley.GameLocation.buildStructure(System.String,Microsoft.Xna.Framework.Vector2,StardewValley.Farmer,StardewValley.Buildings.Building@,System.Boolean,System.Boolean)">
            <summary>Construct a building in the location.</summary>
            <param name="typeId">The building type ID in <c>Data/Buildings</c>.</param>
            <param name="tileLocation">The top-left tile position of the building.</param>
            <param name="who">The player constructing the building.</param>
            <param name="magicalConstruction">Whether construction should complete instantly.</param>
            <param name="skipSafetyChecks">Whether to ignore safety checks (e.g. making sure the area is clear).</param>
            <returns>Returns whether the building was successfully placed.</returns>
        </member>
        <member name="M:StardewValley.GameLocation.isBuildingConstructed(System.String)">
            <summary>Get whether the location contains any buildings of the given type.</summary>
            <param name="name">The building type's ID in <c>Data/Buildings</c>.</param>
        </member>
        <member name="M:StardewValley.GameLocation.HasMinBuildings(System.String,System.Int32)">
            <summary>Get whether the location has a minimum number of matching buildings.</summary>
            <param name="buildingType">The building type to count.</param>
            <param name="minCount">The minimum number needed.</param>
        </member>
        <member name="M:StardewValley.GameLocation.HasMinBuildings(System.Func{StardewValley.Buildings.Building,System.Boolean},System.Int32)">
            <summary>Get whether the location has a minimum number of matching buildings.</summary>
            <param name="match">A filter which matches buildings to count.</param>
            <param name="minCount">The minimum number needed.</param>
        </member>
        <member name="M:StardewValley.GameLocation.GetInstancedBuildingInteriors">
            <summary>Get all building interiors within this location which are instanced to the building (i.e. not in <see cref="P:StardewValley.Game1.locations"/> separately).</summary>
        </member>
        <member name="M:StardewValley.GameLocation.ForEachInstancedInterior(System.Func{StardewValley.GameLocation,System.Boolean})">
            <summary>Perform an action for each building interior within this location which is instanced to the building (i.e. not in <see cref="P:StardewValley.Game1.locations"/> separately).</summary>
            <param name="action">The action to perform for each interior. This should return true (continue iterating) or false (stop).</param>
        </member>
        <member name="M:StardewValley.GameLocation.TryGetTreeIdForTile(xTile.Tiles.Tile,System.String@,System.Nullable{System.Int32}@,System.Nullable{System.Int32}@,System.Boolean@)">
            <summary>Get the tree to spawn on a tile based on its tile index on the <c>Paths</c> layer, if any.</summary>
            <param name="tileIndex">The tile index on the <c>Paths</c> layer.</param>
            <param name="treeId">The tree ID in <c>Data/FruitTrees</c> or <c>Data/WildTrees</c> that should spawn.</param>
            <param name="growthStageOnLoad">The preferred tree growth stage when first populating the save, if applicable.</param>
            <param name="growthStageOnRegrow">The preferred tree growth stage when regrowing trees on day update, if applicable.</param>
            <param name="isFruitTree">Whether to spawn a fruit tree (<c>true</c>) or wild tree (<c>false</c>).</param>
            <returns>Returns whether a tree should spawn here.</returns>
        </member>
        <member name="M:StardewValley.GameLocation.IsActiveLocation">
            <summary>Get whether this location is actively synced to the current player.</summary>
            <remarks>This is always true for the main player, and based on <see cref="M:StardewValley.Multiplayer.isActiveLocation(StardewValley.GameLocation)"/> for farmhands.</remarks>
        </member>
        <member name="M:StardewValley.GameLocation.LogMapPropertyError(System.String,System.String,System.String)">
            <summary>Log an error indicating that a map property could not be parsed.</summary>
            <param name="name">The name of the property that failed to parse.</param>
            <param name="value">The property value that failed to parse.</param>
            <param name="error">The error phrase indicating why it failed.</param>
        </member>
        <member name="M:StardewValley.GameLocation.LogMapPropertyError(System.String,System.String[],System.String,System.Char)">
            <summary>Log an error indicating that a map property could not be parsed.</summary>
            <param name="name">The name of the property that failed to parse.</param>
            <param name="value">The property value that failed to parse.</param>
            <param name="error">The error phrase indicating why it failed.</param>
            <param name="delimiter">The character used to delimit values in the property.</param>
        </member>
        <member name="M:StardewValley.GameLocation.LogTilePropertyError(System.String,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>Log an error indicating that a tile property could not be parsed.</summary>
            <param name="name">The name of the property that failed to parse.</param>
            <param name="layerId">The layer containing the tile.</param>
            <param name="x">The X tile position of the tile.</param>
            <param name="y">The Y tile position of the tile.</param>
            <param name="value">The property value that failed to parse.</param>
            <param name="error">The error phrase indicating why it failed.</param>
        </member>
        <member name="M:StardewValley.GameLocation.LogTilePropertyError(System.String,System.String,System.Int32,System.Int32,System.String[],System.String,System.Char)">
            <summary>Log an error indicating that a tile property could not be parsed.</summary>
            <param name="name">The name of the property that failed to parse.</param>
            <param name="layerId">The layer containing the tile.</param>
            <param name="x">The X tile position of the tile.</param>
            <param name="y">The Y tile position of the tile.</param>
            <param name="value">The property value that failed to parse.</param>
            <param name="error">The error phrase indicating why it failed.</param>
            <param name="delimiter">The character used to delimit values in the property.</param>
        </member>
        <member name="M:StardewValley.GameLocation.LogTileActionError(System.String[],System.Int32,System.Int32,System.String)">
            <summary>Log an error indicating that a tile <c>Action</c> property could not be parsed.</summary>
            <param name="action">The action arguments, including the <c>Action</c> prefix.</param>
            <param name="x">The tile X position containing the action.</param>
            <param name="y">The tile Y position containing the action.</param>
            <param name="error">The error phrase indicating why it failed.</param>
        </member>
        <member name="M:StardewValley.GameLocation.LogTileTouchActionError(System.String[],Microsoft.Xna.Framework.Vector2,System.String)">
            <summary>Log an error indicating that a tile <c>TouchAction</c> property could not be parsed.</summary>
            <param name="action">The action arguments, including the <c>TouchAction</c> prefix.</param>
            <param name="tile">The tile position containing the action.</param>
            <param name="error">The error phrase indicating why it failed.</param>
        </member>
        <member name="M:StardewValley.InteriorDoorDictionary.GetDoorTilesFromMapProperty(StardewValley.GameLocation)">
            <summary>Get the tile positions containing doors based on the <c>Doors</c> map property.</summary>
            <param name="location">The location whose map property to read.</param>
        </member>
        <member name="T:StardewValley.LocationContexts">
            <summary>Manages data about the game's location contexts.</summary>
        </member>
        <member name="F:StardewValley.LocationContexts.DefaultId">
            <summary>The location context ID for the valley in <c>Data/LocationContexts</c>.</summary>
        </member>
        <member name="F:StardewValley.LocationContexts.DesertId">
            <summary>The location context ID for the desert in <c>Data/LocationContexts</c>.</summary>
        </member>
        <member name="F:StardewValley.LocationContexts.IslandId">
            <summary>The location context ID for Ginger Island in <c>Data/LocationContexts</c>.</summary>
        </member>
        <member name="P:StardewValley.LocationContexts.Island">
            <summary>The location context data for Ginger Island.</summary>
        </member>
        <member name="P:StardewValley.LocationContexts.Default">
            <summary>The location context data for the valley.</summary>
        </member>
        <member name="M:StardewValley.LocationContexts.Require(System.String)">
            <summary>Get a location context by ID.</summary>
            <param name="id">The location context's ID in <c>Data/LocationContext</c>.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">There's no location context with the given <paramref name="id"/>.</exception>
        </member>
        <member name="M:StardewValley.SlimeHutch.OnParentBuildingUpgraded(StardewValley.Buildings.Building)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.WaterTiles.waterTiles">
            <summary>The water data for each tile in the grid.</summary>
        </member>
        <member name="M:StardewValley.WaterTiles.#ctor(System.Boolean[0:,0:])">
            <summary>Construct an instance.</summary>
            <param name="source">The grid of tiles to represent, where each value indicates whether it's water.</param>
        </member>
        <member name="M:StardewValley.WaterTiles.#ctor(System.Int32,System.Int32)">
            <summary>Construct an instance.</summary>
            <param name="width">The width of the tile grid.</param>
            <param name="height">The height of the tile grid.</param>
        </member>
        <member name="P:StardewValley.WaterTiles.Item(System.Int32,System.Int32)">
            <summary>Get or set whether a tile is water.</summary>
            <param name="x">The tile's X tile position within the grid.</param>
            <param name="y">The tile's Y tile position within the grid.</param>
        </member>
        <member name="T:StardewValley.Logging.CheatCommandChatLogger">
            <summary>A logger which copies messages to the chat box, used when entering commands through the chat.</summary>
        </member>
        <member name="F:StardewValley.Logging.CheatCommandChatLogger.ChatBox">
            <summary>The chat box to which to copy messages.</summary>
        </member>
        <member name="M:StardewValley.Logging.CheatCommandChatLogger.#ctor(StardewValley.Menus.ChatBox)">
            <summary>Construct an instance.</summary>
            <param name="chatBox">The chat box to which to copy messages.</param>
        </member>
        <member name="M:StardewValley.Logging.CheatCommandChatLogger.Verbose(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Logging.CheatCommandChatLogger.Debug(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Logging.CheatCommandChatLogger.Info(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Logging.CheatCommandChatLogger.Warn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Logging.CheatCommandChatLogger.Error(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:StardewValley.Logging.DefaultLogger">
            <summary>A logger which writes to the console window in debug mode.</summary>
        </member>
        <member name="F:StardewValley.Logging.DefaultLogger.MessageBuilder">
            <summary>The message builder used to format messages.</summary>
        </member>
        <member name="F:StardewValley.Logging.DefaultLogger.LogPath">
            <summary>The absolute path to the debug log file.</summary>
        </member>
        <member name="P:StardewValley.Logging.DefaultLogger.ShouldWriteToConsole">
            <summary>Whether to log messages to the console window.</summary>
        </member>
        <member name="P:StardewValley.Logging.DefaultLogger.ShouldWriteToLogFile">
            <summary>Whether to log messages to the debug log file.</summary>
        </member>
        <member name="M:StardewValley.Logging.DefaultLogger.#ctor(System.Boolean,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="shouldWriteToConsole">Whether to log messages to the console window.</param>
            <param name="shouldWriteToLogFile">Whether to log messages to the debug log file.</param>
        </member>
        <member name="M:StardewValley.Logging.DefaultLogger.Verbose(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Logging.DefaultLogger.Debug(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Logging.DefaultLogger.Info(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Logging.DefaultLogger.Warn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Logging.DefaultLogger.Error(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Logging.DefaultLogger.LogImpl(System.String,System.String,System.Exception)">
            <summary>Log a message to the console and/or log file.</summary>
            <param name="level">The log level.</param>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to logged, if applicable.</param>
        </member>
        <member name="M:StardewValley.Logging.DefaultLogger.FormatLog(System.String,System.String,System.Exception)">
            <summary>Format a log message with the date and level for display.</summary>
            <param name="level">The log level.</param>
            <param name="text">The message to log.</param>
            <param name="exception">The exception to logged, if applicable.</param>
        </member>
        <member name="T:StardewValley.Logging.IGameLogger">
            <summary>Handles writing messages to the game log for Stardew Valley itself.</summary>
        </member>
        <member name="M:StardewValley.Logging.IGameLogger.Verbose(System.String)">
            <summary>Log tracing info intended for Stardew Valley developers troubleshooting specific issues.</summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:StardewValley.Logging.IGameLogger.Debug(System.String)">
            <summary>Log troubleshooting info intended for developers or players.</summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:StardewValley.Logging.IGameLogger.Info(System.String)">
            <summary>Log a message intended for players interacting with the console.</summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:StardewValley.Logging.IGameLogger.Warn(System.String)">
            <summary>Log a potential problem that users should be aware of.</summary>
        </member>
        <member name="M:StardewValley.Logging.IGameLogger.Error(System.String,System.Exception)">
            <summary>Log an message indicating something has gone wrong.</summary>
            <param name="error">The message to log.</param>
            <param name="exception">The underlying exception.</param>
        </member>
        <member name="T:StardewValley.MachineDataUtility">
            <summary>Handles common logic for parsing and applying the data in <c>Data/Machines</c>.</summary>
            <remarks>For more specific logic, see the logic in <see cref="T:StardewValley.Object"/> like <see cref="M:StardewValley.Object.PlaceInMachine(StardewValley.GameData.Machines.MachineData,StardewValley.Item,System.Boolean,StardewValley.Farmer,System.Boolean,System.Boolean)"/>.</remarks>
        </member>
        <member name="T:StardewValley.MachineDataUtility.GetOutputTokenValueDelegate">
            <summary>Get the value of a token placeholder like <c>DROP_IN_ID</c>.</summary>
            <param name="key">The token placeholder like <c>DROP_IN_ID</c>.</param>
            <param name="machine">The machine which will produce output.</param>
            <param name="outputData">The machine output data.</param>
            <param name="inputItem">The item that was dropped into the machine.</param>
            <param name="who">The player interacting with the machine, if any.</param>
        </member>
        <member name="F:StardewValley.MachineDataUtility.OutputTokens">
            <summary>The token placeholders which can appear in an <see cref="P:StardewValley.GameData.ISpawnItemData.ItemId"/> field, and the methods which return their value.</summary>
        </member>
        <member name="M:StardewValley.MachineDataUtility.HasAdditionalRequirements(StardewValley.Inventories.IInventory,System.Collections.Generic.IList{StardewValley.GameData.Machines.MachineItemAdditionalConsumedItems},StardewValley.GameData.Machines.MachineItemAdditionalConsumedItems@)">
            <summary>Get whether the inventory contains the additional items needed to run the machine.</summary>
            <param name="inventory">The inventory to search for matching items.</param>
            <param name="requirements">The additional required items, if any.</param>
            <param name="failedRequirement">The requirement which isn't met, if applicable.</param>
        </member>
        <member name="M:StardewValley.MachineDataUtility.CanApplyOutput(StardewValley.Object,StardewValley.GameData.Machines.MachineOutputRule,StardewValley.GameData.Machines.MachineOutputTrigger,StardewValley.Item,StardewValley.Farmer,StardewValley.GameLocation,StardewValley.GameData.Machines.MachineOutputTriggerRule@,System.Boolean@)">
            <summary>Get whether an output rule matches the given item.</summary>
            <param name="machine">The machine instance.</param>
            <param name="rule">The machine output rule.</param>
            <param name="trigger">The rule trigger type to match.</param>
            <param name="inputItem">The item that was dropped into the machine.</param>
            <param name="who">The player interacting with the machine, if any.</param>
            <param name="location">The location containing the machine.</param>
            <param name="triggerRule">The output rule trigger that matched, if applicable.</param>
            <param name="matchesExceptCount">Whether the output can be applied if <see cref="P:StardewValley.GameData.Machines.MachineOutputTriggerRule.RequiredCount"/> is ignored.</param>
        </member>
        <member name="M:StardewValley.MachineDataUtility.TryGetMachineOutputRule(StardewValley.Object,StardewValley.GameData.Machines.MachineData,StardewValley.GameData.Machines.MachineOutputTrigger,StardewValley.Item,StardewValley.Farmer,StardewValley.GameLocation,StardewValley.GameData.Machines.MachineOutputRule@,StardewValley.GameData.Machines.MachineOutputTriggerRule@,StardewValley.GameData.Machines.MachineOutputRule@,StardewValley.GameData.Machines.MachineOutputTriggerRule@)">
            <summary>Get the first output rule which matches the given item, if any.</summary>
            <param name="machine">The machine instance.</param>
            <param name="machineData">The machine data from which to get an output rule.</param>
            <param name="trigger">The rule trigger type to match.</param>
            <param name="inputItem">The item that was dropped into the machine.</param>
            <param name="who">The player interacting with the machine, if any.</param>
            <param name="location">The location containing the machine.</param>
            <param name="rule">The output rule found, if applicable.</param>
            <param name="triggerRule">The output rule trigger that matched, if applicable.</param>
            <param name="ruleIgnoringCount">If no output rule was found, the output rule that would have matched if we ignore the <see cref="P:StardewValley.GameData.Machines.MachineOutputTriggerRule.RequiredCount"/> field. If there are multiple such rules, the first one with a <see cref="F:StardewValley.GameData.Machines.MachineOutputRule.InvalidCountMessage"/> set is selected, else the first one in the list.</param>
            <param name="triggerIgnoringCount">The output rule trigger that matched for <paramref name="ruleIgnoringCount"/>, if applicable.</param>
        </member>
        <member name="M:StardewValley.MachineDataUtility.GetOutputData(StardewValley.Object,StardewValley.GameData.Machines.MachineData,StardewValley.GameData.Machines.MachineOutputRule,StardewValley.Item,StardewValley.Farmer,StardewValley.GameLocation)">
            <summary>Get the output item data which matches the given item, if any.</summary>
            <param name="machine">The machine instance.</param>
            <param name="machineData">The machine data from which to get the output data.</param>
            <param name="outputRule">The output rule from which to get the output data, or <c>null</c> to get a matching rule from the machine data.</param>
            <param name="inputItem">The item that was dropped into the machine.</param>
            <param name="who">The player interacting with the machine, if any.</param>
            <param name="location">The location containing the machine.</param>
        </member>
        <member name="M:StardewValley.MachineDataUtility.GetOutputData(System.Collections.Generic.List{StardewValley.GameData.Machines.MachineItemOutput},System.Boolean,StardewValley.Item,StardewValley.Farmer,StardewValley.GameLocation)">
            <summary>Get the output item data which matches the given item, if any.</summary>
            <param name="outputs">The output entries to choose from.</param>
            <param name="useFirstValidOutput">Whether to return the first matching output; else a valid one will be chosen at random.</param>
            <param name="inputItem">The item that was dropped into the machine.</param>
            <param name="who">The player interacting with the machine, if any.</param>
            <param name="location">The location containing the machine.</param>
        </member>
        <member name="M:StardewValley.MachineDataUtility.GetOutputItem(StardewValley.Object,StardewValley.GameData.Machines.MachineItemOutput,StardewValley.Item,StardewValley.Farmer,System.Boolean,System.Nullable{System.Int32}@)">
            <summary>Get the item to produce for a given output data.</summary>
            <param name="machine">The machine which will produce output.</param>
            <param name="outputData">The machine output data.</param>
            <param name="inputItem">The item that was dropped into the machine.</param>
            <param name="who">The player interacting with the machine, if any.</param>
            <param name="probe">Whether the machine is only checking whether the input is valid. If so, the input/machine shouldn't be changed and no animations/sounds should play.</param>
            <param name="overrideMinutesUntilReady">The in-game minutes until the item will be ready to collect, if set. This overrides the equivalent fields in the machine data if set.</param>
        </member>
        <member name="M:StardewValley.MachineDataUtility.UpdateStats(System.Collections.Generic.List{StardewValley.GameData.StatIncrement},StardewValley.Item,System.Int32)">
            <summary>Increment stats when an item is placed in the machine, if applicable.</summary>
            <param name="stats">The stats data to apply.</param>
            <param name="item">The item that was placed in the machine.</param>
            <param name="amount">The number of items that were placed in the machine.</param>
        </member>
        <member name="M:StardewValley.MachineDataUtility.PlayEffects(StardewValley.Object,StardewValley.GameData.Machines.MachineEffects,System.Boolean)">
            <summary>Apply a machine effect, if it's valid and its fields match.</summary>
            <param name="machine">The machine for which to apply effects.</param>
            <param name="effect">The machine effect to apply.</param>
            <param name="playSounds">Whether to play sounds when the item is placed.</param>
        </member>
        <member name="M:StardewValley.MachineDataUtility.FormatOutputId(System.String,StardewValley.Object,StardewValley.GameData.Machines.MachineItemOutput,StardewValley.Item,StardewValley.Farmer)">
            <summary>Replace machine placeholder tokens for an <see cref="P:StardewValley.GameData.ISpawnItemData.ItemId"/> field.</summary>
            <param name="id">The <see cref="P:StardewValley.GameData.ISpawnItemData.ItemId"/> value.</param>
            <param name="machine">The machine producing the output.</param>
            <param name="outputData">The machine output data.</param>
            <param name="inputItem">The item dropped into the machine, if any.</param>
            <param name="who">The player interacting with the machine, if any.</param>
        </member>
        <member name="M:StardewValley.MachineDataUtility.GetTokenValue(System.String,StardewValley.Object,StardewValley.GameData.Machines.MachineItemOutput,StardewValley.Item,StardewValley.Farmer)">
            <summary>Get the value of a default output placeholder like <c>DROP_IN_ID</c>.</summary>
            <inheritdoc cref="T:StardewValley.MachineDataUtility.GetOutputTokenValueDelegate"/>
        </member>
        <member name="M:StardewValley.MachineDataUtility.GetNearbyFlowerItemId(StardewValley.Object)">
            <summary>Get the item ID produced by a flower within 5 tiles of the machine, if any.</summary>
            <param name="machine">The machine around which to check.</param>
        </member>
        <member name="F:StardewValley.Minigames.AbigailGame.abigail">
            <summary>The Abigail NPC whose dialogues to show, if playing with Abigail.</summary>
        </member>
        <member name="M:StardewValley.Minigames.AbigailGame.#ctor(StardewValley.NPC)">
            <summary>Construct an instance.</summary>
            <param name="abigail">The Abigail NPC whose dialogues to show, if playing with Abigail.</param>
        </member>
        <member name="M:StardewValley.Minigames.AbigailGame.getPowerUp(StardewValley.Minigames.AbigailGame.CowboyPowerup)">
            <summary>
            return true if powerup should be removed
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:StardewValley.Minigames.AbigailGame.isCollidingWithMapForMonsters(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            For monsters
            </summary>
            <param name="positionToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:StardewValley.Minigames.BoatJourney.GetAssetName">
            <summary>Get the asset name for the main boat journey texture.</summary>
        </member>
        <member name="F:StardewValley.Minigames.MineCart.maxJumpGraceTime">
            <summary>How long the player can jump after running off the track, measured in seconds.</summary>
        </member>
        <member name="M:StardewValley.Minigames.IMinigame.tick(Microsoft.Xna.Framework.GameTime)">
            <summary>
            game tick for minigame
            </summary>
            <returns>true if finished</returns>
        </member>
        <member name="M:StardewValley.Monsters.AngryRoger.#ctor(Microsoft.Xna.Framework.Vector2,System.String)">
            <summary>
            constructor for non-default ghosts
            </summary>
            <param name="position"></param>
            <param name="name"></param>
        </member>
        <member name="M:StardewValley.Monsters.AngryRoger.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.Bat.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.BigSlime.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.BlueSquid.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.Bug.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:StardewValley.Monsters.DinoMonster.BreathProjectile">
            <summary>Lightweight version of projectile for pooling.</summary>
        </member>
        <member name="M:StardewValley.Monsters.DinoMonster.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.DwarvishSentry.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.Fly.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.Ghost.#ctor(Microsoft.Xna.Framework.Vector2,System.String)">
            <summary>
            constructor for non-default ghosts
            </summary>
            <param name="position"></param>
            <param name="name"></param>
        </member>
        <member name="M:StardewValley.Monsters.Ghost.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.GreenSlime.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.Grub.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.LavaLurk.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.Leaper.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Monsters.Monster.IsMonster">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Monsters.Monster.IsVillager">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.Monster.GetDisplayName(System.String)">
            <summary>Get the translated display name for a monster from the underlying data, if any.</summary>
            <param name="name">The monster's internal name.</param>
        </member>
        <member name="M:StardewValley.Monsters.Monster.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.Monster.ChooseAppearance(StardewValley.LocalizedContentManager)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.Mummy.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.RockCrab.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.RockCrab.#ctor(Microsoft.Xna.Framework.Vector2,System.String)">
            <summary>
            constructor for Lava Crab
            </summary>
            <param name="position"></param>
            <param name="name"></param>
        </member>
        <member name="M:StardewValley.Monsters.RockGolem.#ctor(Microsoft.Xna.Framework.Vector2,System.Int32)">
            <summary>
            constructor for wilderness golems that spawn on combat farm.
            </summary>
            <param name="position"></param>
            <param name="difficultyMod">player combat level is good</param>
        </member>
        <member name="M:StardewValley.Monsters.Serpent.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.ShadowBrute.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.ShadowGirl.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.ShadowGuy.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.ShadowShaman.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.Shooter.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.Skeleton.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Monsters.SquidKid.reloadSprite(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.MovieConcession.Data">
            <summary>The underlying movie concession data.</summary>
        </member>
        <member name="P:StardewValley.MovieConcession.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.MovieConcession.QualifiedItemId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.MovieConcession.sellToStorePrice(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.MovieConcession.salePrice(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.MovieConcession.appliesProfitMargins">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.MovieConcession.actionWhenPurchased(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.MovieConcession.FixStackSize">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.MovieConcession.FixQuality">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.MovieConcession.GetItemTypeId">
            <inheritdoc />
        </member>
        <member name="T:StardewValley.NativeClipboard.ClipboardPlatformType">
            <summary>The platform that provides the clipboard.</summary>
        </member>
        <member name="F:StardewValley.NativeClipboard.ClipboardPlatformType.Linux">
            <summary>The platform is Linux.</summary>
        </member>
        <member name="F:StardewValley.NativeClipboard.ClipboardPlatformType.OSX">
            <summary>The platform is macOS/OSX.</summary>
        </member>
        <member name="F:StardewValley.NativeClipboard.ClipboardPlatformType.Windows">
            <summary>The platform is Windows.</summary>
        </member>
        <member name="F:StardewValley.NativeClipboard.ClipboardPlatformType.Unknown">
            <summary>The platform is unknown.</summary>
        </member>
        <member name="T:StardewValley.NativeClipboard.LinuxSdlClipboard">
            <summary>Provides a wrapper around SDL's clipboard API for Linux.</summary>
        </member>
        <member name="M:StardewValley.NativeClipboard.LinuxSdlClipboard.#ctor">
            <summary>Constructs an instance and sets the providing platform name.</summary>
        </member>
        <member name="T:StardewValley.NativeClipboard.OsxSdlClipboard">
            <summary>Provides a wrapper around SDL's clipboard API for OSX.</summary>
        </member>
        <member name="M:StardewValley.NativeClipboard.OsxSdlClipboard.#ctor">
            <summary>Constructs an instance and sets the providing platform name.</summary>
        </member>
        <member name="T:StardewValley.NativeClipboard.SdlClipboard">
            <summary>A wrapper around SDL's native clipboard API.</summary>
        </member>
        <member name="F:StardewValley.NativeClipboard.SdlClipboard.PlatformClipboard">
            <summary>The underlying platform that provides the SDL clipboard API.</summary>
        </member>
        <member name="F:StardewValley.NativeClipboard.SdlClipboard.PlatformName">
            <summary>The name of the platform providing the native SDL API.</summary>
        </member>
        <member name="F:StardewValley.NativeClipboard.SdlClipboard.Platform">
            <summary>The platform that the clipboard is running on.</summary>
        </member>
        <member name="M:StardewValley.NativeClipboard.SdlClipboard.GetText">
            <summary>Retrieves the clipboard text from the underlying platform's native SDL API.</summary>
            <returns>A string containing the clipboard text, null if the clipboard was empty or if an error occurred.</returns>
        </member>
        <member name="M:StardewValley.NativeClipboard.SdlClipboard.SetText(System.String)">
            <summary>Sets the clipboard text using the underlying platform's native SDL API.</summary>
            <param name="text">The string to replace the current clipboard text.</param>
        </member>
        <member name="M:StardewValley.NativeClipboard.SdlClipboard.GetPlatformType">
            <summary>Determines the platform-specific SDL clipboard API provider based on runtime information.</summary>
        </member>
        <member name="M:StardewValley.NativeClipboard.SdlClipboard.GetTextImpl">
            <summary>Retrieves the clipboard text from the native SDL API.</summary>
            <returns>Returns a pointer to a null-terminated C-string, containing the clipboard text. May be empty if an error occurred.</returns>
        </member>
        <member name="M:StardewValley.NativeClipboard.SdlClipboard.SetTextImpl(System.IntPtr)">
            <summary>Sets the clipboard text using the native SDL API.</summary>
            <param name="text">A pointer to a null-terminated, UTF-8 C-string.</param>
        </member>
        <member name="T:StardewValley.NativeClipboard.WindowsSdlClipboard">
            <summary>Provides a wrapper around SDL's clipboard API for Windows.</summary>
        </member>
        <member name="M:StardewValley.NativeClipboard.WindowsSdlClipboard.SDL_GetClipboardText">
            <inheritdoc cref="M:StardewValley.NativeClipboard.WindowsSdlClipboard.GetTextImpl" />
        </member>
        <member name="M:StardewValley.NativeClipboard.WindowsSdlClipboard.SDL_SetClipboardText(System.IntPtr)">
            <inheritdoc cref="M:StardewValley.NativeClipboard.WindowsSdlClipboard.SetTextImpl(System.IntPtr)" />
        </member>
        <member name="M:StardewValley.NativeClipboard.WindowsSdlClipboard.#ctor">
            <summary>Constructs an instance and sets the providing platform name.</summary>
        </member>
        <member name="M:StardewValley.NativeClipboard.WindowsSdlClipboard.GetTextImpl">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.NativeClipboard.WindowsSdlClipboard.SetTextImpl(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Network.BuilderData.buildingType">
            <summary>The current building type (i.e. the one being constructed, or the one being upgraded from).</summary>
        </member>
        <member name="F:StardewValley.Network.BuilderData.daysUntilBuilt">
            <summary>The number of days until it's completed.</summary>
        </member>
        <member name="F:StardewValley.Network.BuilderData.buildingLocation">
            <summary>The unique name for the location containing the building.</summary>
        </member>
        <member name="F:StardewValley.Network.BuilderData.buildingTile">
            <summary>The building's tile position within the <see cref="F:StardewValley.Network.BuilderData.buildingLocation"/> location.</summary>
        </member>
        <member name="F:StardewValley.Network.BuilderData.isUpgrade">
            <summary>Whether this is an upgrade (instead of a new building being constructed).</summary>
        </member>
        <member name="M:StardewValley.Network.BuilderData.#ctor">
            <summary>Construct an empty instance.</summary>
        </member>
        <member name="M:StardewValley.Network.BuilderData.#ctor(System.String,System.Int32,System.String,Microsoft.Xna.Framework.Point,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="buildingType">The current building type (i.e. the one being constructed, or the one being upgraded from).</param>
            <param name="daysUntilBuilt">The number of days until it's completed.</param>
            <param name="location">The unique name for the location containing the building.</param>
            <param name="tile">The building's tile position within the <see cref="F:StardewValley.Network.BuilderData.buildingLocation"/> location.</param>
            <param name="isUpgrade">Whether this is an upgrade (instead of a new building being constructed).</param>
        </member>
        <member name="T:StardewValley.Network.ChestHit.ChestHitArgs">
            <summary>Arguments to pass to <see cref="M:StardewValley.Objects.Chest.HandleChestHit(StardewValley.Network.ChestHit.ChestHitArgs)" />.</summary>
        </member>
        <member name="F:StardewValley.Network.ChestHit.ChestHitArgs.Location">
            <summary>The parent location of the chest being hit.</summary>
        </member>
        <member name="F:StardewValley.Network.ChestHit.ChestHitArgs.ChestTile">
            <summary>The tile location of the chest being hit.</summary>
        </member>
        <member name="F:StardewValley.Network.ChestHit.ChestHitArgs.ToolPosition">
            <summary>The target position of the tool used to hit the chest.</summary>
        </member>
        <member name="F:StardewValley.Network.ChestHit.ChestHitArgs.StandingPixel">
            <summary>The position of the player who hit the chest.</summary>
        </member>
        <member name="F:StardewValley.Network.ChestHit.ChestHitArgs.Direction">
            <summary>The facing direction of the player who hit the chest.</summary>
        </member>
        <member name="F:StardewValley.Network.ChestHit.ChestHitArgs.HoldDownClick">
            <summary>Whether the chest was hit using hold-down-click.</summary>
        </member>
        <member name="F:StardewValley.Network.ChestHit.ChestHitArgs.ToolCanHit">
            <summary>Whether the tool the player is using can move the chest.</summary>
        </member>
        <member name="F:StardewValley.Network.ChestHit.ChestHitArgs.RecentlyHit">
            <summary>Whether the player hit the chest recently enough to move the chest.</summary>
        </member>
        <member name="T:StardewValley.Network.ChestHit.ChestHitSynchronizer">
            <summary>Prevents race conditions when multiplayer players hit a chest.</summary>
        </member>
        <member name="F:StardewValley.Network.ChestHit.ChestHitSynchronizer.EventQueue">
            <summary>The queue of chest hit events to process during the next <see cref="M:StardewValley.Network.ChestHit.ChestHitSynchronizer.Update" />, maintained by the host.</summary>
        </member>
        <member name="F:StardewValley.Network.ChestHit.ChestHitSynchronizer.SavedTimers">
            <summary>A map of chests and their first tool hit timers, maintained by each farmhand.</summary>
        </member>
        <member name="M:StardewValley.Network.ChestHit.ChestHitSynchronizer.Reset">
            <summary>Resets the chest hit synchronizer, used in <see cref="M:StardewValley.FarmerTeam.NewDay" />.</summary>
        </member>
        <member name="M:StardewValley.Network.ChestHit.ChestHitSynchronizer.Update">
            <summary>Processes all of the chest hit events in <see cref="F:StardewValley.Network.ChestHit.ChestHitSynchronizer.EventQueue" />, used in <see cref="M:StardewValley.FarmerTeam.Update" />.</summary>
        </member>
        <member name="M:StardewValley.Network.ChestHit.ChestHitSynchronizer.Sync(StardewValley.Network.ChestHit.ChestHitArgs)">
            <summary>Synchronizes a player hitting a chest.</summary>
            <param name="args">The arguments for the chest hit event.</param>
        </member>
        <member name="M:StardewValley.Network.ChestHit.ChestHitSynchronizer.SignalMove(StardewValley.GameLocation,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Signals that a chest has been moved.</summary>
            <param name="location">The parent location of the moved chest.</param>
            <param name="sourceTileX">The old, pre-move x-coordinate of the chest.</param>
            <param name="sourceTileY">The old, pre-move y-coordinate of the chest.</param>
            <param name="destTileX">The new, post-move x-coordinate of the chest.</param>
            <param name="destTileY">The new, post-move y-coordinate of the chest.</param>
        </member>
        <member name="M:StardewValley.Network.ChestHit.ChestHitSynchronizer.SignalDelete(StardewValley.GameLocation,System.Int32,System.Int32)">
            <summary>Signals that a chest has been deleted.</summary>
            <param name="location">The parent location of the deleted chest.</param>
            <param name="tileX">The x-coordinate of the deleted chest.</param>
            <param name="tileY">The y-coordinate of the deleted chest.</param>
        </member>
        <member name="M:StardewValley.Network.ChestHit.ChestHitSynchronizer.ProcessMessage(StardewValley.Network.IncomingMessage)">
            <summary>Process an incoming chest hit sync message.</summary>
            <param name="message">The incoming sync message.</param>
        </member>
        <member name="M:StardewValley.Network.ChestHit.ChestHitSynchronizer.HashPosition(System.Int32,System.Int32)">
            <summary>Packs the two integer components of the tile coordinate into an unsigned long.</summary>
            <param name="x">The x-component of the tile coordinate.</param>
            <param name="y">The y-component of the tile coordinate.</param>
        </member>
        <member name="M:StardewValley.Network.ChestHit.ChestHitSynchronizer.ProcessSync(StardewValley.Network.IncomingMessage)">
            <summary>Handle a request to synchronize a player hitting a chest.</summary>
            <param name="message">The incoming <see cref="F:StardewValley.Network.ChestHit.Internal.ChestHitMessageType.Sync" /> message.</param>
        </member>
        <member name="M:StardewValley.Network.ChestHit.ChestHitSynchronizer.ProcessMove(StardewValley.Network.IncomingMessage)">
            <summary>Handle an incoming signal that a chest has moved.</summary>
            <param name="message">The incoming <see cref="F:StardewValley.Network.ChestHit.Internal.ChestHitMessageType.Move" /> message.</param>
        </member>
        <member name="M:StardewValley.Network.ChestHit.ChestHitSynchronizer.ProcessDelete(StardewValley.Network.IncomingMessage)">
            <summary>Handle an incoming signal that a chest has been deleted.</summary>
            <param name="message">The incoming <see cref="F:StardewValley.Network.ChestHit.Internal.ChestHitMessageType.Delete" /> message.</param>
        </member>
        <member name="F:StardewValley.Network.ChestHit.ChestHitTimer.Milliseconds">
            <summary>The amount of milliseconds remaining until a chest must be hit twice to move it.</summary>
        </member>
        <member name="F:StardewValley.Network.ChestHit.ChestHitTimer.SavedTime">
            <summary>The time when this timer was saved in <see cref="F:StardewValley.Network.ChestHit.ChestHitSynchronizer.SavedTimers" />.</summary>
        </member>
        <member name="M:StardewValley.Network.ChestHit.ChestHitTimer.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>Ticks down the timer.</summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="T:StardewValley.Network.ChestHit.Internal.ChestHitMessageType">
            <summary>The network message types used to synchronize chest hits.</summary>
        </member>
        <member name="F:StardewValley.Network.ChestHit.Internal.ChestHitMessageType.Sync">
            <summary>Sent by clients when they hit a chest.</summary>
        </member>
        <member name="F:StardewValley.Network.ChestHit.Internal.ChestHitMessageType.Move">
            <summary>Sent by the server to signal a chest has been moved.</summary>
        </member>
        <member name="F:StardewValley.Network.ChestHit.Internal.ChestHitMessageType.Delete">
            <summary>Sent by the server to signal a chest has been deleted.</summary>
        </member>
        <member name="T:StardewValley.Network.Compress.INetCompression">
            <summary>Handles compression and decompression of network messages to reduce network traffic.</summary>
        </member>
        <member name="M:StardewValley.Network.Compress.INetCompression.CompressAbove(System.Byte[],System.Int32)">
            <summary>Compress a message if it exceeds a minimum size.</summary>
            <param name="data">The data to compress.</param>
            <param name="minSizeToCompress">The minimum message size (in bytes) for compression to be applied.</param>
            <returns>Returns the compressed data, or the original data if compression wasn't needed.</returns>
        </member>
        <member name="M:StardewValley.Network.Compress.INetCompression.DecompressBytes(System.Byte[])">
            <summary>Decompress a message if it contains compressed data.</summary>
            <param name="data">The data to decompress.</param>
            <returns>Returns the decompressed data, or the original data if it wasn't compressed.</returns>
        </member>
        <member name="M:StardewValley.Network.Compress.INetCompression.TryDecompressStream(System.IO.Stream,System.Byte[]@)">
            <summary>Decompress a message if it contains compressed data.</summary>
            <param name="dataStream">The data to decompress.</param>
            <param name="decompressed">The decompressed data, or <c>null</c> if it wasn't compressed.</param>
            <returns>Returns whether the stream held compressed data which was decompressed into <paramref name="decompressed"/>.</returns>
        </member>
        <member name="T:StardewValley.Network.Compress.LZ4NetCompression">
            <summary>Handles compression and decompression of network messages using LZ4 to reduce network traffic.</summary>
        </member>
        <member name="F:StardewValley.Network.Compress.LZ4NetCompression.HeaderSize">
            <summary>The size of the header used for compressed messages.</summary>
        </member>
        <member name="M:StardewValley.Network.Compress.LZ4NetCompression.CompressAbove(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.Compress.LZ4NetCompression.DecompressBytes(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.Compress.LZ4NetCompression.TryDecompressStream(System.IO.Stream,System.Byte[]@)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException">The stream doesn't support both reading and seeking.</exception>
        </member>
        <member name="M:StardewValley.Network.Compress.LZ4NetCompression.DecompressImpl(System.Byte[])">
            <summary>Decompress raw data without checking whether it's compressed.</summary>
            <param name="data">The compressed data.</param>
            <returns>Returns the data decompressed from <paramref name="data"/>.</returns>
        </member>
        <member name="T:StardewValley.Network.Compress.NullNetCompression">
            <summary>A no-op compression wrapper for platforms that provide no compression.</summary>
        </member>
        <member name="M:StardewValley.Network.Compress.NullNetCompression.CompressAbove(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.Compress.NullNetCompression.DecompressBytes(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.Compress.NullNetCompression.TryDecompressStream(System.IO.Stream,System.Byte[]@)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Network.GameServer.pendingAvailableFarmhands">
            <summary>A set of connections that are waiting to receive the list of available farmhands.</summary>
        </member>
        <member name="T:StardewValley.Network.HookableClient">
            <inheritdoc cref="T:StardewValley.Network.IHookableClient" />
        </member>
        <member name="P:StardewValley.Network.HookableClient.OnProcessingMessage">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Network.HookableClient.OnSendingMessage">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.HookableClient.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="T:StardewValley.Network.HookableServer">
            <inheritdoc cref="T:StardewValley.Network.IHookableServer" />
        </member>
        <member name="P:StardewValley.Network.HookableServer.OnProcessingMessage">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.HookableServer.#ctor(StardewValley.Network.IGameServer)">
            <summary>Construct an instance.</summary>
            <param name="gameServer">The underlying game server.</param>
        </member>
        <member name="T:StardewValley.Network.IHookableClient">
            <summary>A net sync clients which allows intercepting received messages.</summary>
        </member>
        <member name="P:StardewValley.Network.IHookableClient.OnProcessingMessage">
            <summary>A callback to raise when receiving a message. This receives the incoming message, a method to send an arbitrary message, and a callback to run the default logic.</summary>
        </member>
        <member name="P:StardewValley.Network.IHookableClient.OnSendingMessage">
            <summary>A callback to raise when sending a message. This receives the outgoing message, a method to send an arbitrary message, and a callback to resume the default logic.</summary>
        </member>
        <member name="T:StardewValley.Network.IHookableServer">
            <summary>A net sync server which allows intercepting received messages.</summary>
        </member>
        <member name="P:StardewValley.Network.IHookableServer.OnProcessingMessage">
            <summary>A callback to raise when receiving a message. This receives the incoming message, a method to send a message, and a callback to run the default logic.</summary>
        </member>
        <member name="T:StardewValley.Network.LidgrenMessageUtils">
            <summary>A set of utilities for packing/unpacking data within Lidgren messages.</summary>
        </member>
        <member name="M:StardewValley.Network.LidgrenMessageUtils.WriteMessage(StardewValley.Network.OutgoingMessage,Lidgren.Network.NetOutgoingMessage)">
            <summary>Write (and potentially compress) the message from <paramref name="srcMsg"/> into <paramref name="destMsg"/>.</summary>
            <param name="srcMsg">The outgoing message to read data from.</param>
            <param name="destMsg">The net outgoing message to write (and potentially compress) data into.</param>
        </member>
        <member name="M:StardewValley.Network.LidgrenMessageUtils.ReadStreamToMessage(StardewValley.Network.NetBufferReadStream,StardewValley.Network.IncomingMessage)">
            <summary>Reads a message from <paramref name="stream"/> into <paramref name="msg"/>, and decompresses it if necessary.</summary>
            <param name="stream">The stream to read message data from.</param>
            <param name="msg">The message to write (and potentially decompress) data into.</param>
        </member>
        <member name="F:StardewValley.Network.NetAudio.activeCues">
            <summary>The backing field for <see cref="P:StardewValley.Network.NetAudio.ActiveCues"/>.</summary>
        </member>
        <member name="F:StardewValley.Network.NetAudio.location">
            <summary>The location whose audio this instance manages.</summary>
        </member>
        <member name="P:StardewValley.Network.NetAudio.ActiveCues">
            <summary>The sound IDs to play continuously until they're removed from the list.</summary>
        </member>
        <member name="M:StardewValley.Network.NetAudio.#ctor(StardewValley.GameLocation)">
            <summary>Construct an instance.</summary>
            <param name="location">The location whose audio this instance manages.</param>
        </member>
        <member name="M:StardewValley.Network.NetAudio.Fire(System.String,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Int32},StardewValley.Audio.SoundContext)">
            <summary>Send an audio cue to all players, including the current one.</summary>
            <param name="audioName">The sound ID to play.</param>
            <param name="position">The tile position from which the sound is playing, or <c>null</c> if it's playing throughout the location.</param>
            <param name="pitch">The pitch modifier to apply, or <c>null</c> for the default pitch.</param>
            <param name="context">The source which triggered a game sound.</param>
        </member>
        <member name="M:StardewValley.Network.NetAudio.Read(System.IO.BinaryReader,System.String@,System.Nullable{Microsoft.Xna.Framework.Vector2}@,System.Nullable{System.Int32}@,StardewValley.Audio.SoundContext@)">
            <summary>Read an audio cue from the network that was sent via <see cref="M:StardewValley.Network.NetAudio.Fire(System.String,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Int32},StardewValley.Audio.SoundContext)"/>.</summary>
            <param name="reader">The network input reader.</param>
            <param name="audioName">The sound ID to play.</param>
            <param name="position">The tile position from which the sound is playing, or <c>null</c> if it's playing throughout the location.</param>
            <param name="pitch">The pitch modifier to apply, or <c>null</c> for the default pitch.</param>
            <param name="context">The source which triggered a game sound.</param>
        </member>
        <member name="M:StardewValley.Network.NetAudio.StartPlaying(System.String)">
            <summary>Play a sound continuously until it's stopped via <see cref="M:StardewValley.Network.NetAudio.StopPlaying(System.String)"/>.</summary>
            <param name="cueName">The sound ID to play.</param>
        </member>
        <member name="M:StardewValley.Network.NetAudio.StopPlaying(System.String)">
            <summary>Stop a sound that is playing continuously after <see cref="M:StardewValley.Network.NetAudio.StartPlaying(System.String)"/>.</summary>
            <param name="cueName">The sound ID to stop.</param>
        </member>
        <member name="T:StardewValley.Network.NetEvents.BasePlayerActionRequest">
            <summary>A net-synced request to perform an action for the target players.</summary>
        </member>
        <member name="P:StardewValley.Network.NetEvents.BasePlayerActionRequest.Target">
            <summary>The players for which to perform an action.</summary>
        </member>
        <member name="P:StardewValley.Network.NetEvents.BasePlayerActionRequest.OnlyPlayerId">
            <summary>The specific player ID to apply this event to, or <c>null</c> to apply it to all players matching <see cref="P:StardewValley.Network.NetEvents.BasePlayerActionRequest.Target"/>.</summary>
        </member>
        <member name="M:StardewValley.Network.NetEvents.BasePlayerActionRequest.Read(System.IO.BinaryReader)">
            <summary>Reads the request data from a net-sync stream.</summary>
            <param name="reader">The binary stream to read.</param>
        </member>
        <member name="M:StardewValley.Network.NetEvents.BasePlayerActionRequest.Write(System.IO.BinaryWriter)">
            <summary>Writes the request data to a net-sync stream.</summary>
            <param name="writer">The binary stream to write to.</param>
        </member>
        <member name="M:StardewValley.Network.NetEvents.BasePlayerActionRequest.MatchesPlayer(StardewValley.Farmer)">
            <summary>Get whether this event should be applied to a given player.</summary>
            <param name="player">The player to check.</param>
        </member>
        <member name="M:StardewValley.Network.NetEvents.BasePlayerActionRequest.OnlyForLocalPlayer">
            <summary>Get whether this request should only be applied to the local player.</summary>
        </member>
        <member name="M:StardewValley.Network.NetEvents.BasePlayerActionRequest.PerformAction(StardewValley.Farmer)">
            <summary>Applies the request to the current player.</summary>
            <param name="farmer">The players to change.</param>
        </member>
        <member name="M:StardewValley.Network.NetEvents.BasePlayerActionRequest.#ctor">
            <summary>Constructs an instance.</summary>
        </member>
        <member name="M:StardewValley.Network.NetEvents.BasePlayerActionRequest.#ctor(StardewValley.Network.NetEvents.PlayerActionTarget,System.Nullable{System.Int64})">
            <summary>Constructs an instance.</summary>
            <param name="target">The players for which to perform the action.</param>
            <param name="onlyPlayerId">The specific player ID to apply this event to, or <c>null</c> to apply it to all players matching <paramref name="target"/>.</param>
        </member>
        <member name="T:StardewValley.Network.NetEvents.BaseSetFlagRequest">
            <summary>A request to set a flag for a group of players.</summary>
        </member>
        <member name="P:StardewValley.Network.NetEvents.BaseSetFlagRequest.FlagId">
            <summary>The flag ID to update.</summary>
        </member>
        <member name="P:StardewValley.Network.NetEvents.BaseSetFlagRequest.FlagState">
            <summary>The flag state to set.</summary>
        </member>
        <member name="M:StardewValley.Network.NetEvents.BaseSetFlagRequest.Read(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetEvents.BaseSetFlagRequest.Write(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetEvents.BaseSetFlagRequest.#ctor">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetEvents.BaseSetFlagRequest.#ctor(StardewValley.Network.NetEvents.PlayerActionTarget,System.String,System.Boolean,System.Nullable{System.Int64})">
            <summary>Constructs an instance.</summary>
            <param name="target">The players for which to perform the action.</param>
            <param name="flagId">The flag ID to update.</param>
            <param name="flagState">The flag state to set.</param>
            <param name="onlyPlayerId">The specific player ID to apply this event to, or <c>null</c> to apply it to all players matching <paramref name="target"/>.</param>
        </member>
        <member name="T:StardewValley.Network.NetEvents.MailType">
            <summary>The mail lists for a player.</summary>
        </member>
        <member name="F:StardewValley.Network.NetEvents.MailType.Now">
            <summary>Mail in the mailbox now.</summary>
        </member>
        <member name="F:StardewValley.Network.NetEvents.MailType.Tomorrow">
            <summary>Mail queued to add to the mailbox tomorrow.</summary>
        </member>
        <member name="F:StardewValley.Network.NetEvents.MailType.Received">
            <summary>Mail that has already been received.</summary>
        </member>
        <member name="F:StardewValley.Network.NetEvents.MailType.All">
            <summary>All mail types.</summary>
        </member>
        <member name="T:StardewValley.Network.NetEvents.NutDropRequest">
            <summary>A request to drop a nut from a limited pool of nuts.</summary>
        </member>
        <member name="P:StardewValley.Network.NetEvents.NutDropRequest.Key">
            <summary>The key for the limited pool of nut drops.</summary>
        </member>
        <member name="P:StardewValley.Network.NetEvents.NutDropRequest.LocationName">
            <summary>The name of the location where the nut will be dropped.</summary>
        </member>
        <member name="P:StardewValley.Network.NetEvents.NutDropRequest.Tile">
            <summary>The tile coordinate where the nut will be dropped in <see cref="P:StardewValley.Network.NetEvents.NutDropRequest.LocationName" />.</summary>
        </member>
        <member name="P:StardewValley.Network.NetEvents.NutDropRequest.Limit">
            <summary>The max amount of nuts that should be dropped from the pool specified by <see cref="P:StardewValley.Network.NetEvents.NutDropRequest.Key" />.</summary>
        </member>
        <member name="P:StardewValley.Network.NetEvents.NutDropRequest.RewardAmount">
            <summary>The number of nuts that should be dropped.</summary>
        </member>
        <member name="M:StardewValley.Network.NetEvents.NutDropRequest.#ctor">
            <summary>Constructs an instance.</summary>
        </member>
        <member name="M:StardewValley.Network.NetEvents.NutDropRequest.#ctor(System.String,System.String,Microsoft.Xna.Framework.Point,System.Int32,System.Int32)">
            <summary>Constructs an instance.</summary>
            <param name="key">The key for the limited pool of nut drops.</param>
            <param name="locationName">The name of the location where the nut will be dropped.</param>
            <param name="tile">The tile coordinate where we will drop the nut in <paramref name="locationName" />.</param>
            <param name="limit">The max amount of nuts that should be dropped from the pool specified by <paramref name="key" />.</param>
            <param name="rewardAmount">The number of nuts that should be dropped.</param>
        </member>
        <member name="M:StardewValley.Network.NetEvents.NutDropRequest.Read(System.IO.BinaryReader)">
            <summary>Reads the nut drop request data from binary.</summary>
        </member>
        <member name="M:StardewValley.Network.NetEvents.NutDropRequest.Write(System.IO.BinaryWriter)">
            <summary>Writes the nut drop request data to binary.</summary>
        </member>
        <member name="T:StardewValley.Network.NetEvents.PlayerActionTarget">
            <summary>The player(s) to change for a net event request.</summary>
        </member>
        <member name="F:StardewValley.Network.NetEvents.PlayerActionTarget.Current">
            <summary>Apply the action to the current player.</summary>
        </member>
        <member name="F:StardewValley.Network.NetEvents.PlayerActionTarget.Host">
            <summary>Apply the action to the main player.</summary>
        </member>
        <member name="F:StardewValley.Network.NetEvents.PlayerActionTarget.All">
            <summary>Apply the action to all players (regardless of whether they're online).</summary>
        </member>
        <member name="T:StardewValley.Network.NetEvents.SetMailRequest">
            <summary>A request to add or remove mail for a group of players.</summary>
        </member>
        <member name="P:StardewValley.Network.NetEvents.SetMailRequest.MailType">
            <summary>When the mail should be received by the player.</summary>
        </member>
        <member name="M:StardewValley.Network.NetEvents.SetMailRequest.#ctor">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetEvents.SetMailRequest.#ctor(StardewValley.Network.NetEvents.PlayerActionTarget,System.String,StardewValley.Network.NetEvents.MailType,System.Boolean,System.Nullable{System.Int64})">
            <summary>Constructs an instance.</summary>
            <param name="target">The players for which to perform the action.</param>
            <param name="mailId">The mail ID to add.</param>
            <param name="mailType">When the mail should be received by the player.</param>
            <param name="state">Whether to add the mail; else it'll be removed.</param>
            <param name="onlyPlayerId">This allows targeting individual players in specialized cases; most code should set <see cref="P:StardewValley.Network.NetEvents.BasePlayerActionRequest.Target"/> instead.</param>
        </member>
        <member name="M:StardewValley.Network.NetEvents.SetMailRequest.PerformAction(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetEvents.SetMailRequest.Read(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetEvents.SetMailRequest.Write(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetEvents.SetMailRequest.ToggleMailbox(StardewValley.Farmer,System.String,System.Boolean)">
            <summary>Toggle a mail flag in the player's mailbox.</summary>
            <param name="farmer">The farmer to update.</param>
            <param name="mailId">The mail ID to add or remove.</param>
            <param name="add">Whether to add the mail flag; else remove it.</param>
        </member>
        <member name="T:StardewValley.Network.NetEvents.SetSimpleFlagRequest">
            <summary>A request to set or unset a simple flag for a group of players.</summary>
        </member>
        <member name="P:StardewValley.Network.NetEvents.SetSimpleFlagRequest.FlagType">
            <summary>The flag to set for the matching players.</summary>
        </member>
        <member name="M:StardewValley.Network.NetEvents.SetSimpleFlagRequest.#ctor">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetEvents.SetSimpleFlagRequest.#ctor(StardewValley.Network.NetEvents.SimpleFlagType,StardewValley.Network.NetEvents.PlayerActionTarget,System.String,System.Boolean,System.Nullable{System.Int64})">
            <inheritdoc cref="M:StardewValley.Network.NetEvents.BaseSetFlagRequest.#ctor(StardewValley.Network.NetEvents.PlayerActionTarget,System.String,System.Boolean,System.Nullable{System.Int64})" />
            <param name="flagType">The flag to set for the matching players.</param>
            <param name="onlyPlayerId">The specific player ID to apply this event to, or <c>null</c> to apply it to all players matching <paramref name="target"/>.</param>
        </member>
        <member name="M:StardewValley.Network.NetEvents.SetSimpleFlagRequest.Read(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetEvents.SetSimpleFlagRequest.Write(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetEvents.SetSimpleFlagRequest.PerformAction(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="T:StardewValley.Network.NetEvents.SimpleFlagType">
            <summary>A flag type which can be set for other players via <see cref="T:StardewValley.Network.NetEvents.SetSimpleFlagRequest"/> and <see cref="M:StardewValley.FarmerTeam.RequestSetSimpleFlag(StardewValley.Network.NetEvents.SimpleFlagType,StardewValley.Network.NetEvents.PlayerActionTarget,System.String,System.Boolean,System.Nullable{System.Int64})"/></summary>
        </member>
        <member name="F:StardewValley.Network.NetEvents.SimpleFlagType.ActionApplied">
            <summary>An action ID applied for the player.</summary>
        </member>
        <member name="F:StardewValley.Network.NetEvents.SimpleFlagType.CookingRecipeKnown">
            <summary>A cooking recipe learned by the player.</summary>
        </member>
        <member name="F:StardewValley.Network.NetEvents.SimpleFlagType.CraftingRecipeKnown">
            <summary>A cooking recipe learned by the player.</summary>
        </member>
        <member name="F:StardewValley.Network.NetEvents.SimpleFlagType.DialogueAnswerSelected">
            <summary>A dialogue answer selected by the player.</summary>
        </member>
        <member name="F:StardewValley.Network.NetEvents.SimpleFlagType.EventSeen">
            <summary>An event seen by the player.</summary>
        </member>
        <member name="F:StardewValley.Network.NetEvents.SimpleFlagType.HasQuest">
            <summary>A quest within the player's quest log.</summary>
        </member>
        <member name="F:StardewValley.Network.NetEvents.SimpleFlagType.SongHeard">
            <summary>A song track ID heard by the player.</summary>
        </member>
        <member name="T:StardewValley.Network.NetLocationRef">
            <summary>A cached reference to a local location.</summary>
            <remarks>This fetches and caches the location from <see cref="M:StardewValley.Game1.getLocationFromName(System.String)"/> based on the <see cref="P:StardewValley.Network.NetLocationRef.LocationName"/> and <see cref="P:StardewValley.Network.NetLocationRef.IsStructure"/> values.</remarks>
        </member>
        <member name="P:StardewValley.Network.NetLocationRef.LocationName">
            <summary>The unique name of the target location.</summary>
        </member>
        <member name="P:StardewValley.Network.NetLocationRef.IsStructure">
            <summary>Whether the target location is a building interior.</summary>
        </member>
        <member name="P:StardewValley.Network.NetLocationRef.Value">
            <summary>The cached location instance.</summary>
        </member>
        <member name="M:StardewValley.Network.NetLocationRef.Update(System.Boolean)">
            <summary>Update the location instance if the <see cref="P:StardewValley.Network.NetLocationRef.LocationName"/> or <see cref="P:StardewValley.Network.NetLocationRef.IsStructure"/> values changed.</summary>
            <param name="forceUpdate">Whether to update the location reference even if the target values didn't change.</param>
        </member>
        <member name="E:StardewValley.Network.NetPosition.fieldChangeEvent">
            <summary>An event raised when this field's value is set (either locally or remotely). Not triggered by changes due to interpolation. May be triggered before the change is visible on the field, if InterpolationTicks > 0.</summary>
        </member>
        <member name="E:StardewValley.Network.NetPosition.fieldChangeVisibleEvent">
            <summary>An event raised after this field's value is set and interpolated.</summary>
        </member>
        <member name="T:StardewValley.Network.NetReady.Internal.BaseReadyCheck">
            <summary>A cancelable ready-check.</summary>
        </member>
        <member name="P:StardewValley.Network.NetReady.Internal.BaseReadyCheck.Id">
            <summary>The unique ID for this ready check.</summary>
        </member>
        <member name="P:StardewValley.Network.NetReady.Internal.BaseReadyCheck.ActiveLockId">
            <summary>The ID of the active lock.</summary>
        </member>
        <member name="P:StardewValley.Network.NetReady.Internal.BaseReadyCheck.State">
            <summary>The current local ready state of the check.</summary>
        </member>
        <member name="P:StardewValley.Network.NetReady.Internal.BaseReadyCheck.NumberReady">
            <summary>The number of farmers that are ready to proceed.</summary>
        </member>
        <member name="P:StardewValley.Network.NetReady.Internal.BaseReadyCheck.NumberRequired">
            <summary>The number of farmers that are required to proceed.</summary>
        </member>
        <member name="P:StardewValley.Network.NetReady.Internal.BaseReadyCheck.IsReady">
            <summary>Whether all required farmers are ready to proceed.</summary>
        </member>
        <member name="P:StardewValley.Network.NetReady.Internal.BaseReadyCheck.IsCancelable">
            <summary>Whether we can still cancel our ready state.</summary>
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.BaseReadyCheck.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="id">The unique ID for this ready check.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.BaseReadyCheck.SetRequiredFarmers(System.Collections.Generic.List{System.Int64})">
            <summary>Set the players that are needed for this ready check to pass.</summary>
            <param name="farmerIds">The required player IDs.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.BaseReadyCheck.SetLocalReady(System.Boolean)">
            <summary>Set whether the local player is ready to proceed.</summary>
            <param name="ready">Whether the local player is ready.</param>
            <returns>Returns <c>true</c> if we successfully updated the local state, or <c>false</c> if we can no longer update the state.</returns>
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.BaseReadyCheck.Update">
            <summary>Update this ready check.</summary>
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.BaseReadyCheck.ProcessMessage(StardewValley.Network.NetReady.Internal.ReadyCheckMessageType,StardewValley.Network.IncomingMessage)">
            <summary>Process an incoming ready check sync message.</summary>
            <param name="messageType">The ready check sync type.</param>
            <param name="message">The incoming sync message.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.BaseReadyCheck.SendMessage(StardewValley.Network.NetReady.Internal.ReadyCheckMessageType,System.Object[])">
            <summary>Send a message to other players.</summary>
            <param name="messageType">The ready check sync type.</param>
            <param name="data">The message data to send.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.BaseReadyCheck.CreateSyncMessage(StardewValley.Network.NetReady.Internal.ReadyCheckMessageType,System.Object[])">
            <summary>Create a ready check sync message that can be sent to other players.</summary>
            <param name="messageType">The ready check sync type.</param>
            <param name="data">The message data to send.</param>
        </member>
        <member name="T:StardewValley.Network.NetReady.Internal.ClientReadyCheck">
            <summary>A cancelable ready-check for a farmhand player.</summary>
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ClientReadyCheck.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ClientReadyCheck.SetRequiredFarmers(System.Collections.Generic.List{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ClientReadyCheck.SetLocalReady(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ClientReadyCheck.Update">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ClientReadyCheck.ProcessMessage(StardewValley.Network.NetReady.Internal.ReadyCheckMessageType,StardewValley.Network.IncomingMessage)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ClientReadyCheck.SendMessage(StardewValley.Network.NetReady.Internal.ReadyCheckMessageType,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ClientReadyCheck.ProcessLock(StardewValley.Network.IncomingMessage)">
            <summary>Handle a request to mark this check as non-cancelable.</summary>
            <param name="message">The incoming <see cref="F:StardewValley.Network.NetReady.Internal.ReadyCheckMessageType.Lock" /> message.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ClientReadyCheck.ProcessRelease(StardewValley.Network.IncomingMessage)">
            <summary>Handle a request to mark this check as cancelable.</summary>
            <param name="message">The incoming <see cref="F:StardewValley.Network.NetReady.Internal.ReadyCheckMessageType.Release" /> message.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ClientReadyCheck.ProcessUpdateAmounts(StardewValley.Network.IncomingMessage)">
            <summary>Handle a request to update the displayed ready and required farmer counts.</summary>
            <param name="message">The incoming <see cref="F:StardewValley.Network.NetReady.Internal.ReadyCheckMessageType.UpdateAmounts" /> message.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ClientReadyCheck.ProcessFinish(StardewValley.Network.IncomingMessage)">
            <summary>Handle a request to flag this check as ready to proceed.</summary>
            <param name="message">The incoming <see cref="F:StardewValley.Network.NetReady.Internal.ReadyCheckMessageType.Finish" /> message.</param>
        </member>
        <member name="T:StardewValley.Network.NetReady.Internal.ReadyCheckMessageType">
            <summary>The network message types used to synchronize ready checks.</summary>
        </member>
        <member name="F:StardewValley.Network.NetReady.Internal.ReadyCheckMessageType.Ready">
            <summary>Sent by clients to mark the check as ready.</summary>
        </member>
        <member name="F:StardewValley.Network.NetReady.Internal.ReadyCheckMessageType.Cancel">
            <summary>Sent by clients to cancel a ready check.</summary>
        </member>
        <member name="F:StardewValley.Network.NetReady.Internal.ReadyCheckMessageType.Lock">
            <summary>Broadcast by the server to request that clients prohibit any further cancellations.</summary>
        </member>
        <member name="F:StardewValley.Network.NetReady.Internal.ReadyCheckMessageType.Release">
            <summary>Broadcast by the server to signal to clients that they can cancel the ready check.</summary>
        </member>
        <member name="F:StardewValley.Network.NetReady.Internal.ReadyCheckMessageType.AcceptLock">
            <summary>Sent by clients to accept a lock.</summary>
        </member>
        <member name="F:StardewValley.Network.NetReady.Internal.ReadyCheckMessageType.RejectLock">
            <summary>Sent by clients to reject a lock.</summary>
        </member>
        <member name="F:StardewValley.Network.NetReady.Internal.ReadyCheckMessageType.UpdateAmounts">
            <summary>Broadcast by the server to update the displayed ready and required player counts.</summary>
        </member>
        <member name="F:StardewValley.Network.NetReady.Internal.ReadyCheckMessageType.RequireFarmers">
            <summary>Sent by clients to update the required players for a check.</summary>
        </member>
        <member name="F:StardewValley.Network.NetReady.Internal.ReadyCheckMessageType.Finish">
            <summary>Broadcast by the server when all players are ready, locked, and should proceed.</summary>
        </member>
        <member name="T:StardewValley.Network.NetReady.Internal.ReadyState">
            <summary>The possible states for a ready check.</summary>
        </member>
        <member name="F:StardewValley.Network.NetReady.Internal.ReadyState.NotReady">
            <summary>Not marked as ready to proceed with the check.</summary>
        </member>
        <member name="F:StardewValley.Network.NetReady.Internal.ReadyState.Ready">
            <summary>Ready to proceed, but can still cancel.</summary>
        </member>
        <member name="F:StardewValley.Network.NetReady.Internal.ReadyState.Locked">
            <summary>Ready to proceed, and can no longer cancel.</summary>
        </member>
        <member name="T:StardewValley.Network.NetReady.Internal.ServerReadyCheck">
            <summary>A cancelable ready-check for the host player.</summary>
        </member>
        <member name="F:StardewValley.Network.NetReady.Internal.ServerReadyCheck.ReadyStates">
            <summary>The ready states for all farmers required by this ready check.</summary>
        </member>
        <member name="F:StardewValley.Network.NetReady.Internal.ServerReadyCheck.Locking">
            <summary>Whether we're currently attempting to lock all clients.</summary>
        </member>
        <member name="F:StardewValley.Network.NetReady.Internal.ServerReadyCheck.RequiredFarmers">
            <summary>All farmers that should be included in this check.</summary>
        </member>
        <member name="P:StardewValley.Network.NetReady.Internal.ServerReadyCheck.IncludesAll">
            <summary>Whether all farmers (including those that recently joined) should be included in this check.</summary>
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ServerReadyCheck.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ServerReadyCheck.SetRequiredFarmers(System.Collections.Generic.List{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ServerReadyCheck.SetLocalReady(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ServerReadyCheck.Update">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ServerReadyCheck.ProcessMessage(StardewValley.Network.NetReady.Internal.ReadyCheckMessageType,StardewValley.Network.IncomingMessage)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ServerReadyCheck.SendMessage(StardewValley.Network.NetReady.Internal.ReadyCheckMessageType,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ServerReadyCheck.ProcessReady(StardewValley.Network.IncomingMessage)">
            <summary>Handle a request to mark a farmer's state as ready.</summary>
            <param name="message">The incoming <see cref="F:StardewValley.Network.NetReady.Internal.ReadyCheckMessageType.Ready" /> message.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ServerReadyCheck.ProcessCancel(StardewValley.Network.IncomingMessage)">
            <summary>Handle a request to mark a farmer as non-ready.</summary>
            <param name="message">The incoming <see cref="F:StardewValley.Network.NetReady.Internal.ReadyCheckMessageType.Cancel" /> message.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ServerReadyCheck.ProcessAcceptLock(StardewValley.Network.IncomingMessage)">
            <summary>Handle a request to mark a farmer as locked.</summary>
            <param name="message">The incoming <see cref="F:StardewValley.Network.NetReady.Internal.ReadyCheckMessageType.AcceptLock" /> message.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ServerReadyCheck.ProcessRejectLock(StardewValley.Network.IncomingMessage)">
            <summary>Handle a request to mark a farmer as not ready to lock.</summary>
            <param name="message">The incoming <see cref="F:StardewValley.Network.NetReady.Internal.ReadyCheckMessageType.RejectLock" /> message.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ServerReadyCheck.ProcessRequireFarmers(StardewValley.Network.IncomingMessage)">
            <summary>Handle a request to set the required farmers for this check.</summary>
            <param name="message">The incoming <see cref="F:StardewValley.Network.NetReady.Internal.ReadyCheckMessageType.RequireFarmers" /> message.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ServerReadyCheck.RequireFarmers(System.Collections.Generic.ICollection{System.Int64})">
            <summary>Update the required farmers in <see cref="F:StardewValley.Network.NetReady.Internal.ServerReadyCheck.ReadyStates" /> to be the set of <paramref name="farmerIds" />.</summary>
            <param name="farmerIds">The list of farmer multiplayer IDs that should be required for this check.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.Internal.ServerReadyCheck.IsFarmerRequired(System.Int64)">
            <summary>Checks if a farmer is required for this ready check to pass.</summary>
            <param name="uid">The unique multiplayer ID of the farmer to check.</param>
        </member>
        <member name="T:StardewValley.Network.NetReady.ReadySynchronizer">
            <summary>Manages and synchronizes ready checks, which ensure all players are ready before proceeding (e.g. before sleeping).</summary>
        </member>
        <member name="F:StardewValley.Network.NetReady.ReadySynchronizer.ReadyChecks">
            <summary>The active ready checks by ID.</summary>
        </member>
        <member name="M:StardewValley.Network.NetReady.ReadySynchronizer.SetLocalRequiredFarmers(System.String,System.Collections.Generic.List{StardewValley.Farmer})">
            <summary>Set the players that are needed for this ready check to pass.</summary>
            <param name="id">The ready check ID.</param>
            <param name="requiredFarmers">The required player IDs.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.ReadySynchronizer.SetLocalReady(System.String,System.Boolean)">
            <summary>Set whether the local player is ready to proceed.</summary>
            <param name="id">The ready check ID.</param>
            <param name="ready">Whether the local player is ready.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.ReadySynchronizer.IsReady(System.String)">
            <summary>Get whether all required players are ready to proceed.</summary>
            <param name="id">The ready check ID.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.ReadySynchronizer.IsReadyCheckCancelable(System.String)">
            <summary>Get whether we can still cancel our acceptance of a ready check.</summary>
            <param name="id">The ready check ID.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.ReadySynchronizer.GetNumberReady(System.String)">
            <summary>Get the number of players that are ready to proceed.</summary>
            <param name="id">The ready check ID.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.ReadySynchronizer.GetNumberRequired(System.String)">
            <summary>Get the number of players that are required to proceed.</summary>
            <param name="id">The ready check ID.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.ReadySynchronizer.Update">
            <summary>Update all ready checks.</summary>
        </member>
        <member name="M:StardewValley.Network.NetReady.ReadySynchronizer.Reset">
            <summary>Clear all ready checks.</summary>
        </member>
        <member name="M:StardewValley.Network.NetReady.ReadySynchronizer.ProcessMessage(StardewValley.Network.IncomingMessage)">
            <summary>Process an incoming ready check sync message.</summary>
            <param name="message">The incoming sync message.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.ReadySynchronizer.GetIfExists(System.String)">
            <summary>Get a ready check by ID, or <c>null</c> if it doesn't exist.</summary>
            <param name="id">The ready check ID.</param>
        </member>
        <member name="M:StardewValley.Network.NetReady.ReadySynchronizer.GetOrCreate(System.String)">
            <summary>Get a ready check by ID, creating it if needed.</summary>
            <param name="id">The ready check ID.</param>
        </member>
        <member name="F:StardewValley.Network.NetWorldState.locationsWithBuildings">
            <summary>The backing field for <see cref="P:StardewValley.Network.NetWorldState.LocationsWithBuildings"/>.</summary>
        </member>
        <member name="F:StardewValley.Network.NetWorldState.netQuestOfTheDay">
            <summary>The backing field for <see cref="P:StardewValley.Network.NetWorldState.QuestOfTheDay"/>.</summary>
        </member>
        <member name="P:StardewValley.Network.NetWorldState.LocationsWithBuildings">
            <summary>The unique names for locations which contain at least one constructed building.</summary>
        </member>
        <member name="P:StardewValley.Network.NetWorldState.QuestOfTheDay">
            <summary>The daily quest that's shown on the billboard, if any.</summary>
            <remarks>This is synchronized from the host in multiplayer. See <see cref="M:StardewValley.Network.NetWorldState.SetQuestOfTheDay(StardewValley.Quests.Quest)"/> to set it.</remarks>
        </member>
        <member name="M:StardewValley.Network.NetWorldState.SetQuestOfTheDay(StardewValley.Quests.Quest)">
            <summary>Sets the quest of the day and synchronizes it to other players. In multiplayer, this can only be called on the host instance.</summary>
            <param name="quest">The daily quest to set.</param>
        </member>
        <member name="M:StardewValley.Network.NetWorldState.TryAssignFarmhandHome(StardewValley.Farmer)">
            <summary>Assign a farmhand to a cabin if their current home is invalid.</summary>
            <param name="farmhand">The farmhand instance.</param>
            <returns>Returns whether the farmhand has a valid home (either already assigned or just assigned).</returns>
        </member>
        <member name="M:StardewValley.Network.NetWorldState.GetBuilderData(System.String)">
            <summary>Get cached info about the building being constructed by an NPC.</summary>
            <param name="builderName">The internal name of the NPC constructing buildings.</param>
        </member>
        <member name="M:StardewValley.Network.NetWorldState.MarkUnderConstruction(System.String,StardewValley.Buildings.Building)">
            <summary>Mark a building as being under construction.</summary>
            <param name="builderName">The internal name of the NPC constructing it.</param>
            <param name="building">The building being constructed.</param>
        </member>
        <member name="M:StardewValley.Network.NetWorldState.UpdateUnderConstruction">
            <summary>Remove constructed buildings from the cached list of buildings under construction.</summary>
        </member>
        <member name="M:StardewValley.Network.NetWorldState.UpdateBuildingCache(StardewValley.GameLocation)">
            <summary>Add or remove the location from the <see cref="P:StardewValley.Network.NetWorldState.LocationsWithBuildings"/> cache.</summary>
            <param name="location">The location to update.</param>
        </member>
        <member name="T:StardewValley.Network.OverlaidDictionary">
            <summary>A hybrid synchronized/unsynchronized dictionary where values either come from a synchronized NetDictionary, or from a locally maintained overlay dictionary.</summary>
        </member>
        <member name="P:StardewValley.Network.OverlaidDictionary.Length">
            <summary>The number of key/value pairs in the dictionary.</summary>
        </member>
        <member name="M:StardewValley.Network.OverlaidDictionary.Lock">
            <summary>Freeze the object list, so changes will be queued until <see cref="M:StardewValley.Network.OverlaidDictionary.Unlock"/> is called.</summary>
        </member>
        <member name="M:StardewValley.Network.OverlaidDictionary.Unlock">
            <summary>Remove the freeze added by <see cref="M:StardewValley.Network.OverlaidDictionary.Lock"/> and apply all changes that were queued while it was locked.</summary>
        </member>
        <member name="M:StardewValley.Network.OverlaidDictionary.Add(Microsoft.Xna.Framework.Vector2,StardewValley.Object)">
            <summary>Add an object to the dictionary.</summary>
            <param name="key">The tile position.</param>
            <param name="value">The object instance.</param>
            <exception cref="T:System.ArgumentException">The key is already present in the dictionary.</exception>
        </member>
        <member name="M:StardewValley.Network.OverlaidDictionary.TryAdd(Microsoft.Xna.Framework.Vector2,StardewValley.Object)">
            <summary>Add an object to the dictionary if the key isn't already present.</summary>
            <param name="key">The tile position.</param>
            <param name="value">The object instance.</param>
            <returns>Returns whether the object was successfully added.</returns>
        </member>
        <member name="F:StardewValley.Multiplayer.compressed">
            <summary>A compressed message, which must be decompressed to read the actual message.</summary>
        </member>
        <member name="F:StardewValley.Multiplayer.chat_token_aOrAn">
            <summary>A token prefix for messages sent via <see cref="M:StardewValley.Multiplayer.sendChatInfoMessage(System.String,System.String[])"/> that shows the result of <see cref="M:StardewValley.Utility.AOrAn(System.String)"/> for a tokenizable input.</summary>
        </member>
        <member name="F:StardewValley.Multiplayer.protocolVersionOverride">
            <summary>The override value for <see cref="P:StardewValley.Multiplayer.protocolVersion"/>, if set manually in the build settings.</summary>
        </member>
        <member name="P:StardewValley.Multiplayer.protocolVersion">
            <summary>A version string sent by the server to new connections. Clients disconnect with an error if it doesn't match their own protocol version, to prevent accidental connection of incompatible games.</summary>
        </member>
        <member name="M:StardewValley.Multiplayer.broadcastGlobalMessage(System.String,System.Boolean,StardewValley.GameLocation,System.String[])">
            <summary>Broadcast a global popup message.</summary>
            <param name="translationKey">The translation key for the message text.</param>
            <param name="onlyShowIfEmpty">Whether to show the message only when no other messages are showing.</param>
            <param name="location">The location where players will see the message, or <see langword="null" /> to show it everywhere.</param>
            <param name="substitutions">The token substitutions for placeholders in the translation text, if any.</param>
        </member>
        <member name="M:StardewValley.Multiplayer.globalChatInfoMessage(System.String,System.String[])">
            <summary>In multiplayer, send a chat messages to all connected players including the current player. In single-player, do nothing.</summary>
            <inheritdoc cref="M:StardewValley.Multiplayer.receiveChatInfoMessage(StardewValley.Farmer,System.String,System.String[])"/>
        </member>
        <member name="M:StardewValley.Multiplayer.globalChatInfoMessageEvenInSinglePlayer(System.String,System.String[])">
            <summary>Send a chat messages to all connected players including the current player.</summary>
            <inheritdoc cref="M:StardewValley.Multiplayer.receiveChatInfoMessage(StardewValley.Farmer,System.String,System.String[])"/>
        </member>
        <member name="M:StardewValley.Multiplayer.sendChatInfoMessage(System.String,System.String[])">
            <summary>Send a chat messages to all connected players, excluding the current player.</summary>
            <inheritdoc cref="M:StardewValley.Multiplayer.receiveChatInfoMessage(StardewValley.Farmer,System.String,System.String[])"/>
        </member>
        <member name="M:StardewValley.Multiplayer.receiveChatInfoMessage(StardewValley.Farmer,System.String,System.String[])">
            <summary>Receive a chat message sent via a method like <see cref="M:StardewValley.Multiplayer.globalChatInfoMessage(System.String,System.String[])"/> or <see cref="M:StardewValley.Multiplayer.sendChatInfoMessage(System.String,System.String[])"/>.</summary>
            <param name="sourceFarmer">The player who sent the message.</param>
            <param name="messageKey">The translation key to show. This is prefixed with <c>Strings\UI:Chat_</c> automatically.</param>
            <param name="args">The values with which to replace placeholders in the translation text. Localizable values should be <see cref="T:StardewValley.TokenizableStrings.TokenParser">tokenized strings</see> or special tokens like <see cref="F:StardewValley.Multiplayer.chat_token_aOrAn"/>, since other players may not be playing in the same language.</param>
        </member>
        <member name="F:StardewValley.NewDaySynchronizer.ServerReady">
            <summary>A flag that clients use during <see cref="M:StardewValley.NewDaySynchronizer.start"/> to determine if they need to wait for the server.</summary>
        </member>
        <member name="F:StardewValley.NewDaySynchronizer.Instantiated">
            <summary>A flag that used by <see cref="M:StardewValley.NewDaySynchronizer.hasInstance"/> that determines if the <see cref="T:StardewValley.NewDaySynchronizer"/> has a useable signaling context.</summary>
        </member>
        <member name="M:StardewValley.NewDaySynchronizer.hasInstance">
            <summary>Determines if the <see cref="T:StardewValley.NewDaySynchronizer"/> object has a context that can actively be used for synchronization.</summary>
            <returns><see langword="true"/> if <see cref="T:StardewValley.NewDaySynchronizer"/> object has a signaling context, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:StardewValley.NewDaySynchronizer.create">
            <summary>Creates a synchronizer context that can be used for signaling. <see cref="M:StardewValley.NewDaySynchronizer.hasInstance"/> will return <see langword="true"/> after this call.</summary>
        </member>
        <member name="M:StardewValley.NewDaySynchronizer.destroy">
            <summary>Destroys the synchronizer context, such that it can no longer be used for signaling. <see cref="M:StardewValley.NewDaySynchronizer.hasInstance"/> will return <see langword="false"/> after this call.</summary>
        </member>
        <member name="M:StardewValley.NewDaySynchronizer.flagServerReady">
            <summary>Notifies a client that the server has reached the <see cref="M:StardewValley.NewDaySynchronizer.start"/>. <see cref="M:StardewValley.NewDaySynchronizer.start"/> will unblock after this call.</summary>
        </member>
        <member name="M:StardewValley.NewDaySynchronizer.hasStarted">
            <summary>Check if the server has started the synchronization context, so the calling task can <see langword="yield"/> otherwise.</summary>
        </member>
        <member name="M:StardewValley.Noise.Generate(System.Single)">
            <summary>
            1D simplex noise
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:StardewValley.Noise.Generate(System.Single,System.Single)">
            <summary>
            2D simplex noise
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="F:StardewValley.NPC.portrait">
            <summary>The loaded portrait asset.</summary>
            <remarks>This is normally set via <see cref="M:StardewValley.NPC.ChooseAppearance(StardewValley.LocalizedContentManager)"/>.</remarks>
        </member>
        <member name="F:StardewValley.NPC.LastLocationNameForAppearance">
            <summary>The last location for which <see cref="M:StardewValley.NPC.ChooseAppearance(StardewValley.LocalizedContentManager)"/> was applied.</summary>
        </member>
        <member name="F:StardewValley.NPC.LastAppearanceId">
            <summary>The appearance ID from <c>Data/Characters</c> chosen by the last <see cref="M:StardewValley.NPC.ChooseAppearance(StardewValley.LocalizedContentManager)"/> call, or <c>null</c> if the last call didn't apply an appearance entry. This may not match their current textures if they were manually overridden after calling <see cref="M:StardewValley.NPC.ChooseAppearance(StardewValley.LocalizedContentManager)"/>.</summary>
        </member>
        <member name="F:StardewValley.NPC.gender">
            <summary>The net-synchronized backing field for <see cref="P:StardewValley.NPC.Gender"/>.</summary>
        </member>
        <member name="F:StardewValley.NPC.datingFarmer">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="F:StardewValley.Farmer.friendshipData"/> instead.</summary>
        </member>
        <member name="F:StardewValley.NPC.divorcedFromFarmer">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="F:StardewValley.Farmer.friendshipData"/> instead.</summary>
        </member>
        <member name="P:StardewValley.NPC.Dialogue">
            <summary>The main dialogue data for this NPC, if available.</summary>
        </member>
        <member name="P:StardewValley.NPC.LoadedDialogueKey">
            <summary>The dialogue key that was loaded via <see cref="P:StardewValley.NPC.Dialogue"/>, if any.</summary>
        </member>
        <member name="P:StardewValley.NPC.AllowDynamicAppearance">
            <summary>Whether this NPC can dynamically change appearance based on their data in <c>Data/Characters</c>. This can be disabled for temporary NPCs and event actors.</summary>
        </member>
        <member name="P:StardewValley.NPC.IsVillager">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.NPC.Schedule">
            <summary>The schedule of this NPC's movements and actions today, if loaded. The key is the time of departure, and the value is a list of directions to reach the new position.</summary>
            <remarks>You can set the schedule using <see cref="M:StardewValley.NPC.TryLoadSchedule"/> or one of its overloads.</remarks>
        </member>
        <member name="P:StardewValley.NPC.ScheduleKey">
            <summary>The <see cref="P:StardewValley.NPC.Schedule"/>'s key in the original data asset, if loaded.</summary>
        </member>
        <member name="F:StardewValley.NPC.TemporaryDialogue">
            <summary>If set to a non-null value, the dialogue to return for <see cref="P:StardewValley.NPC.CurrentDialogue"/> instead of reading <see cref="F:StardewValley.Game1.npcDialogues"/>.</summary>
        </member>
        <member name="P:StardewValley.NPC.Gender">
            <summary>The character's gender identity.</summary>
        </member>
        <member name="F:StardewValley.NPC.portraitOverridden">
            <summary>Whether the NPC's portrait has been explicitly overridden (e.g. using the <c>changePortrait</c> event command) and shouldn't be changed automatically.</summary>
        </member>
        <member name="F:StardewValley.NPC.spriteOverridden">
            <summary>Whether the NPC's sprite has been explicitly overridden (e.g. using the <c>changeSprite</c> event command) and shouldn't be changed automatically.</summary>
        </member>
        <member name="M:StardewValley.NPC.ReadNpcHomeData(StardewValley.GameData.Characters.CharacterData,StardewValley.GameLocation,System.String@,Microsoft.Xna.Framework.Point@,System.Int32@)">
            <summary>Get an NPC's home location from its data, or fallback values if it doesn't exist.</summary>
            <param name="data">The character data for the NPC.</param>
            <param name="currentLocation">The NPC's current location, if applicable.</param>
            <param name="locationName">The internal name of the NPC's default map.</param>
            <param name="tile">The NPC's default tile position within the <paramref name="locationName"/>.</param>
            <param name="direction">The default facing direction.</param>
            <returns>Returns whether a valid home was found in the given character data.</returns>
        </member>
        <member name="M:StardewValley.NPC.ChooseAppearance(StardewValley.LocalizedContentManager)">
            <summary>Reload the NPC's sprite or portrait based on their character data within the current context.</summary>
            <param name="content">The content manager from which to load assets, or <c>null</c> for the default content manager.</param>
        </member>
        <member name="M:StardewValley.NPC.reloadSprite(System.Boolean)">
            <summary>Update the NPC state (including sprite, dialogue, facing direction, schedules, etc). Despite the name, this doesn't only affect the sprite.</summary>
            <param name="onlyAppearance">Only reload the NPC's appearance (e.g. sprite, portraits, or breather/shadow fields), don't change any other data.</param>
        </member>
        <member name="M:StardewValley.NPC.TryLoadPortraits(System.String,System.String@,StardewValley.LocalizedContentManager)">
            <summary>Try to load a portraits texture, or keep the current texture if the load fails.</summary>
            <param name="assetName">The asset name to load.</param>
            <param name="error">If loading the portrait failed, an error phrase indicating why it failed.</param>
            <param name="content">The content manager from which to load the asset, or <c>null</c> for the default content manager.</param>
            <returns>Returns whether the texture was successfully loaded.</returns>
        </member>
        <member name="M:StardewValley.NPC.TryLoadSprites(System.String,System.String@,StardewValley.LocalizedContentManager)">
            <summary>Try to load a sprite texture, or keep the current texture if the load fails.</summary>
            <param name="assetName">The asset name to load.</param>
            <param name="error">If loading the portrait failed, an error phrase indicating why it failed.</param>
            <param name="content">The content manager from which to load the asset, or <c>null</c> for the default content manager.</param>
            <param name="logOnFail">Whether to log a warning if the texture can't be loaded.</param>
            <returns>Returns whether the texture was successfully loaded.</returns>
        </member>
        <member name="M:StardewValley.NPC.CanReceiveGifts">
            <summary>Get whether this NPC can receive gifts from the player (regardless of whether they've already received one today).</summary>
        </member>
        <member name="M:StardewValley.NPC.getGiftTasteForThisItem(StardewValley.Item)">
            <summary>Get how much the NPC likes receiving an item as a gift.</summary>
            <param name="item">The item to check.</param>
            <returns>Returns one of <see cref="F:StardewValley.NPC.gift_taste_hate"/>, <see cref="F:StardewValley.NPC.gift_taste_dislike"/>, <see cref="F:StardewValley.NPC.gift_taste_neutral"/>, <see cref="F:StardewValley.NPC.gift_taste_like"/>, or <see cref="F:StardewValley.NPC.gift_taste_love"/>.</returns>
        </member>
        <member name="M:StardewValley.NPC.tryToReceiveActiveObject(StardewValley.Farmer,System.Boolean)">
            <summary>Try to receive an item from the player.</summary>
            <param name="who">The player whose active object to receive.</param>
            <param name="probe">Whether to return what the method would return if called normally, but without actually accepting the item or making any changes to the NPC. This is used to accurately predict whether the NPC would accept or react to the offer.</param>
            <returns>Returns true if the NPC accepted the item or reacted to the offer, else false.</returns>
        </member>
        <member name="M:StardewValley.NPC.performTenMinuteUpdate(System.Int32,StardewValley.GameLocation)">
            <summary>Runs NPC update logic on ten in-game minute intervals (e.g. greeting players or other NPCs)</summary>
            <param name="timeOfDay">The new in-game time.</param>
            <param name="location">The location where the update is occurring.</param>
        </member>
        <member name="M:StardewValley.NPC.TryGetDialogue(System.String)">
            <summary>Try to get a specific dialogue from the loaded <see cref="P:StardewValley.NPC.Dialogue"/>.</summary>
            <param name="key">The dialogue key.</param>
            <returns>Returns the matched dialogue if found, else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.NPC.TryGetDialogue(System.String,System.Object[])">
            <summary>Try to get a specific dialogue from the loaded <see cref="P:StardewValley.NPC.Dialogue"/>.</summary>
            <param name="key">The dialogue key.</param>
            <param name="substitutions">The values with which to replace placeholders like <c>{0}</c> in the loaded text.</param>
            <returns>Returns the matched dialogue if found, else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.NPC.tryToRetrieveDialogue(System.String,System.Int32,System.String)">
            <summary>Try to get a dialogue from the loaded <see cref="P:StardewValley.NPC.Dialogue"/>, applying variant rules for roommates, marriage, inlaws, dates, etc.</summary>
            <param name="preface">A prefix added to the translation keys to look up.</param>
            <param name="heartLevel">The NPC's heart level with the player.</param>
            <param name="appendToEnd">A suffix added to the translation keys to look up.</param>
            <returns>Returns the best matched dialogue if found, else <c>null</c>.</returns>
        </member>
        <member name="F:StardewValley.NPC.dayScheduleName">
            <summary>The backing field for <see cref="P:StardewValley.NPC.ScheduleKey"/>. Most code should use that property instead.</summary>
        </member>
        <member name="M:StardewValley.NPC.isBirthday">
            <summary>Get whether it's the NPC's birthday today.</summary>
        </member>
        <member name="M:StardewValley.NPC.getFavoriteItem">
            <summary>Get the NPC's first loved item for the Statue of Endless Fortune.</summary>
        </member>
        <member name="M:StardewValley.NPC.GetData">
            <summary>Get the NPC's data from <see cref="F:StardewValley.Game1.characterData"/>, if found.</summary>
        </member>
        <member name="M:StardewValley.NPC.TryGetData(System.String,StardewValley.GameData.Characters.CharacterData@)">
            <summary>Try to get an NPC's data from <see cref="F:StardewValley.Game1.characterData"/>.</summary>
            <param name="name">The NPC's internal name (i.e. the key in <see cref="F:StardewValley.Game1.characterData"/>).</param>
            <param name="data">The NPC data, if found.</param>
            <returns>Returns whether the NPC data was found.</returns>
        </member>
        <member name="M:StardewValley.NPC.GetDisplayName(System.String)">
            <summary>Get the translated display name for an NPC from the underlying data, if any.</summary>
            <param name="name">The NPC's internal name.</param>
        </member>
        <member name="M:StardewValley.NPC.GetTokenizedDisplayName">
            <summary>Get a tokenized string for the NPC's display name.</summary>
        </member>
        <member name="M:StardewValley.NPC.SpeaksDwarvish">
            <summary>Get whether this NPC speaks Dwarvish, which the player can only understand after finding the Dwarvish Translation Guide.</summary>
        </member>
        <member name="M:StardewValley.NPC.GetGiftReaction(StardewValley.Farmer,StardewValley.Object,System.Int32)">
            <summary>Get the NPC's reaction dialogue for receiving an item as a gift.</summary>
            <param name="giver">The player giving the gift.</param>
            <param name="gift">The item being gifted.</param>
            <param name="taste">The NPC's gift taste for this item, as returned by <see cref="M:StardewValley.NPC.getGiftTasteForThisItem(StardewValley.Item)"/>.</param>
            <returns>Returns the dialogue if the NPC can receive gifts, else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.NPC.getMugShotSourceRect">
            <summary>Get the pixel area in the <see cref="P:StardewValley.Character.Sprite"/> texture to show as the NPC's icon in contexts like the calendar and social menu.</summary>
        </member>
        <member name="M:StardewValley.NPC.changeScheduleForLocationAccessibility(System.String@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
             returns true if location is inaccessable and should use "Default" instead.
            
            
             </summary>
             <param name="locationName"></param>
             <param name="tileX"></param>
             <param name="tileY"></param>
             <param name="facingDirection"></param>
             <returns></returns>
        </member>
        <member name="M:StardewValley.NPC.parseMasterSchedule(System.String,System.String)">
            <inheritdoc cref="M:StardewValley.NPC.parseMasterScheduleImpl(System.String,System.String,System.Collections.Generic.List{System.String})" />
        </member>
        <member name="M:StardewValley.NPC.parseMasterScheduleImpl(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>Parse a schedule script into its component commands, handling redirection like <c>GOTO</c> automatically.</summary>
            <param name="scheduleKey">The schedule key being parsed.</param>
            <param name="rawData">The raw schedule script to parse.</param>
            <param name="visited">The schedule keys which led to this parse (if any).</param>
            <remarks>This is a low-level method. Most code should call <see cref="M:StardewValley.NPC.TryLoadSchedule(System.String)"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.NPC.SplitScheduleCommands(System.String)">
            <summary>Split a raw schedule script into its component commands.</summary>
            <param name="rawScript">The raw schedule script to split.</param>
        </member>
        <member name="M:StardewValley.NPC.TryLoadSchedule">
            <summary>Try to load a schedule that applies today, or disable the schedule if none is found.</summary>
            <returns>Returns whether a schedule was successfully loaded.</returns>
        </member>
        <member name="M:StardewValley.NPC.TryLoadSchedule(System.String)">
            <summary>Try to load a schedule matching the the given key, or disable the schedule if it's missing or invalid.</summary>
            <param name="key">The key for the schedule to load.</param>
            <returns>Returns whether the schedule was successfully loaded.</returns>
        </member>
        <member name="M:StardewValley.NPC.TryLoadSchedule(System.String,System.String)">
            <summary>Try to load a raw schedule script, or disable the schedule if it's invalid.</summary>
            <param name="key">The schedule's key in the data asset.</param>
            <param name="rawSchedule">The schedule script to load.</param>
        </member>
        <member name="M:StardewValley.NPC.TryLoadSchedule(System.String,System.Collections.Generic.Dictionary{System.Int32,StardewValley.Pathfinding.SchedulePathDescription})">
            <summary>Try to load raw schedule data, or disable the schedule if it's invalid.</summary>
            <param name="key">The schedule's key in the data asset.</param>
            <param name="schedule">The schedule data to load.</param>
        </member>
        <member name="M:StardewValley.NPC.ClearSchedule">
            <summary>Disable the schedule for today.</summary>
        </member>
        <member name="M:StardewValley.NPC.dayUpdate(System.Int32)">
            <summary>Update the NPC state when setting up the new day, before the game saves overnight.</summary>
            <param name="dayOfMonth">The current day of month.</param>
            <remarks>See also <see cref="M:StardewValley.NPC.OnDayStarted"/>, which happens after saving when the day has started.</remarks>
        </member>
        <member name="M:StardewValley.NPC.OnDayStarted">
            <summary>Handle the new day starting after the player saves, loads, or connects.</summary>
            <remarks>See also <see cref="M:StardewValley.NPC.dayUpdate(System.Int32)"/>, which happens while setting up the day before saving.</remarks>
        </member>
        <member name="M:StardewValley.NPC.hasDarkSkin">
            <summary>Whether this character has dark skin for the purposes of child genetics.</summary>
        </member>
        <member name="M:StardewValley.NPC.isAdoptionSpouse">
            <summary>Whether the player will need to adopt children with this spouse, instead of either the player or NPC giving birth.</summary>
        </member>
        <member name="M:StardewValley.NPC.isVillager">
            <summary>Get whether this is a villager NPC, regardless of whether they're present in <c>Data/Characters</c>.</summary>
        </member>
        <member name="M:StardewValley.NPC.spouseObstacleCheck(StardewValley.MarriageDialogueReference,StardewValley.GameLocation,System.Boolean)">
            <summary>
            return true if spouse encountered obstacle.
            if force == true then the obstacle check will be ignored and spouse will absolutely be put into bed.
            </summary>
            <param name="backToBedMessage"></param>
            <param name="currentLocation"></param>
            <returns></returns>
        </member>
        <member name="M:StardewValley.MarriageDialogueReference._ReplaceTokens(StardewValley.Dialogue,StardewValley.NPC)">
            <summary>Replace any tokens in the dialogue text with their localized variants.</summary>
            <param name="dialogue">The dialogue to modify.</param>
            <param name="npc">The NPC for which to replace tokens.</param>
        </member>
        <member name="M:StardewValley.MarriageDialogueReference._ReplaceTokens(System.String,StardewValley.NPC)">
            <summary>Replace any tokens in the dialogue text with their localized variants.</summary>
            <param name="text">The dialogue text to modify.</param>
            <param name="npc">The NPC for which to replace tokens.</param>
        </member>
        <member name="F:StardewValley.Fence.woodFenceId">
            <summary>The unqualified item ID for a wood fence.</summary>
        </member>
        <member name="F:StardewValley.Fence.stoneFenceId">
            <summary>The unqualified item ID for a stone fence.</summary>
        </member>
        <member name="F:StardewValley.Fence.ironFenceId">
            <summary>The unqualified item ID for an iron fence.</summary>
        </member>
        <member name="F:StardewValley.Fence.hardwoodFenceId">
            <summary>The unqualified item ID for a hardwood fence.</summary>
        </member>
        <member name="F:StardewValley.Fence.gateId">
            <summary>The unqualified item ID for a fence gate.</summary>
        </member>
        <member name="F:StardewValley.Fence.obsolete_whichType">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Item.ItemId"/> instead.</summary>
        </member>
        <member name="M:StardewValley.Fence.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Fence.MigrateLegacyItemId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Fence.OnIdChanged">
            <summary>Reset the fence data and texture when the item ID changes (e.g. when the save is being loaded).</summary>
        </member>
        <member name="M:StardewValley.Fence.GetData">
            <summary>Get the fence's data from <c>Data/Fences</c>, if found.</summary>
        </member>
        <member name="M:StardewValley.Fence.TryGetData(System.String,StardewValley.GameData.Fences.FenceData@)">
            <summary>Try to get a fence's data from <c>Data/Fences</c>.</summary>
            <param name="itemId">The fence's unqualified item ID (i.e. the key in <c>Data/Fences</c>).</param>
            <param name="data">The fence data, if found.</param>
            <returns>Returns whether the fence data was found.</returns>
        </member>
        <member name="M:StardewValley.Fence.checkForAction(StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Fence.IsValidRemovalTool(StardewValley.Tool)">
            <summary>Get whether a tool can be used to break this fence.</summary>
            <param name="tool">The tool instance to check.</param>
        </member>
        <member name="M:StardewValley.Fence.minutesElapsed(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Fence.actionOnPlayerEntry">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Fence.performObjectDropInAction(StardewValley.Item,System.Boolean,StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Fence.performDropDownAction(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Object.litterCategory">
            <summary>The category for spawned twigs, weeds, and stones which spawn randomly in a location.</summary>
        </member>
        <member name="F:StardewValley.Object.WildHoneyPreservedId">
            <summary>The <see cref="F:StardewValley.Object.preservedParentSheetIndex"/> value for Wild Honey.</summary>
        </member>
        <member name="F:StardewValley.Object.tileLocation">
            <summary>The backing field for <see cref="P:StardewValley.Object.TileLocation"/>.</summary>
            <remarks>When changing this value, most code should use <see cref="P:StardewValley.Object.TileLocation"/> instead so the bounding box is recalculated.</remarks>
        </member>
        <member name="F:StardewValley.Object.lastOutputRuleId">
            <summary>If this is a machine, the <see cref="F:StardewValley.GameData.Machines.MachineOutputRule.Id"/> value for the last rule which set the <see cref="F:StardewValley.Object.heldObject"/> value.</summary>
        </member>
        <member name="F:StardewValley.Object.lastInputItem">
            <summary>If this is a machine, the last input item for which output was produced.</summary>
        </member>
        <member name="F:StardewValley.Object.customBuff">
            <summary>If set, a custom buff to apply when the item is consumed, in addition to any buffs normally applied by the item.</summary>
        </member>
        <member name="F:StardewValley.Object.autoLoadFrom">
            <summary>The inventory from which items are being auto-loaded, if any.</summary>
            <remarks>This is set during auto-loading, and unset immediately after the auto-load succeeds or fails.</remarks>
        </member>
        <member name="P:StardewValley.Object.Location">
            <summary>The location containing this object, if it's placed in the world.</summary>
        </member>
        <member name="P:StardewValley.Object.TileLocation">
            <summary>The item's tile location in the world.</summary>
        </member>
        <member name="F:StardewValley.Object.obsolete_honeyType">
            <summary>Obsolete. This is only kept to preserve data from old save files, and isn't synchronized in multiplayer. Use <see cref="F:StardewValley.Object.preservedParentSheetIndex"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Object.displayNameFormat">
            <summary>If set, a tokenizable string for the display name to use instead of the item data.</summary>
            <remarks>This can contain <c>%DISPLAY_NAME</c> for the display name from data, and <c>%PRESERVED_DISPLAY_NAME</c> for the display name of the preserved item (if applicable).</remarks>
        </member>
        <member name="F:StardewValley.Object.displayName">
            <summary>The cached value for <see cref="P:StardewValley.Object.DisplayName"/>.</summary>
        </member>
        <member name="P:StardewValley.Object.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Object.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Object.Name">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Object.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Object.#ctor">
            <summary>Construct an item with default data.</summary>
        </member>
        <member name="M:StardewValley.Object.#ctor(Microsoft.Xna.Framework.Vector2,System.String,System.Boolean)">
            <summary>Construct a <see cref="F:StardewValley.ItemRegistry.type_bigCraftable"/>-type item.</summary>
        </member>
        <member name="M:StardewValley.Object.#ctor(System.String,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>Construct a <see cref="F:StardewValley.ItemRegistry.type_object"/>-type item.</summary>
        </member>
        <member name="M:StardewValley.Object.SetIdAndSprite(System.Int32)">
            <summary>Change the item's ID and parent sheet index without changing any other item data.</summary>
            <param name="spriteIndex">The new parent sheet index and item ID to set.</param>
        </member>
        <member name="M:StardewValley.Object.RecalculateBoundingBox">
            <summary>Recalculate the item's bounding box based on its current position.</summary>
            <remarks>This is only needed in cases where the position was moved manually instead of using the <see cref="P:StardewValley.Object.TileLocation"/> property.</remarks>
        </member>
        <member name="M:StardewValley.Object.loadDisplayName">
            <summary>Get the translated display name for the item, excluding metadata like "(Recipe)".</summary>
            <remarks>Most code should use <see cref="P:StardewValley.Object.DisplayName"/> instead, which caches the value.</remarks>
        </member>
        <member name="M:StardewValley.Object.performObjectDropInAction(StardewValley.Item,System.Boolean,StardewValley.Farmer,System.Boolean)">
            <summary>Try to add an item to the object (e.g. input for a machine, placed on a table, etc).</summary>
            <param name="dropInItem">The item to add.</param>
            <param name="probe">Whether to return whether the item would be accepted without making any changes.</param>
            <param name="who">The player adding the item.</param>
            <param name="returnFalseIfItemConsumed">Whether to return false if the item was accepted, but it was already deducted from the inventory.</param>
            <returns>Usually returns whether the item was accepted by the machine.</returns>
        </member>
        <member name="M:StardewValley.Object.TryApplyFairyDust(System.Boolean)">
            <summary>Update the machine for the effects of fairy dust, if applicable.</summary>
            <param name="probe">Whether the game is only checking whether fairy dust would be accepted.</param>
            <returns>Returns whether the machine was updated (or if <paramref name="probe"/> is true, whether it would have been updated).</returns>
        </member>
        <member name="M:StardewValley.Object.OutputSolarPanel(StardewValley.Object,StardewValley.Item,System.Boolean,StardewValley.GameData.Machines.MachineItemOutput,System.Nullable{System.Int32}@)">
            <summary>Get the output item to produce for a Solar Panel.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.MachineOutputDelegate"/>
        </member>
        <member name="M:StardewValley.Object.OutputStatueOfEndlessFortune(StardewValley.Object,StardewValley.Item,System.Boolean,StardewValley.GameData.Machines.MachineItemOutput,System.Nullable{System.Int32}@)">
            <summary>Get the output item to produce for a Statue of Endless Fortune.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.MachineOutputDelegate"/>
        </member>
        <member name="M:StardewValley.Object.OutputDeconstructor(StardewValley.Object,StardewValley.Item,System.Boolean,StardewValley.GameData.Machines.MachineItemOutput,System.Nullable{System.Int32}@)">
            <summary>Get the output item to produce for a Deconstructor.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.MachineOutputDelegate"/>
        </member>
        <member name="M:StardewValley.Object.OutputAnvil(StardewValley.Object,StardewValley.Item,System.Boolean,StardewValley.GameData.Machines.MachineItemOutput,System.Nullable{System.Int32}@)">
            <summary>Get the output item to produce for an Anvil.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.MachineOutputDelegate"/>
        </member>
        <member name="M:StardewValley.Object.OutputGeodeCrusher(StardewValley.Object,StardewValley.Item,System.Boolean,StardewValley.GameData.Machines.MachineItemOutput,System.Nullable{System.Int32}@)">
            <summary>Get the output item to produce for a Geode Crusher.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.MachineOutputDelegate"/>
        </member>
        <member name="M:StardewValley.Object.OutputIncubator(StardewValley.Object,StardewValley.Item,System.Boolean,StardewValley.GameData.Machines.MachineItemOutput,System.Nullable{System.Int32}@)">
            <summary>Get the output item to produce for an Incubator or Ostrich Incubator.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.MachineOutputDelegate"/>
        </member>
        <member name="M:StardewValley.Object.OutputSeedMaker(StardewValley.Object,StardewValley.Item,System.Boolean,StardewValley.GameData.Machines.MachineItemOutput,System.Nullable{System.Int32}@)">
            <summary>Get the output item to produce for a Seed Maker.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.MachineOutputDelegate"/>
        </member>
        <member name="M:StardewValley.Object.PlaceInMachine(StardewValley.GameData.Machines.MachineData,StardewValley.Item,System.Boolean,StardewValley.Farmer,System.Boolean,System.Boolean)">
            <summary>Place an item in this machine.</summary>
            <param name="machineData">The machine data to apply.</param>
            <param name="inputItem">The item to place in the machine.</param>
            <param name="probe">Whether to return whether the item would be placed successfully without making any changes.</param>
            <param name="who">The player placing an item in the machine.</param>
            <param name="showMessages">Whether to show UI messages for the player.</param>
            <param name="playSounds">Whether to play sounds when the item is placed.</param>
        </member>
        <member name="M:StardewValley.Object.OutputMachine(StardewValley.GameData.Machines.MachineData,StardewValley.GameData.Machines.MachineOutputRule,StardewValley.Item,StardewValley.Farmer,StardewValley.GameLocation,System.Boolean)">
            <summary>Cause the machine to produce output, if applicable.</summary>
            <param name="machine">The machine data to apply.</param>
            <param name="outputRule">The output rule to apply, or <c>null</c> to get a matching rule from the machine data.</param>
            <param name="inputItem">The input item for which to produce an item, if applicable.</param>
            <param name="who">The player for which to start producing output, or <c>null</c> for the main player.</param>
            <param name="location">The location containing the machine.</param>
            <param name="probe">Whether to return whether the machine would produce output without making any changes.</param>
        </member>
        <member name="M:StardewValley.Object.PlayMachineEffect(StardewValley.GameData.Machines.MachineEffects,System.Boolean)">
            <summary>Apply a machine effect, if it's valid and its fields match.</summary>
            <param name="effect">The machine effect to apply.</param>
            <param name="playSounds">Whether to play sounds when the item is placed.</param>
        </member>
        <member name="M:StardewValley.Object.actionOnPlayerEntry">
            <summary>Handle the player entering the location containing the object.</summary>
        </member>
        <member name="M:StardewValley.Object.canBeTrashed">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Object.initializeLightSource(Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>Initialize and register a light source for this instance, if applicable for its data and state.</summary>
            <param name="tileLocation">The object's tile position.</param>
            <param name="mineShaft">Whether the object is in the mines.</param>
        </member>
        <member name="M:StardewValley.Object.GetBoundingBox">
            <summary>Get the pixel area containing the object.</summary>
        </member>
        <member name="M:StardewValley.Object.GetBoundingBoxAt(System.Int32,System.Int32)">
            <summary>Get the pixel area containing the object, adjusted for the given tile position.</summary>
            <param name="x">The tile X position to use instead of the object's current position.</param>
            <param name="y">The tile Y position to use instead of the object's current position.</param>
        </member>
        <member name="M:StardewValley.Object.canBeGivenAsGift">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Object.performDropDownAction(StardewValley.Farmer)">
            <summary>Update the object instance before it's placed in the world.</summary>
            <param name="who">The player placing the item.</param>
            <returns>Returns <c>true</c> if the item should be destroyed, or <c>false</c> if it should be set down.</returns>
            <remarks>This is called on the object instance being placed, after it's already been split from the inventory stack if applicable. At this point the <see cref="P:StardewValley.Object.Location"/> and <see cref="P:StardewValley.Object.TileLocation"/> values should already be set.</remarks>
        </member>
        <member name="M:StardewValley.Object.getCategoryColor">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Object.getCategoryName">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Object.GetCategoryDisplayName(System.Int32)">
            <summary>Get the translated display name for an object category, if any.</summary>
            <param name="category">The object category.</param>
            <returns>Returns the display name, or an empty string if there is none.</returns>
        </member>
        <member name="M:StardewValley.Object.GetCategoryColor(System.Int32)">
            <summary>Get the display color for an object category.</summary>
            <param name="category">The object category.</param>
        </member>
        <member name="M:StardewValley.Object.checkForAction(StardewValley.Farmer,System.Boolean)">
            <summary>Perform an action when the user interacts with this object.</summary>
            <param name="who">The player interacting with the object.</param>
            <param name="justCheckingForActivity">Whether to check if an action would be performed, without actually doing it. Setting this to true may have inconsistent effects depending on the action.</param>
            <returns>Returns true if the action was performed, or false if the player should pick up the item instead.</returns>
        </member>
        <member name="M:StardewValley.Object.CheckForActionOnSewingMachine(StardewValley.Farmer,System.Boolean)">
            <summary>Perform an action when the user interacts with this object, assuming it's a sewing machine.</summary>
            <inheritdoc cref="M:StardewValley.Object.checkForAction(StardewValley.Farmer,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.Object.CheckForActionOnAutoGrabber(StardewValley.Farmer,System.Boolean)">
            <summary>Perform an action when the user interacts with this object, assuming it's an auto-grabber.</summary>
            <inheritdoc cref="M:StardewValley.Object.checkForAction(StardewValley.Farmer,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.Object.CheckForActionOnFarmComputer(StardewValley.Farmer,System.Boolean)">
            <summary>Perform an action when the user interacts with this object, assuming it's a farm computer.</summary>
            <inheritdoc cref="M:StardewValley.Object.checkForAction(StardewValley.Farmer,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.Object.ShowFarmComputerReport(StardewValley.Farmer)">
            <summary>Show a farm computer analysis for a player's current location.</summary>
            <param name="who">The player viewing the farm report.</param>
        </member>
        <member name="M:StardewValley.Object.CheckForActionOnMiniObelisk(StardewValley.Farmer,System.Boolean)">
            <summary>Perform an action when the user interacts with this object, assuming it's a mini-obelisk.</summary>
            <inheritdoc cref="M:StardewValley.Object.checkForAction(StardewValley.Farmer,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.Object.CheckForActionOnPrairieKingArcadeSystem(StardewValley.Farmer,System.Boolean)">
            <summary>Perform an action when the user interacts with this object, assuming it's a Prairie King arcade system.</summary>
            <inheritdoc cref="M:StardewValley.Object.checkForAction(StardewValley.Farmer,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.Object.CheckForActionOnJunimoKartArcadeSystem(StardewValley.Farmer,System.Boolean)">
            <summary>Perform an action when the user interacts with this object, assuming it's a Junimo Kart arcade system.</summary>
            <inheritdoc cref="M:StardewValley.Object.checkForAction(StardewValley.Farmer,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.Object.CheckForActionOnStaircase(StardewValley.Farmer,System.Boolean)">
            <summary>Perform an action when the user interacts with this object, assuming it's a staircase.</summary>
            <inheritdoc cref="M:StardewValley.Object.checkForAction(StardewValley.Farmer,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.Object.CheckForActionOnSlimeBall(StardewValley.Farmer,System.Boolean)">
            <summary>Perform an action when the user interacts with this object, assuming it's a slime ball.</summary>
            <inheritdoc cref="M:StardewValley.Object.checkForAction(StardewValley.Farmer,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.Object.CheckForActionOnHousePlant(StardewValley.Farmer,System.Boolean)">
            <summary>Perform an action when the user interacts with this object, assuming it's a house plant.</summary>
            <inheritdoc cref="M:StardewValley.Object.checkForAction(StardewValley.Farmer,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.Object.CheckForActionOnFluteBlock(StardewValley.Farmer,System.Boolean)">
            <summary>Perform an action when the user interacts with this object, assuming it's a flute block.</summary>
            <inheritdoc cref="M:StardewValley.Object.checkForAction(StardewValley.Farmer,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.Object.CheckForActionOnDrumBlock(StardewValley.Farmer,System.Boolean)">
            <summary>Perform an action when the user interacts with this object, assuming it's a drum block.</summary>
            <inheritdoc cref="M:StardewValley.Object.checkForAction(StardewValley.Farmer,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.Object.CheckForActionOnSprinkler(StardewValley.Farmer,System.Boolean)">
            <summary>Perform an action when the user interacts with this object, assuming it's a sprinkler.</summary>
            <inheritdoc cref="M:StardewValley.Object.checkForAction(StardewValley.Farmer,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.Object.CheckForActionOnScarecrow(StardewValley.Farmer,System.Boolean)">
            <summary>Perform an action when the user interacts with this object, assuming it's a scarecrow.</summary>
            <inheritdoc cref="M:StardewValley.Object.checkForAction(StardewValley.Farmer,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.Object.CheckForActionOnSingingStone(StardewValley.Farmer,System.Boolean)">
            <summary>Perform an action when the user interacts with this object, assuming it's a singing stone.</summary>
            <inheritdoc cref="M:StardewValley.Object.checkForAction(StardewValley.Farmer,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.Object.CheckForActionOnTextSign(StardewValley.Farmer,System.Boolean)">
            <summary>Perform an action when the user interacts with this object, assuming it's a text sign.</summary>
            <inheritdoc cref="M:StardewValley.Object.checkForAction(StardewValley.Farmer,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.Object.CheckForActionOnFeedHopper(StardewValley.Farmer,System.Boolean)">
            <summary>Perform an action when the user interacts with this object, assuming it's a feed hopper.</summary>
            <inheritdoc cref="M:StardewValley.Object.checkForAction(StardewValley.Farmer,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.Object.CheckForActionOnMachine(StardewValley.Farmer,System.Boolean)">
            <summary>Perform an action when the user interacts with this object, assuming it's a machine.</summary>
            <inheritdoc cref="M:StardewValley.Object.checkForAction(StardewValley.Farmer,System.Boolean)"/>
        </member>
        <member name="M:StardewValley.Object.playNearbySoundLocal(System.String,System.Nullable{System.Int32},StardewValley.Audio.SoundContext)">
            <summary>Play a sound for the current player only if they're near this object.</summary>
            <param name="audioName">The sound ID to play.</param>
            <param name="pitch">The pitch modifier to apply, or <c>null</c> to keep it as-is.</param>
            <param name="context">The source which triggered the sound.</param>
        </member>
        <member name="M:StardewValley.Object.playNearbySoundAll(System.String,System.Nullable{System.Int32},StardewValley.Audio.SoundContext)">
            <summary>Play a sound for each nearby online player.</summary>
            <param name="audioName">The sound ID to play.</param>
            <param name="pitch">The pitch modifier to apply, or <c>null</c> to keep it as-is.</param>
            <param name="context">The source which triggered the sound.</param>
        </member>
        <member name="M:StardewValley.Object.AttemptAutoLoad(StardewValley.Farmer)">
            <summary>If there's a chest above this object, try to auto-load the held object from the chest.</summary>
            <param name="who">The player interacting with the machine, if applicable.</param>
            <returns>If a chest is found, this method will acquire a mutex lock so the auto-load may not happen during the same tick. The returned task will complete once the auto-load happens, and contain true (an item was loaded) or false (no item was loaded).</returns>
        </member>
        <member name="M:StardewValley.Object.AttemptAutoLoad(StardewValley.Inventories.IInventory,StardewValley.Farmer)">
            <summary>Try to auto-load the held object from the given inventory.</summary>
            <param name="inventory">The inventory from which to take items.</param>
            <param name="who">The player interacting with the machine, if applicable.</param>
        </member>
        <member name="M:StardewValley.Object.minutesElapsed(System.Int32)">
            <summary>Update the object when the time of day changes.</summary>
            <param name="minutes">The number of minutes that passed.</param>
            <returns>Returns <c>true</c> if the object should be removed, else <c>false</c>.</returns>
        </member>
        <member name="M:StardewValley.Object.TryCreateBuffsFromData(StardewValley.GameData.Objects.ObjectData,System.String,System.String,System.Single,System.Action{StardewValley.Buffs.BuffEffects})">
            <summary>Create buffs matching data from <c>Data/Objects</c>, if valid.</summary>
            <param name="obj">The raw data from <c>Data/Objects</c> to parse.</param>
            <param name="name">The buff source name (usually the <see cref="P:StardewValley.Item.Name"/>).</param>
            <param name="displayName">The translated buff source name (usually the <see cref="P:StardewValley.Item.DisplayName"/>).</param>
            <param name="durationMultiplier">A multiplier to apply to food or drink buff durations. This only applies to food/drink buffs defined directly in <c>Data/Objects</c>, not to buff IDs which reference <c>Data/Buffs</c>.</param>
            <param name="adjustEffects">Adjust the parsed attribute effects before the buff is constructed.</param>
        </member>
        <member name="M:StardewValley.Object.ShouldWobble">
            <summary>Get whether the object scale should pulse currently.</summary>
        </member>
        <member name="M:StardewValley.Object.drawPlacementBounds(Microsoft.Xna.Framework.Graphics.SpriteBatch,StardewValley.GameLocation)">
            <summary>Draw a green or red placement tile for the held item, if applicable.</summary>
            <param name="spriteBatch">The sprite batch being drawn.</param>
            <param name="location">The current location.</param>
        </member>
        <member name="M:StardewValley.Object.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Object.GetOneCopyFrom(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Object.IsBreakableStone">
            <summary>Get whether this is a stone litter item which can be broken by a pickaxe.</summary>
        </member>
        <member name="M:StardewValley.Object.IsTwig">
            <summary>Get whether this is a twig litter item.</summary>
        </member>
        <member name="M:StardewValley.Object.IsWeeds">
            <summary>Get whether this is a weed litter item.</summary>
        </member>
        <member name="M:StardewValley.Object.placementAction(StardewValley.GameLocation,System.Int32,System.Int32,StardewValley.Farmer)">
            <summary>Check whether the object can be added to a location, and (sometimes) add it to the location.</summary>
            <param name="location">The location in which to place it.</param>
            <param name="x">The X tile position at which to place it.</param>
            <param name="y">The Y tile position at which to place it.</param>
            <param name="who">The player placing the object, if applicable.</param>
            <returns>Returns whether the object should be (or was) added to the location.</returns>
            <remarks>For legacy reasons, the behavior of this method is inconsistent. It'll sometimes add the object to the location itself, and sometimes expect the caller to do it.</remarks>
        </member>
        <member name="M:StardewValley.Object.MigrateLegacyItemId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Object.actionWhenPurchased(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Object.sellToStorePrice(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Object.salePrice(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Object.appliesProfitMargins">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Object.ForEachItem(StardewValley.Delegates.ForEachItemDelegate)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Torch.RecalculateBoundingBox">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Torch.MigrateLegacyItemId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Torch.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Torch.actionOnPlayerEntry">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Torch.checkForAction(StardewValley.Farmer,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Torch.placementAction(StardewValley.GameLocation,System.Int32,System.Int32,StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Options.GetFilePathForDefaultOptions">
            <summary>Get the absolute file path for the <c>default_options</c> file.</summary>
        </member>
        <member name="T:StardewValley.Pathfinding.LocationWarpRoute">
            <summary>A possible path through location names that NPCs can take while pathfinding.</summary>
        </member>
        <member name="F:StardewValley.Pathfinding.LocationWarpRoute.LocationNames">
            <summary>The sequential location names that an NPC can pathfind through.</summary>
        </member>
        <member name="F:StardewValley.Pathfinding.LocationWarpRoute.OnlyGender">
            <summary>If set, this route can only be used by NPCs of the given gender.</summary>
        </member>
        <member name="M:StardewValley.Pathfinding.LocationWarpRoute.#ctor(System.String[],System.Nullable{StardewValley.Gender})">
            <summary>Construct an instance.</summary>
            <param name="locationNames">The sequential location names that an NPC can pathfind through.</param>
            <param name="onlyGender">If set, this route can only be used by NPCs of the given gender.</param>
        </member>
        <member name="T:StardewValley.Pathfinding.PathFindController">
            This class finds a path from one point to another using the A* pathfinding algorithm. Then it will guide the given character along that path.
            Can only be used on maps where the tile width and height are each 127 or less. 
            
            
        </member>
        <member name="T:StardewValley.Pathfinding.WarpPathfindingCache">
            <summary>Handles pathfinding between locations.</summary>
        </member>
        <member name="F:StardewValley.Pathfinding.WarpPathfindingCache.Routes">
            <summary>Every possible path through location names that NPCs can take while pathfinding, indexed by the start location.</summary>
            <remarks>For example, <c>"BusStop": [ "BusStop", "Town", "Mountain" ]</c> means that an NPC in the bus stop can warp to town and then to the mountain.</remarks>
        </member>
        <member name="F:StardewValley.Pathfinding.WarpPathfindingCache.IgnoreLocationNames">
            <summary>The location names which NPCs aren't allowed to warp through.</summary>
            <remarks>The farmhand cellars are added automatically.</remarks>
        </member>
        <member name="F:StardewValley.Pathfinding.WarpPathfindingCache.OverrideTargetNames">
            <summary>A map of warp targets to the actual location name NPCs should warp to.</summary>
        </member>
        <member name="F:StardewValley.Pathfinding.WarpPathfindingCache.GenderRestrictions">
            <summary>The locations which can only be accessed by NPCs of one gender.</summary>
        </member>
        <member name="M:StardewValley.Pathfinding.WarpPathfindingCache.PopulateCache">
            <summary>Cache the possible pathfinding routes between game locations.</summary>
        </member>
        <member name="M:StardewValley.Pathfinding.WarpPathfindingCache.GetLocationRoute(System.String,System.String,StardewValley.Gender)">
            <summary>Get a valid pathfinding route between a start and destination location.</summary>
            <param name="startingLocation">The name of the location the NPC is starting from.</param>
            <param name="endingLocation">The name of the destination location.</param>
            <param name="gender">The NPC's gender, used to choose gender-specific routes like the pool locker rooms.</param>
            <returns>If a valid route was found, returns a list of location names to transit through including the start and destination locations. For example, <c>[ "BusStop", "Town", "Mountain" ]</c> means that an NPC in the bus stop can warp to town and then to the mountain. If no valid route was found, returns null.</returns>
        </member>
        <member name="M:StardewValley.Pathfinding.WarpPathfindingCache.ExploreWarpPoints(StardewValley.GameLocation,System.Collections.Generic.List{System.String},System.Nullable{StardewValley.Gender})">
            <summary>Recursively populate the cache based on every location reachable through warps starting from this location.</summary>
            <param name="location">The location to start from.</param>
            <param name="route">The location names explored up to this point for the current route, excluding the <paramref name="location"/>.</param>
            <param name="genderRestriction">The gender restriction for the route up to this point, if any. For example, a route which passes through the men's locker room is restricted to male NPCs.</param>
        </member>
        <member name="M:StardewValley.Pathfinding.WarpPathfindingCache.ExploreWarpPoints(System.String,System.Collections.Generic.List{System.String},System.Nullable{StardewValley.Gender},System.Collections.Generic.HashSet{System.String})">
            <summary>Recursively populate the cache based on every location reachable through warps starting from this location.</summary>
            <param name="locationName">The location name to start from.</param>
            <param name="route">The location names explored up to this point for the current route, excluding the <paramref name="locationName"/>.</param>
            <param name="genderRestriction">The gender restriction for the route up to this point, if any. For example, a route which passes through the men's locker room is restricted to male NPCs.</param>
            <param name="seenTargets">The warp target names which have already been explored from this location.</param>
            <returns>Returns whether any routes were added.</returns>
        </member>
        <member name="M:StardewValley.Pathfinding.WarpPathfindingCache.AddRoute(System.Collections.Generic.List{System.String},System.Nullable{StardewValley.Gender})">
            <summary>Add a route to the <see cref="F:StardewValley.Pathfinding.WarpPathfindingCache.Routes"/> cache.</summary>
            <param name="route">The location names in the route.</param>
            <param name="onlyGender">If set, this route can only be used by NPCs of the given gender.</param>
        </member>
        <member name="T:StardewValley.Preconditions">
            <summary>The low-level handlers for vanilla event preconditions. Most code should use <see cref="M:StardewValley.Event.CheckPrecondition(StardewValley.GameLocation,System.String,System.String)"/> instead.</summary>
        </member>
        <member name="M:StardewValley.Preconditions.SawEvent(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer has seen any of the given events.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.MissingPet(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer hasn't received a pet yet, and (if specified) has this pet preference.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.IsHost(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer is the host.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.HostMail(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The host farmer has this mail.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.NotHostMail(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The host farmer does NOT have this mail.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.WorldState(StardewValley.GameLocation,System.String,System.String[])">
            <summary>This world state ID is active anywhere.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.HostOrLocalMail(StardewValley.GameLocation,System.String,System.String[])">
            <summary>Either the host or current farmer have this mail.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.NotHostOrLocalMail(StardewValley.GameLocation,System.String,System.String[])">
            <summary>Neither the host nor current farmer have this mail.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.EarnedMoney(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer has earned at least this much money, including spent money.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.HasMoney(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer has at least this much money, not including spent money.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.FreeInventorySlots(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer has at least this many free slots in their inventory.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.CommunityCenterOrWarehouseDone(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The community center or Joja warehouse have been completed.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.NotCommunityCenterOrWarehouseDone(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The community center or Joja warehouse have NOT been completed.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.Dating(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer is dating the given NPC.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.DaysPlayed(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The main farmer has played at least this many days.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.JojaBundlesDone(StardewValley.GameLocation,System.String,System.String[])">
            <summary>All Joja bundles has been completed.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.Friendship(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer has at least this many friendship points with all of the given NPCs.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.FestivalDay(StardewValley.GameLocation,System.String,System.String[])">
            <summary>Today is a festival day.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.NotFestivalDay(StardewValley.GameLocation,System.String,System.String[])">
            <summary>Today is NOT a festival day.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.Random(StardewValley.GameLocation,System.String,System.String[])">
            <summary>A random check with the given probability matches.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.Shipped(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer has shipped at least this many of each given item ID.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.SawSecretNote(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer has seen this secret note.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.ChoseDialogueAnswers(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer has selected all of the given dialogue answer IDs.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.LocalMail(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer has received this mail.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.GoldenWalnuts(StardewValley.GameLocation,System.String,System.String[])">
            <summary>All players have found at least this many golden walnuts combined, including spent walnuts.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.NotLocalMail(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer has NOT received this mail.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.InUpgradedHouse(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current location is a farmhouse or cabin, and it has been upgraded to the max level (level 2 or greater).</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.Time(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current time of day is between the given values inclusively.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.Weather(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The weather in the current location's context is <c>rainy</c>, <c>sunny</c>, or the given weather ID.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.DayOfWeek(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current day of week is one of these values (in the form <c>Mon</c>, <c>Tue</c>, etc).</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.NotDayOfWeek(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current day of week is NOT one of these values (in the form <c>Mon</c>, <c>Tue</c>, etc).</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.Spouse(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer is married to or engaged with this NPC.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.NotSpouse(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer is NOT married to or engaged with this NPC.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.Roommate(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer is roommates with any NPC.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.NotRoommate(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer is NOT roommates with any NPC.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.NpcVisible(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The given NPC is present and visible in any location.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.NpcVisibleHere(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The given NPC is present and visible in the current location.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.Season(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current calendar season is one of the given values.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.NotSeason(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current calendar season is NOT one of the given values.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.SpouseBed(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer has a spouse bed in their house.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.ReachedMineBottom(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer has reached the bottom of the mines (i.e. level 120) at least this many times.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.Year(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current year is exactly 1 (if specified 1) or at least the given value (if specified any other value).</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.Gender(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer has this gender.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.HasItem(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer has this item ID in their inventory.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.NotSawEvent(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer has NOT seen this event.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.Tile(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer is standing on one of these tile positions.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.ActiveDialogueEvent(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current player has this active dialogue event.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.NotActiveDialogueEvent(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current player does NOT have this active dialogue event.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.SendMail(StardewValley.GameLocation,System.String,System.String[])">
            <summary>Send the specified mail and end the event. This is a way to send mail without actually starting the event, it's not a regular event precondition.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.DayOfMonth(StardewValley.GameLocation,System.String,System.String[])">
            <summary>Today is one of the given days of month.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.UpcomingFestival(StardewValley.GameLocation,System.String,System.String[])">
            <summary>A festival day will occur within the given number of days.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.NotUpcomingFestival(StardewValley.GameLocation,System.String,System.String[])">
            <summary>There is no festival planned within the given number of days.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.GameStateQuery(StardewValley.GameLocation,System.String,System.String[])">
            <summary>A game state query matches.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Preconditions.Skill(StardewValley.GameLocation,System.String,System.String[])">
            <summary>The current farmer has a minimum skill level.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.EventPreconditionDelegate" />
        </member>
        <member name="M:StardewValley.Program.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="M:StardewValley.Program.GetLocalAppDataFolder(System.String,System.Boolean)">
            <summary>Get the absolute path to the folder containing local app data (like error logs and screenshots), creating it if needed.</summary>
            <param name="subfolder">The name of the subfolder to append to the path, if any.</param>
            <param name="createIfMissing">Whether to create the folder if it doesn't exist already.</param>
        </member>
        <member name="M:StardewValley.Program.GetAppDataFolder(System.String,System.Boolean)">
            <summary>Get the absolute path to the folder containing global app data (like saves), creating it if needed.</summary>
            <param name="subfolder">The name of the subfolder to append to the path, if any.</param>
            <param name="createIfMissing">Whether to create the folder if it doesn't exist already.</param>
        </member>
        <member name="M:StardewValley.Program.GetDebugLogPath">
            <summary>Get the absolute path to the debug log file.</summary>
        </member>
        <member name="M:StardewValley.Program.GetSavesFolder">
            <summary>Get the absolute path to the folder containing save folders, creating it if needed.</summary>
        </member>
        <member name="F:StardewValley.Projectiles.BasicProjectile.damageToFarmer">
            <summary>The amount of damage caused when this projectile hits a monster or player.</summary>
        </member>
        <member name="F:StardewValley.Projectiles.BasicProjectile.collisionSound">
            <summary>The sound played when the projectile collides with something.</summary>
        </member>
        <member name="F:StardewValley.Projectiles.BasicProjectile.explode">
            <summary>Whether the projectile explodes when it collides with something.</summary>
        </member>
        <member name="F:StardewValley.Projectiles.BasicProjectile.collisionBehavior">
            <summary>A callback to invoke after the projectile collides with a player, monster, or wall.</summary>
        </member>
        <member name="F:StardewValley.Projectiles.BasicProjectile.debuff">
            <summary>The buff ID to apply to players hit by this projectile, if any.</summary>
        </member>
        <member name="F:StardewValley.Projectiles.BasicProjectile.debuffSound">
            <summary>The sound to play when <see cref="F:StardewValley.Projectiles.BasicProjectile.debuff"/> is applied to a player.</summary>
        </member>
        <member name="M:StardewValley.Projectiles.BasicProjectile.#ctor">
            <summary>Construct an empty instance.</summary>
        </member>
        <member name="M:StardewValley.Projectiles.BasicProjectile.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Vector2,System.String,System.String,System.String,System.Boolean,System.Boolean,StardewValley.GameLocation,StardewValley.Character,StardewValley.Projectiles.BasicProjectile.onCollisionBehavior,System.String)">
            <summary>Construct an instance.</summary>
            <param name="damageToFarmer">The amount of damage caused when this projectile hits a monster or player.</param>
            <param name="spriteIndex">The index of the sprite to draw in <see cref="F:StardewValley.Projectiles.Projectile.projectileSheetName"/>. Ignored if <paramref name="shotItemId"/> is set.</param>
            <param name="bouncesTillDestruct">The number of times the projectile can bounce off walls before being destroyed.</param>
            <param name="tailLength">The length of the tail which trails behind the main projectile.</param>
            <param name="rotationVelocity">The rotation velocity.</param>
            <param name="xVelocity">The speed at which the projectile moves along the X axis.</param>
            <param name="yVelocity">The speed at which the projectile moves along the Y axis.</param>
            <param name="startingPosition">The pixel world position at which the projectile will start moving.</param>
            <param name="collisionSound">The sound played when the projectile collides with something.</param>
            <param name="bounceSound">The sound played when the projectile bounces off a wall.</param>
            <param name="firingSound">The sound played when the projectile is fired.</param>
            <param name="explode">Whether the projectile explodes when it collides with something.</param>
            <param name="damagesMonsters">Whether the projectile damage monsters (true) or players (false).</param>
            <param name="location">The location containing the projectile.</param>
            <param name="firer">The character who fired the projectile.</param>
            <param name="collisionBehavior">A callback to invoke after the projectile collides with a player, monster, or wall.</param>
            <param name="shotItemId">The qualified or unqualified item ID to shoot. If set, this overrides <paramref name="spriteIndex"/>.</param>
        </member>
        <member name="M:StardewValley.Projectiles.BasicProjectile.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>Construct an instance preconfigured for a spell cast by a monster.</summary>
            <param name="damageToFarmer">The amount of damage caused when this projectile hits a monster or player.</param>
            <param name="spriteIndex">The index of the sprite to draw in <see cref="F:StardewValley.Projectiles.Projectile.projectileSheetName"/>.</param>
            <param name="bouncesTillDestruct">The number of times the projectile can bounce off walls before being destroyed.</param>
            <param name="tailLength">The length of the tail which trails behind the main projectile.</param>
            <param name="rotationVelocity">The rotation velocity.</param>
            <param name="xVelocity">The speed at which the projectile moves along the X axis.</param>
            <param name="yVelocity">The speed at which the projectile moves along the Y axis.</param>
            <param name="startingPosition">The pixel world position at which the projectile will start moving.</param>
        </member>
        <member name="M:StardewValley.Projectiles.BasicProjectile.InitNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Projectiles.BasicProjectile.GetPlayerWhoFiredMe(StardewValley.GameLocation)">
            <summary>Get the player who fired this projectile.</summary>
            <param name="location">The location containing the player.</param>
        </member>
        <member name="F:StardewValley.Projectiles.DebuffingProjectile.debuff">
            <summary>The buff ID to apply to players hit by this projectile.</summary>
        </member>
        <member name="M:StardewValley.Projectiles.DebuffingProjectile.#ctor">
            <summary>Construct an empty instance.</summary>
        </member>
        <member name="M:StardewValley.Projectiles.DebuffingProjectile.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Vector2,StardewValley.GameLocation,StardewValley.Character,System.Boolean,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="debuff">The debuff ID to apply to players hit by this projectile.</param>
            <param name="spriteIndex">The index of the sprite to draw in <see cref="F:StardewValley.Projectiles.Projectile.projectileSheetName"/>.</param>
            <param name="bouncesTillDestruct">The number of times the projectile can bounce off walls before being destroyed.</param>
            <param name="tailLength">The length of the tail which trails behind the main projectile.</param>
            <param name="rotationVelocity">The rotation velocity.</param>
            <param name="xVelocity">The speed at which the projectile moves along the X axis.</param>
            <param name="yVelocity">The speed at which the projectile moves along the Y axis.</param>
            <param name="startingPosition">The pixel world position at which the projectile will start moving.</param>
            <param name="location">The location containing the projectile.</param>
            <param name="owner">The character who fired the projectile.</param>
        </member>
        <member name="M:StardewValley.Projectiles.DebuffingProjectile.InitNetFields">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Projectiles.Projectile.currentTileSheetIndex">
            <summary>The index of the sprite to draw in <see cref="F:StardewValley.Projectiles.Projectile.projectileSheetName"/>. Ignored if <see cref="F:StardewValley.Projectiles.Projectile.itemId"/> is set.</summary>
        </member>
        <member name="F:StardewValley.Projectiles.Projectile.itemId">
            <summary>The qualified item ID for the item to draw. If set, this overrides <see cref="F:StardewValley.Projectiles.Projectile.currentTileSheetIndex"/>.</summary>
        </member>
        <member name="F:StardewValley.Projectiles.Projectile.position">
            <summary>The projectile's pixel position in the world.</summary>
        </member>
        <member name="F:StardewValley.Projectiles.Projectile.tailLength">
            <summary>The length of the tail which trails behind the main projectile.</summary>
        </member>
        <member name="F:StardewValley.Projectiles.Projectile.bounceSound">
            <summary>The sound to play when the projectile bounces off a wall.</summary>
        </member>
        <member name="F:StardewValley.Projectiles.Projectile.bouncesLeft">
            <summary>The number of times the projectile can bounce off walls before being destroyed.</summary>
        </member>
        <member name="F:StardewValley.Projectiles.Projectile.piercesLeft">
            <summary>The number of times the projectile can pierce through an enemy before being destroyed.</summary>
        </member>
        <member name="F:StardewValley.Projectiles.Projectile.rotationVelocity">
            <summary>The rotation velocity.</summary>
        </member>
        <member name="F:StardewValley.Projectiles.Projectile.xVelocity">
            <summary>The speed at which the projectile moves along the X axis.</summary>
        </member>
        <member name="F:StardewValley.Projectiles.Projectile.yVelocity">
            <summary>The speed at which the projectile moves along the Y axis.</summary>
        </member>
        <member name="F:StardewValley.Projectiles.Projectile.damagesMonsters">
            <summary>Whether the projectile damage monsters (true) or players (false).</summary>
        </member>
        <member name="P:StardewValley.Projectiles.Projectile.modData">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Projectiles.Projectile.modDataForSerialization">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Projectiles.Projectile.#ctor">
            <summary>Construct an empty instance.</summary>
        </member>
        <member name="M:StardewValley.Projectiles.Projectile.InitNetFields">
            <summary>Initialize the collection of fields to sync in multiplayer.</summary>
        </member>
        <member name="M:StardewValley.Projectiles.Projectile.behaviorOnCollision(StardewValley.GameLocation,StardewValley.Character,StardewValley.TerrainFeatures.TerrainFeature)">
            <summary>Handle the projectile hitting an obstacle.</summary>
            <param name="location">The location containing the projectile.</param>
            <param name="target">The target player or monster that was hit, if applicable.</param>
            <param name="terrainFeature">The terrain feature that was hit, if applicable.</param>
        </member>
        <member name="M:StardewValley.Projectiles.Projectile.ShouldApplyCollisionLocally(StardewValley.GameLocation)">
            <summary>Get whether this projectile's <see cref="M:StardewValley.Projectiles.Projectile.behaviorOnCollision(StardewValley.GameLocation,StardewValley.Character,StardewValley.TerrainFeatures.TerrainFeature)" /> should be called for the local player.</summary>
            <param name="location">The location containing the projectile.</param>
        </member>
        <member name="M:StardewValley.Projectiles.Projectile.isColliding(StardewValley.GameLocation,StardewValley.Character@,StardewValley.TerrainFeatures.TerrainFeature@)">
            <summary>Get whether the projectile is colliding with a wall or target.</summary>
            <param name="location">The location containing the projectile.</param>
            <param name="target">The target that was hit, if applicable.</param>
            <param name="terrainFeature">The terrain feature that was hit, if applicable.</param>
        </member>
        <member name="M:StardewValley.Projectiles.Projectile.GetTexture">
            <summary>Get the texture to draw for the projectile.</summary>
        </member>
        <member name="M:StardewValley.Projectiles.Projectile.GetSourceRect">
            <summary>Get the source rectangle to draw for the projectile.</summary>
        </member>
        <member name="P:StardewValley.PurchaseableKeyItem.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.PurchaseableKeyItem.QualifiedItemId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.PurchaseableKeyItem.GetItemTypeId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.PurchaseableKeyItem.sellToStorePrice(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.PurchaseableKeyItem.salePrice(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.PurchaseableKeyItem.appliesProfitMargins">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.PurchaseableKeyItem.actionWhenPurchased(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.PurchaseableKeyItem.FixStackSize">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.PurchaseableKeyItem.FixQuality">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Quests.CraftingQuest.obsolete_isBigCraftable">
            <summary>Obsolete. This is only kept to preserve data from old save files, and isn't synced in multiplayer. Use <see cref="F:StardewValley.Quests.CraftingQuest.ItemId"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Quests.CraftingQuest.ItemId">
            <summary>The qualified item ID to craft.</summary>
        </member>
        <member name="M:StardewValley.Quests.CraftingQuest.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewValley.Quests.CraftingQuest.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="itemId">The qualified or unqualified item ID to craft.</param>
        </member>
        <member name="F:StardewValley.Quests.DescriptionElement.translationKey">
            <summary>The translation key for the text to render.</summary>
        </member>
        <member name="F:StardewValley.Quests.DescriptionElement.substitutions">
            <summary>The values to substitute for placeholders like <c>{0}</c> in the translation text.</summary>
        </member>
        <member name="M:StardewValley.Quests.DescriptionElement.#ctor">
            <summary>Construct an instance for an empty text.</summary>
        </member>
        <member name="M:StardewValley.Quests.DescriptionElement.#ctor(System.String,System.Object[])">
            <summary>Construct an instance.</summary>
            <param name="key">The translation key for the text to render.</param>
            <param name="substitutions">The values to substitute for placeholders like <c>{0}</c> in the translation text.</param>
        </member>
        <member name="F:StardewValley.Quests.FishingQuest.target">
            <summary>The internal name for the NPC who gave the quest.</summary>
        </member>
        <member name="F:StardewValley.Quests.FishingQuest.targetMessage">
            <summary>The translated text for the NPC dialogue shown when the quest is completed.</summary>
        </member>
        <member name="F:StardewValley.Quests.FishingQuest.numberToFish">
            <summary>The number of fish which must be caught.</summary>
        </member>
        <member name="F:StardewValley.Quests.FishingQuest.reward">
            <summary>The gold reward for finishing the quest.</summary>
        </member>
        <member name="F:StardewValley.Quests.FishingQuest.numberFished">
            <summary>The number of fish caught so far.</summary>
        </member>
        <member name="F:StardewValley.Quests.FishingQuest.ItemId">
            <summary>The qualified item ID for the fish to catch.</summary>
        </member>
        <member name="F:StardewValley.Quests.FishingQuest.parts">
            <summary>The translatable text segments for the quest description in the quest log.</summary>
        </member>
        <member name="F:StardewValley.Quests.FishingQuest.dialogueparts">
            <summary>The translatable text segments for the NPC dialogue shown when the quest is completed.</summary>
        </member>
        <member name="F:StardewValley.Quests.FishingQuest.objective">
            <summary>The translatable text segments for the objective shown in the quest log (like "0/5 caught").</summary>
        </member>
        <member name="M:StardewValley.Quests.FishingQuest.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewValley.Quests.FishingQuest.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>Construct an instance.</summary>
            <param name="itemId">The qualified item ID for the fish to catch.</param>
            <param name="numberToFish">The number of fish which must be caught.</param>
            <param name="target">The internal name for the NPC who gave the quest.</param>
            <param name="returnDialogue">The translated text for the NPC dialogue shown when the quest is completed.</param>
        </member>
        <member name="M:StardewValley.Quests.FishingQuest.GetGoldRewardPerItem(StardewValley.Item)">
            <summary>Get the gold reward for a given item.</summary>
            <param name="item">The item instance.</param>
        </member>
        <member name="F:StardewValley.Quests.ItemDeliveryQuest.targetMessage">
            <summary>The translated NPC dialogue shown when the quest is completed.</summary>
        </member>
        <member name="F:StardewValley.Quests.ItemDeliveryQuest.target">
            <summary>The internal name for the NPC who gave the quest.</summary>
        </member>
        <member name="F:StardewValley.Quests.ItemDeliveryQuest.ItemId">
            <summary>The qualified item ID that must be delivered.</summary>
        </member>
        <member name="F:StardewValley.Quests.ItemDeliveryQuest.number">
            <summary>The number of items that must be delivered.</summary>
        </member>
        <member name="F:StardewValley.Quests.ItemDeliveryQuest.parts">
            <summary>The translatable text segments for the quest description shown in the quest log.</summary>
        </member>
        <member name="F:StardewValley.Quests.ItemDeliveryQuest.dialogueparts">
            <summary>The translatable text segments for the <see cref="F:StardewValley.Quests.ItemDeliveryQuest.targetMessage"/>.</summary>
        </member>
        <member name="F:StardewValley.Quests.ItemDeliveryQuest.objective">
            <summary>The translatable text segments for the objective shown in the quest log (like "0/5 caught").</summary>
        </member>
        <member name="M:StardewValley.Quests.ItemDeliveryQuest.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewValley.Quests.ItemDeliveryQuest.#ctor(System.String,System.String)">
            <summary>Construct an instance.</summary>
            <param name="target">The internal name for the NPC who gave the quest.</param>
            <param name="itemId">The qualified or unqualified item ID that must be delivered.</param>
        </member>
        <member name="M:StardewValley.Quests.ItemDeliveryQuest.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Construct an instance.</summary>
            <param name="target">The internal name for the NPC who gave the quest.</param>
            <param name="itemId">The qualified or unqualified item ID that must be delivered.</param>
            <param name="objective">The translatable text segments for the objective shown in the quest log (like "0/5 caught").</param>
            <param name="returnDialogue">The translated NPC dialogue shown when the quest is completed.</param>
        </member>
        <member name="M:StardewValley.Quests.ItemDeliveryQuest.GetGoldRewardPerItem(StardewValley.Item)">
            <summary>Get the gold reward for a given item.</summary>
            <param name="item">The item instance.</param>
        </member>
        <member name="F:StardewValley.Quests.ItemHarvestQuest.ItemId">
            <summary>The qualified item ID to harvest.</summary>
        </member>
        <member name="F:StardewValley.Quests.ItemHarvestQuest.Number">
            <summary>The number of items that must be harvested.</summary>
        </member>
        <member name="M:StardewValley.Quests.ItemHarvestQuest.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewValley.Quests.ItemHarvestQuest.#ctor(System.String,System.Int32)">
            <summary>Construct an instance.</summary>
            <param name="itemId">The qualified or unqualified item ID to harvest.</param>
            <param name="number">The number of items that must be harvested.</param>
        </member>
        <member name="F:StardewValley.Quests.LostItemQuest.npcName">
            <summary>The internal name for the NPC who gave the quest.</summary>
        </member>
        <member name="F:StardewValley.Quests.LostItemQuest.locationOfItem">
            <summary>The internal name for the location where the item can be found.</summary>
        </member>
        <member name="F:StardewValley.Quests.LostItemQuest.ItemId">
            <summary>The qualified item ID for the item to find.</summary>
        </member>
        <member name="F:StardewValley.Quests.LostItemQuest.tileX">
            <summary>The X tile position within the location where the item can be found.</summary>
        </member>
        <member name="F:StardewValley.Quests.LostItemQuest.tileY">
            <summary>The Y tile position within the location where the item can be found.</summary>
        </member>
        <member name="F:StardewValley.Quests.LostItemQuest.itemFound">
            <summary>Whether the player has found the item yet.</summary>
        </member>
        <member name="F:StardewValley.Quests.LostItemQuest.objective">
            <summary>The translatable text segments for the objective shown in the quest log.</summary>
        </member>
        <member name="M:StardewValley.Quests.LostItemQuest.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewValley.Quests.LostItemQuest.#ctor(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>Construct an instance.</summary>
            <param name="npcName">The internal name for the NPC who gave the quest.</param>
            <param name="locationOfItem">The internal name for the location where the item can be found.</param>
            <param name="itemId">The qualified or unqualified item ID for the item to find.</param>
            <param name="tileX">The X tile position within the location where the item can be found.</param>
            <param name="tileY">The Y tile position within the location where the item can be found.</param>
            <exception cref="T:System.InvalidOperationException">The <paramref name="itemId"/> matches a non-object-type item, which can't be placed in the world.</exception>
        </member>
        <member name="P:StardewValley.Quests.Quest.modData">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Quests.Quest.modDataForSerialization">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Quests.Quest.HasId">
            <summary>Get whether the <see cref="F:StardewValley.Quests.Quest.id"/> is set to a valid value.</summary>
        </member>
        <member name="M:StardewValley.Quests.Quest.IsValidId(System.String)">
            <summary>Get whether the given quest ID is valid.</summary>
            <param name="id">The quest ID to check.</param>
        </member>
        <member name="M:StardewValley.Quests.Quest.TryParseConditions(System.String[],System.String[]@,System.String@,System.Boolean)">
            <summary>Get the split quest conditions from raw quest fields, if it's found and valid.</summary>
            <param name="questFields">The raw quest fields.</param>
            <param name="conditions">The parsed conditions.</param>
            <param name="error">The error message indicating why parsing failed.</param>
            <param name="allowBlank">Whether to match the argument even if it's null or whitespace. If false, it will be treated as invalid in that case.</param>
            <returns>Returns whether the conditions field was found and valid.</returns>
        </member>
        <member name="M:StardewValley.Quests.Quest.LogParseError(System.String,System.String)">
            <summary>Log an error message indicating that the quest data couldn't be parsed.</summary>
            <param name="id">The quest ID being parsed.</param>
            <param name="error">The error message indicating why parsing failed.</param>
            <returns>Returns a null quest for convenience.</returns>
        </member>
        <member name="M:StardewValley.Quests.Quest.LogConditionsParseError(System.String,System.String)">
            <summary>Log an error message indicating that the conditions field in the quest data couldn't be parsed.</summary>
            <param name="id">The quest ID being parsed.</param>
            <param name="error">The error message indicating why parsing failed.</param>
            <returns>Returns a null quest for convenience.</returns>
        </member>
        <member name="F:StardewValley.Quests.ResourceCollectionQuest.target">
            <summary>The internal name for the NPC who gave the quest.</summary>
        </member>
        <member name="F:StardewValley.Quests.ResourceCollectionQuest.targetMessage">
            <summary>The translated NPC dialogue shown when the quest is completed.</summary>
        </member>
        <member name="F:StardewValley.Quests.ResourceCollectionQuest.numberCollected">
            <summary>The number of items collected so far.</summary>
        </member>
        <member name="F:StardewValley.Quests.ResourceCollectionQuest.number">
            <summary>The number of items which must be collected.</summary>
        </member>
        <member name="F:StardewValley.Quests.ResourceCollectionQuest.reward">
            <summary>The gold reward for finishing the quest.</summary>
        </member>
        <member name="F:StardewValley.Quests.ResourceCollectionQuest.ItemId">
            <summary>The qualified item ID that must be collected.</summary>
        </member>
        <member name="F:StardewValley.Quests.ResourceCollectionQuest.parts">
            <summary>The translatable text segments for the quest description shown in the quest log.</summary>
        </member>
        <member name="F:StardewValley.Quests.ResourceCollectionQuest.dialogueparts">
            <summary>The translatable text segments for the <see cref="F:StardewValley.Quests.ResourceCollectionQuest.targetMessage"/>.</summary>
        </member>
        <member name="F:StardewValley.Quests.ResourceCollectionQuest.objective">
            <summary>The translatable text segments for the objective shown in the quest log (like "0/5 caught").</summary>
        </member>
        <member name="M:StardewValley.Quests.ResourceCollectionQuest.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="F:StardewValley.Quests.SecretLostItemQuest.npcName">
            <summary>The internal name for the NPC who gave the quest.</summary>
        </member>
        <member name="F:StardewValley.Quests.SecretLostItemQuest.friendshipReward">
            <summary>The friendship point reward for completing the quest.</summary>
        </member>
        <member name="F:StardewValley.Quests.SecretLostItemQuest.exclusiveQuestId">
            <summary>If set, the ID for another quest to remove when this quest is completed.</summary>
        </member>
        <member name="F:StardewValley.Quests.SecretLostItemQuest.ItemId">
            <summary>The qualified item ID that must be collected.</summary>
        </member>
        <member name="F:StardewValley.Quests.SecretLostItemQuest.itemFound">
            <summary>Whether the player has found the lost item.</summary>
        </member>
        <member name="M:StardewValley.Quests.SecretLostItemQuest.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewValley.Quests.SecretLostItemQuest.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>Construct an instance.</summary>
            <param name="npcName">The internal name for the NPC who gave the quest.</param>
            <param name="itemId">The qualified or unqualified item ID that must be collected.</param>
            <param name="friendshipReward">The friendship point reward for completing the quest.</param>
            <param name="exclusiveQuestId">If set, the ID for another quest to remove when this quest is completed.</param>
        </member>
        <member name="F:StardewValley.SaveGame.obsolete_mailbox">
            <summary>Obsolete. This is only kept to preserve data from old save files.</summary>
        </member>
        <member name="F:StardewValley.SaveGame.obsolete_stats">
            <summary>Obsolete. This is only kept to preserve data from old save files.</summary>
        </member>
        <member name="F:StardewValley.SaveGame.junimoChest">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="F:StardewValley.SaveGame.globalInventories"/> instead.</summary>
        </member>
        <member name="F:StardewValley.SaveGame.globalInventories">
            <inheritdoc cref="F:StardewValley.FarmerTeam.globalInventories"/>
        </member>
        <member name="M:StardewValley.SaveGame.HasSaveFix(StardewValley.SaveMigrations.SaveFixes)">
            <summary>Get whether a fix was applied to the loaded data before it was last saved.</summary>
            <param name="fix">The save fix to check.</param>
        </member>
        <member name="M:StardewValley.SaveGame.MigrateVillagersByFormerName">
            <summary>Migrate villager NPCs based on their <see cref="F:StardewValley.GameData.Characters.CharacterData.FormerCharacterNames"/> field.</summary>
        </member>
        <member name="M:StardewValley.SaveGame.GetFormerLocationNames">
            <summary>Get a lookup of former → new location names based on their <see cref="F:StardewValley.GameData.Locations.LocationData.FormerLocationNames"/> field.</summary>
        </member>
        <member name="M:StardewValley.SaveGame.GetFormerNpcNames(System.Func{System.String,StardewValley.GameData.Characters.CharacterData,System.Boolean})">
            <summary>Get a lookup of former → new NPC names based on their <see cref="F:StardewValley.GameData.Characters.CharacterData.FormerCharacterNames"/> field.</summary>
            <param name="filter">A filter to apply to the list of NPCs with former names.</param>
        </member>
        <member name="T:StardewValley.SaveMigrations.ISaveMigrator">
            <summary>Migrates existing save files for compatibility with a newer game version.</summary>
        </member>
        <member name="P:StardewValley.SaveMigrations.ISaveMigrator.GameVersion">
            <summary>The game version to which the migration applies.</summary>
        </member>
        <member name="M:StardewValley.SaveMigrations.ISaveMigrator.ApplySaveFix(StardewValley.SaveMigrations.SaveFixes)">
            <summary>Apply a migration to the currently loaded save file.</summary>
            <param name="saveFix">The save migration to apply.</param>
            <returns>Returns whether the migration was applied.</returns>
        </member>
        <member name="T:StardewValley.SaveMigrations.SaveFixes">
            <summary>The sequential save migration IDs that can be applied to a save.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.NONE">
            <summary>Do nothing.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.StoredBigCraftablesStackFix">
            <summary>For Stardew Valley 1.4, fix pre-1.4 big craftables that are already stored in chests potentially having a stack count of 0 (due to maximumStackSize being set to -1 which was then Math.Max-ed to 0).</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.PorchedCabinBushesFix">
            <summary>For Stardew Valley 1.4, remove bushes underneath cabins (this was a problem in the wilderness farm).</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.ChangeObeliskFootprintHeight">
            <summary>For Stardew Valley 1.4, update Obelisk buildings' size from 3x3 tiles to 3x2.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.CreateStorageDressers">
            <summary>For Stardew Valley 1.4, convert dressers to StorageFurniture and fix the category for clothing items.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.InferPreserves">
            <summary>For Stardew Valley 1.4, fix pre-1.2 preserves items not knowing what item they were created with, causing them to change their names incorrectly.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.TransferHatSkipHairFlag">
            <summary>For Stardew Valley 1.4, reload data for hats from the data sheet.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.RevealSecretNoteItemTastes">
            <summary>For Stardew Valley 1.4, reveal any gift preferences that would've been revealed via secret notes.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.TransferHoneyTypeToPreserves">
            <summary>For Stardew Valley 1.4, transfer the "honeyType" value to "preservedParentSheetIndex" so that honey can be spawned from any flower.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.TransferNoteBlockScale">
            <summary>For Stardew Valley 1.4, transfer the note block pitch/sound effect from "scale.X" (which isn't synchronized in multiplayer) to preservedParentSheetIndex (which is synchronized and otherwise unused).</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.FixCropHarvestAmountsAndInferSeedIndex">
            <summary>For Stardew Valley 1.4, update pre-1.4 crops to avoid yielding extra produce due to a fix in the crop yield calculation. This also infers the seed index, since the netSeedIndex value wasn't previously serialized to the save data.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.quarryMineBushes">
            <summary>For Stardew Valley 1.4, add the bushes near the quarry mine entrance.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MissingQisChallenge">
            <summary>For Stardew Valley 1.4.4, add the Qi's Challenge quest for players who accidentally dismissed the letter without starting the quest, causing Secret Note 10 to be unobtainable.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.BedsToFurniture">
            <summary>For Stardew Valley 1.5, convert player bed map tiles into furniture.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.ChildBedsToFurniture">
            <summary>For Stardew Valley 1.5, convert child bed map tiles into furniture.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.ModularizeFarmStructures">
            <summary>For Stardew Valley 1.5, convert the shipping bin into a building.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.FixFlooringFlags">
            <summary>For Stardew Valley 1.5, recalculate flooring attributes (like isSteppingStone) that weren't properly serialized/deserialized due to being private.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.FixStableOwnership">
            <summary>For Stardew Valley 1.5, fix stable owner values.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.AddTownBush">
            <summary>For Stardew Valley 1.5, add the bush where the bulletin board appears.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.ResetForges">
            <summary>For Stardew Valley 1.5, reset all weapon stats to reflect any changes in buffs.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MakeDarkSwordVampiric">
            <summary>For Stardew Valley 1.5, add the Vampiric enchantment to the Vampiric Sword.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.FixBeachFarmBushes">
            <summary>For Stardew Valley 1.5, fix beach farm bushes in the spouse area for beta players.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.OstrichIncubatorFragility">
            <summary>For Stardew Valley 1.5, fix beta Ostrich Incubators being marked as indestructible.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.LeoChildrenFix">
            <summary>For Stardew Valley 1.5, rename any kids named Leo.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.Leo6HeartGermanFix">
            <summary>For Stardew Valley 1.5.2, fix an issue where a previous typo in the German localization prevented Leo from moving to the mainland after the 6-Heart event. This automatically adds the mail if any player has seen the event but the host doesn't have the mail.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.BirdieQuestRemovedFix">
            <summary>For Stardew Valley 1.5.2, fix Birdie's quest being cancelable and re-add it if needed.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.SkippedSummit">
            <summary>For Stardew Valley 1.5.2, if the farm is eternal, iterate through all players who are flagged as having seen the Summit event and remove the mail from anyone who hasn't heard the ending song. This will cause anyone who's playing the game with music muted to be able to re-visit the event (as well as anyone who skipped the event), but will at least ensure they get the song in their jukebox.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MigrateBuildingsToData">
            <summary>For Stardew Valley 1.6, convert existing buildings to data.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.ModularizeFarmhouse">
            <summary>For Stardew Valley 1.6, change the farmhouse into a building.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.ModularizePets">
            <summary>For Stardew Valley 1.6, migrate pets to the new data and change the pet bowl into a building.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.AddNpcRemovalFlags">
            <summary>For Stardew Valley 1.6, add mail flags for NPCs that are removed conditionally via <c>Data/Characters</c>.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MigrateFarmhands">
            <summary>For Stardew Valley 1.6, remove farmhands from cabins.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MigrateLitterItemData">
            <summary>For Stardew Valley 1.6, apply the new litter item category/type.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MigrateHoneyItems">
            <summary>For Stardew Valley 1.6, add honey preserve info and fix pre-1.4 data to remove hacks in the Object display name logic.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MigrateMachineLastOutputRule">
            <summary>For Stardew Valley 1.6, pre-populate <see cref="F:StardewValley.Object.lastInputItem"/> and <see cref="F:StardewValley.Object.lastOutputRuleId"/> for machines so they keep the recalculate-on-collect behavior from 1.5.6.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.StandardizeBundleFields">
            <summary>For Stardew Valley 1.6, standardize the number of fields in <see cref="F:StardewValley.SaveGame.bundleData"/>.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MigrateAdventurerGoalFlags">
            <summary>For Stardew Valley 1.6, migrate mail flags used to track Adventurer's Guild monster slayer goals.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.SetCropSeedId">
            <summary>For Stardew Valley 1.6, set the <see cref="F:StardewValley.Crop.netSeedIndex"/> value for crops created before Stardew Valley 1.4.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.FixMineBoulderCollisions">
            <summary>For Stardew Valley 1.6, set the tile position for the mine boulder to fix collisions.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MigratePetAndPetBowlIds">
            <summary>For Stardew Valley 1.6, assign the main player's pet to the new Pet Bowl building.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MigrateHousePaint">
            <summary>For Stardew Valley 1.6, migrate house paint from <see cref="F:StardewValley.Farm.housePaintColor"/> to the new building.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MigrateShedFloorWallIds">
            <summary>For Stardew Valley 1.6, update sheds for the new floor/wall IDs.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MigrateItemIds">
            <summary>For Stardew Valley 1.6, update all items for the new item IDs.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.RemoveMeatFromAnimalBundle">
            <summary>For Stardew Valley 1.6, remove the unimplemented meat items from the animal bundle. (Invalid items would previously be silently hidden, but they now appear as Error Items instead.)</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MigrateStatFields">
            <summary>For Stardew Valley 1.6, move the legacy stat fields like <see cref="F:StardewValley.Stats.obsolete_averageBedtime"/> into <see cref="F:StardewValley.Stats.Values"/>.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.RemoveMasteryRoomFoliage">
            <summary>For Stardew Valley 1.6, remove some bushes in front of the mastery room.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.AddTownTrees">
            <summary>For Stardew Valley 1.6, convert town static map trees into real trees.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MapAdjustments_1_6">
            <summary>For Stardew Valley 1.6, update coordinates for new bus stop, and do lost and found work for buildings layer changes</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MigrateWalletItems">
            <summary>For Stardew Valley 1.6, move the legacy wallet item fields like <see cref="F:StardewValley.Farmer.obsolete_hasRustyKey"/> into <see cref="F:StardewValley.Farmer.mailReceived"/>.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MigrateResourceClumps">
            <summary>For Stardew Valley 1.6, move <see cref="F:StardewValley.Locations.Forest.obsolete_log"/> and <see cref="T:StardewValley.Locations.Woods"/>' <c>stumps</c> into <see cref="F:StardewValley.GameLocation.resourceClumps"/>.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MigrateFishingRodAttachmentSlots">
            <summary>For Stardew Valley 1.6, correct <see cref="P:StardewValley.Tool.AttachmentSlotsCount"/> for pre-existing fishing rods. Previously they'd always be constructed with two slots, and then the fishing rod wouldn't use them if they didn't apply. In 1.6, attachment slot are a generic tool feature so the count needs to be correct.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MoveSlimeHutches">
            <summary> slime hutches are smaller now, so move them +2, +2 so that they are still "centered" in the spots people ahve placed them </summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.AddLocationsVisited">
            <summary>For Stardew Valley 1.6, retroactively populate the <see cref="F:StardewValley.Farmer.locationsVisited"/> field.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MarkStarterGiftBoxes">
            <summary>For Stardew Valley 1.6, set <see cref="F:StardewValley.Objects.Chest.giftboxIsStarterGift"/> for an current farmhouse gift boxes.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MigrateMailEventsToTriggerActions">
            <summary>For Stardew Valley 1.6, migrate the former send-mail events in <see cref="F:StardewValley.Farmer.eventsSeen"/> to <see cref="F:StardewValley.Farmer.triggerActionsRun"/>.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.ShiftFarmHouseFurnitureForExpansion">
            <summary>For Stardew Valley 1.6, shift furniture and items in upgraded farmhouses to account for the expansion of the farmhouse map up and to the left.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MigratePreservesTo16">
            <summary>For Stardew Valley 1.6, migrate preserve items to fix their preserved index value and convert to <see cref="T:StardewValley.Objects.ColoredObject"/>.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.MigrateQuestDataTo16">
            <summary>For Stardew Valley 1.6, migrate saved quest data to the new format.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.SetBushesInPots">
            <summary>For Stardew Valley 1.6, set the <see cref="F:StardewValley.TerrainFeatures.Bush.inPot"/> field.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.FixItemsNotMarkedAsInInventory">
            <summary>For Stardew Valley 1.6, fix some pre-1.6 items not marked as being in the player's inventory.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.BetaFixesFor16">
            <summary>For Stardew Valley 1.6, fix issues which only affect beta saves.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.FixBasicWines">
            <summary>For Stardew Valley 1.6, fix pre-1.6 basic wines .</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.ResetForges_1_6">
            <summary>For Stardew Valley 1.6, reset forges again.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.RestoreAncientSeedRecipe_1_6">
            <summary>For Stardew Valley 1.6, grant ancient seed recipe if it was missed.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.FixInstancedInterior">
            <summary>For Stardew Valley 1.6, fix any instanced indoor locations that are missing a unique name.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.FixNonInstancedInterior">
            <summary>For Stardew Valley 1.6 Beta, fix any indoor locations affected by the beta-only FixAnimalHouses save fix.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.PopulateConstructedBuildings">
            <summary>For Stardew Valley 1.6, populate the new <see cref="F:StardewValley.FarmerTeam.constructedBuildings"/> field retroactively.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveFixes.FixRacoonQuestCompletion">
            <summary>For Stardew Valley 1.6, remove racoon quest from every player's quest log if it has already been completed.</summary>
        </member>
        <member name="T:StardewValley.SaveMigrations.SaveMigrator">
            <summary>Manages and applies migrations to save files.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveMigrator.LatestSaveFix">
            <summary>The highest save fix that can be applied.</summary>
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator.ApplySaveFixes">
            <summary>Apply all applicable save fixes to the currently loaded save file.</summary>
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator.ApplySingleSaveFix(StardewValley.SaveMigrations.SaveFixes,System.Collections.Generic.List{StardewValley.Item})">
            <summary>Apply a single save fix to the currently loaded save file.</summary>
            <param name="fix">The save fix to apply.</param>
            <param name="loadedItems">A list of all items loaded from the save.</param>
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator.GetAllMigrators(System.Boolean)">
            <summary>Get all save migrators that can be applied.</summary>
            <param name="reverse">Whether to get migrations in reverse order (from newer to older). This is used when applying all migrations, since most fixes applied will be in a newer version.</param>
        </member>
        <member name="T:StardewValley.SaveMigrations.SaveMigrator_1_3">
            <summary>Migrates existing save files for compatibility with Stardew Valley 1.3.</summary>
        </member>
        <member name="P:StardewValley.SaveMigrations.SaveMigrator_1_3.GameVersion">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator_1_3.ApplySaveFix(StardewValley.SaveMigrations.SaveFixes)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator_1_3.ApplyLegacyChanges">
            <summary>Apply one-time save migrations which predate <see cref="T:StardewValley.SaveMigrations.SaveFixes"/>.</summary>
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator_1_3.MarkFloorChestAsCollectedIfNecessary(System.Int32)">
            <summary>Mark a mine floor chest as collected if needed.</summary>
            <param name="floorNumber">The mine level.</param>
            <remarks>This should only be used on pre-1.3 saves, because the addition of multiplayer means it's not safe to assume that the local player is the one who opened the chest.</remarks>
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator_1_3.MigrateFriendshipData(StardewValley.Farmer)">
            <summary>Migrate the obsolete <see cref="F:StardewValley.Farmer.obsolete_friendships"/> into the new <see cref="F:StardewValley.Farmer.friendshipData"/> field, if applicable.</summary>
            <param name="player">The player whose data to migrate.</param>
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator_1_3.MigrateHorseIds">
            <summary>Fix the <see cref="P:StardewValley.Characters.Horse.HorseId"/> value for pre-1.3 horses.</summary>
        </member>
        <member name="T:StardewValley.SaveMigrations.SaveMigrator_1_4">
            <summary>Migrates existing save files for compatibility with Stardew Valley 1.4.</summary>
        </member>
        <member name="P:StardewValley.SaveMigrations.SaveMigrator_1_4.GameVersion">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator_1_4.ApplySaveFix(StardewValley.SaveMigrations.SaveFixes)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator_1_4.ApplyLegacyChanges">
            <summary>Apply one-time save migrations which predate <see cref="T:StardewValley.SaveMigrations.SaveFixes"/>.</summary>
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator_1_4.RecalculateLostBookCount">
            <summary>Recalculate the number of lost books found.</summary>
        </member>
        <member name="T:StardewValley.SaveMigrations.SaveMigrator_1_5">
            <summary>Migrates existing save files for compatibility with Stardew Valley 1.5.</summary>
        </member>
        <member name="P:StardewValley.SaveMigrations.SaveMigrator_1_5.GameVersion">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator_1_5.ApplySaveFix(StardewValley.SaveMigrations.SaveFixes)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator_1_5.ResetForges">
            <summary>Reset all weapon stats to reflect any changes in buffs.</summary>
        </member>
        <member name="T:StardewValley.SaveMigrations.SaveMigrator_1_6">
            <summary>Migrates existing save files for compatibility with Stardew Valley 1.6.</summary>
        </member>
        <member name="P:StardewValley.SaveMigrations.SaveMigrator_1_6.GameVersion">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator_1_6.ApplySaveFix(StardewValley.SaveMigrations.SaveFixes)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator_1_6.ConvertBuildingsToData(StardewValley.GameLocation)">
            <summary>Convert individually implemented buildings that were saved before Stardew Valley 1.6 to the new Data/BuildingsData format.</summary>
            <param name="location">The location whose buildings to convert.</param>
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator_1_6.TransferValuesToDataBuilding(StardewValley.Buildings.Building,StardewValley.Buildings.Building)">
            <summary>Copy values from an older pre-1.6 building to a new data-driven <see cref="T:StardewValley.Buildings.Building" /> instance.</summary>
            <param name="oldBuilding">The pre-1.6 building instance.</param>
            <param name="newBuilding">The new data-driven building instance that will replace <paramref name="oldBuilding"/>.</param>
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator_1_6.MigrateFarmhands(System.Collections.Generic.List{StardewValley.GameLocation})">
            <summary>Migrate all farmhands from Cabin.deprecatedFarmhand into NetWorldState.</summary>
            <param name="locations">The locations to scan for cabins.</param>
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator_1_6.StandardizeBundleFields(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Migrate saved bundle data from Stardew Valley 1.5.6 or earlier to the new format.</summary>
            <param name="bundleData">The raw bundle data to standardize.</param>
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator_1_6.InferBuildingUpgradingTo(System.String)">
            <summary>For a building with an upgrade started before 1.6, get the building type it should be upgraded to if possible.</summary>
            <param name="fromBuildingType">The building type before the upgrade finishes.</param>
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator_1_6.InferMachineInputOutputFields(StardewValley.Object)">
            <summary>For a machine which contains output produced before 1.6, set the <see cref="F:StardewValley.Object.lastInputItem"/> and <see cref="F:StardewValley.Object.lastOutputRuleId"/> values when possible. This ensures that some machine logic works as expected (e.g. crystalariums resuming on collect).</summary>
            <param name="machine">The machine which produced output.</param>
            <remarks>This is heuristic, and some fields may not be set if it's not possible to retroactively infer them.</remarks>
        </member>
        <member name="M:StardewValley.SaveMigrations.SaveMigrator_1_6.MigrateLegacyDescriptionElement(System.Lazy{System.Xml.Serialization.XmlSerializer},StardewValley.Quests.DescriptionElement)">
             <summary>Migrate a pre-1.6 quest to the new format.</summary>
             <param name="serializer">The XML serializer with which to serialize/deserialize <see cref="T:StardewValley.Quests.DescriptionElement"/> and <see cref="T:StardewValley.SaveMigrations.SaveMigrator_1_6.LegacyDescriptionElement"/> values.</param>
             <param name="element">The description element to migrate.</param>
             <remarks>
               This updates quest data for two changes in 1.6:
             
               <list type="bullet">
                 <item><description>
                   The way <see cref="F:StardewValley.Quests.DescriptionElement.substitutions"/> values are stored in the save XML changed from this:
             
                   <code>
                     &lt;objective&gt;
                       &lt;xmlKey&gt;Strings\StringsFromCSFiles:SocializeQuest.cs.13802&lt;/xmlKey&gt;
                       &lt;param&gt;
                         &lt;anyType xsi:type="xsd:int"&gt;4&lt;/anyType&gt;
                         &lt;anyType xsi:type="xsd:int"&gt;28&lt;/anyType&gt;
                       &lt;/param&gt;
                     &lt;/objective&gt;
                   </code>
            
                  To this:
            
                   <code>
                     &lt;objective&gt;
                       &lt;xmlKey&gt;Strings\StringsFromCSFiles:SocializeQuest.cs.13802&lt;/xmlKey&gt;
                       &lt;param xsi:type="xsd:int"&gt;4&lt;/param&gt;
                       &lt;param xsi:type="xsd:int"&gt;28&lt;/param&gt;
                     &lt;/objective&gt;
                   </code>
            
                   If the given description element is affected, this method re-deserializes the data into the correct format.
               </description></item>
            
               <item><description>Some translation keys were merged to fix gender issues.</description></item>
               </list>
             </remarks>
        </member>
        <member name="T:StardewValley.SaveMigrations.SaveMigrator_1_6.LegacyDescriptionElement">
            <summary>The pre-1.6 structure of <see cref="T:StardewValley.Quests.DescriptionElement"/>.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveMigrator_1_6.LegacyDescriptionElement.xmlKey">
            <summary>The translation key for the text to render.</summary>
        </member>
        <member name="F:StardewValley.SaveMigrations.SaveMigrator_1_6.LegacyDescriptionElement.param">
            <summary>The values to substitute for placeholders like <c>{0}</c> in the translation text.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.GalaxyHelper.DisplayNameDataKey">
            <summary>The key we use to store the user's custom display name on the Galaxy API.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.GalaxyNetClient.hostDisplayName">
            <summary>The custom display name for the host player, or null if no custom name was found.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.GalaxyNetHelper.GalaxyInvitePrefix">
            <summary>The invite code prefix for a GOG Galaxy lobby.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.GalaxyNetHelper.SteamInvitePrefix">
            <summary>The invite code prefix for a Steam lobby.</summary>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.GalaxyNetHelper.TryGetHostSteamDisplayName(Galaxy.Api.GalaxyID)">
            <summary>Get the host's Steam display name from the underlying GOG Galaxy SDK if it's set.</summary>
            <param name="lobbyId">The GOG Galaxy lobby ID.</param>
            <returns>Returns the host's display name, or <c>null</c> if it's not set.</returns>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.GalaxyNetHelper.GetLobbyFromGalaxyInvite(System.String)">
            <summary>Gets a GOG Galaxy user ID from an invite code.</summary>
            <param name="inviteCode">The invite code string to parse.</param>
            <returns>Returns a valid GOG Galaxy user ID for the lobby corresponding to <paramref name="inviteCode"/>, or <c>null</c> if none was found.</returns>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.GalaxyNetServer.displayNames">
            <summary>A mapping of raw GalaxyIDs to custom display names.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.GalaxySocket.ProtocolVersionKey">
            <summary>The key for the multiplayer protocol version in the Galaxy lobby data.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.GalaxySocket.HostNameDataKey">
            <summary>The key for the host's display name in the Galaxy lobby data.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.GalaxySocket.SteamHostIdDataKey">
            <summary>The key for the Steam host's ID in the Galaxy lobby data.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.GalaxySocket.SteamLobbyIdDataKey">
            <summary>The key for the Steam lobby's ID in the Galaxy lobby data.</summary>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.GalaxySocket.OnLobbyCreateFailed">
            <summary>Logs a failure to create a lobby, and attempts to create a new lobby.</summary>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.GalaxySocket.onGalaxyMemberState(Galaxy.Api.GalaxyID,Galaxy.Api.GalaxyID,Galaxy.Api.LobbyMemberStateChange)">
            <summary>A Galaxy lobby listener that logs member state changes (entering the lobby, leaving the lobby, etc.)</summary>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.GalaxySocket.PreprocessMessage(Galaxy.Api.GalaxyID,System.IO.MemoryStream,System.Action{Galaxy.Api.GalaxyID,System.IO.Stream})">
            <summary>Decompress a message if necessary and pass the result to <paramref name="onMessage"/>.</summary>
            <param name="peer">The Galaxy ID of the peer who sent this message to us.</param>
            <param name="stream">A memory stream containing the message data.</param>
            <param name="onMessage">A callback to handle the message the processed data.</param>
        </member>
        <member name="T:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyAuthListener">
            <summary>Listener for events related to Galaxy user authentication.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyAuthListener.OnSuccess">
            <summary>The callback to invoke when Galaxy user authentication succeeds.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyAuthListener.OnFailure">
            <summary>The callback to invoke when Galaxy user authentication fails.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyAuthListener.OnLost">
            <summary>The callback to invoke when Galaxy loses user authentication.</summary>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyAuthListener.#ctor(System.Action,System.Action{Galaxy.Api.IAuthListener.FailureReason},System.Action)">
            <summary>Constructs an instance of the listener and registers it with the Galaxy SDK.</summary>
            <param name="success">The callback to invoke when Galaxy user authentication succeeds.</param>
            <param name="failure">The callback to invoke when Galaxy user authentication fails.</param>
            <param name="lost">The callback to invoke when Galaxy loses user authentication.</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyAuthListener.OnAuthSuccess">
            <summary>Handles user authentication success, and invokes <see cref="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyAuthListener.OnSuccess"/>.</summary>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyAuthListener.OnAuthFailure(Galaxy.Api.IAuthListener.FailureReason)">
            <summary>Handles user authentication failure, and invokes <see cref="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyAuthListener.OnFailure"/>.</summary>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyAuthListener.OnAuthLost">
            <summary>Handles loosing user authentication, and invokes <see cref="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyAuthListener.OnLost"/>.</summary>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyAuthListener.Dispose">
            <summary>Unregisters the listener from the Galaxy SDK.</summary>
        </member>
        <member name="T:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyGameJoinRequestedListener">
            <summary>Listener for when a user requests to join a game on Galaxy, either by accepting an invitation or by joining a friend.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyGameJoinRequestedListener.Callback">
            <summary>The callback to invoke when a Galaxy user requests to join a game.</summary>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyGameJoinRequestedListener.#ctor(System.Action{Galaxy.Api.GalaxyID,System.String})">
            <summary>Constructs an instance of the listener and registers it with the Galaxy SDK.</summary>
            <param name="callback">The callback to invoke when a Galaxy user requests to join a game.</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyGameJoinRequestedListener.OnGameJoinRequested(Galaxy.Api.GalaxyID,System.String)">
            <summary>Handles user requests to join games, and passes the information to <see cref="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyGameJoinRequestedListener.Callback"/>.</summary>
            <param name="lobbyID">The Galaxy ID of the lobby.</param>
            <param name="result">The Galaxy connection string.</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyGameJoinRequestedListener.Dispose">
            <summary>Unregisters the listener from the Galaxy SDK.</summary>
        </member>
        <member name="T:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyCreatedListener">
            <summary>Listener for Galaxy lobby creation.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyCreatedListener.Callback">
            <summary>The callback to invoke when creating a Galaxy lobby succeeds or fails.</summary>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyCreatedListener.#ctor(System.Action{Galaxy.Api.GalaxyID,Galaxy.Api.LobbyCreateResult})">
            <summary>Constructs an instance of the listener and registers it with the Galaxy SDK.</summary>
            <param name="callback">The callback to invoke when creating a Galaxy lobby succeeds or fails.</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyCreatedListener.OnLobbyCreated(Galaxy.Api.GalaxyID,Galaxy.Api.LobbyCreateResult)">
            <summary>Handles success/failure for Galaxy lobby creation, and passes the information to <see cref="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyCreatedListener.Callback"/>.</summary>
            <param name="lobbyID">The Galaxy ID of the lobby being created.</param>
            <param name="result">An enum representing whether the lobby creation succeeded or failed.</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyCreatedListener.Dispose">
            <summary>Unregisters the listener from the Galaxy SDK.</summary>
        </member>
        <member name="T:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyDataListener">
            <summary>Listener for when we receive an updated version of a Galaxy lobby's data.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyDataListener.Callback">
            <summary>The callback to invoke when the data for a Galaxy lobby changes.</summary>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyDataListener.#ctor(System.Action{Galaxy.Api.GalaxyID,Galaxy.Api.GalaxyID})">
            <summary>Constructs an instance of the listener and registers it with the Galaxy SDK.</summary>
            <param name="callback">The callback to invoke when the data for a Galaxy lobby changes.</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyDataListener.OnLobbyDataUpdated(Galaxy.Api.GalaxyID,Galaxy.Api.GalaxyID)">
            <summary>Handles changes to Galaxy lobby data, and passes the information to <see cref="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyDataListener.Callback"/>.</summary>
            <param name="lobbyID">The Galaxy ID of the lobby.</param>
            <param name="memberID">The Galaxy ID the lobby member whose data changed (if applicable).</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyDataListener.Dispose">
            <summary>Unregisters the listener from the Galaxy SDK.</summary>
        </member>
        <member name="T:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyDataRetrieveListener">
            <summary>Listener notified when the Galaxy SDK retrieves lobby data.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyDataRetrieveListener.OnSuccess">
            <summary>The callback to invoke when fetching Galaxy lobby data succeeds.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyDataRetrieveListener.OnFailure">
            <summary>The callback to invoke when fetching Galaxy lobby data fails.</summary>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyDataRetrieveListener.#ctor(System.Action{Galaxy.Api.GalaxyID},System.Action{Galaxy.Api.GalaxyID,Galaxy.Api.ILobbyDataRetrieveListener.FailureReason})">
            <summary>Constructs an instance of the listener.</summary>
            <param name="success">The callback to invoke when fetching Galaxy lobby data succeeds.</param>
            <param name="failure">The callback to invoke when fetching Galaxy lobby data fails.</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyDataRetrieveListener.OnLobbyDataRetrieveSuccess(Galaxy.Api.GalaxyID)">
            <summary>Handles successful retrieval of Galaxy lobby data, and invokes <see cref="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyDataRetrieveListener.OnSuccess"/>.</summary>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyDataRetrieveListener.OnLobbyDataRetrieveFailure(Galaxy.Api.GalaxyID,Galaxy.Api.ILobbyDataRetrieveListener.FailureReason)">
            <summary>Handles failure to retrieve Galaxy lobby data, and invokes <see cref="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyDataRetrieveListener.OnFailure"/>.</summary>
        </member>
        <member name="T:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyEnteredListener">
            <summary>Listener for entering a Galaxy lobby.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyEnteredListener.Callback">
            <summary>The callback to invoke when entering a Galaxy lobby succeeds or fails.</summary>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyEnteredListener.#ctor(System.Action{Galaxy.Api.GalaxyID,Galaxy.Api.LobbyEnterResult})">
            <summary>Constructs an instance of the listener and registers it with the Galaxy SDK.</summary>
            <param name="callback">The callback to invoke when entering a Galaxy lobby succeeds or fails.</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyEnteredListener.OnLobbyEntered(Galaxy.Api.GalaxyID,Galaxy.Api.LobbyEnterResult)">
            <summary>Handles success/failure for entering a Galaxy lobby, and passes the information to <see cref="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyEnteredListener.Callback"/>.</summary>
            <param name="lobbyID">The Galaxy ID of the lobby that was entered.</param>
            <param name="result">An enum representing whether or not we successfully entered the lobby.</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyEnteredListener.Dispose">
            <summary>Unregisters the listener from the Galaxy SDK.</summary>
        </member>
        <member name="T:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyLeftListener">
            <summary>Listener for leaving a Galaxy lobby.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyLeftListener.Callback">
            <summary>The callback to invoke when leaving a Galaxy lobby for any reason.</summary>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyLeftListener.#ctor(System.Action{Galaxy.Api.GalaxyID,Galaxy.Api.ILobbyLeftListener.LobbyLeaveReason})">
            <summary>Constructs an instance of the listener and registers it with the Galaxy SDK.</summary>
            <param name="callback">The callback to invoke when leaving a Galaxy lobby for any reason.</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyLeftListener.OnLobbyLeft(Galaxy.Api.GalaxyID,Galaxy.Api.ILobbyLeftListener.LobbyLeaveReason)">
            <summary>Handles leaving a lobby for any reason (leaving normally, losing connection, etc.) and passes the information to <see cref="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyLeftListener.Callback"/>.</summary>
            <param name="lobbyID">The Galaxy ID of the lobby that was left.</param>
            <param name="leaveReason">The reason why we left the lobby.</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyLeftListener.Dispose">
            <summary>Unregisters the listener from the Galaxy SDK.</summary>
        </member>
        <member name="T:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyMemberStateListener">
            <summary>Listener for events related to Galaxy lobby member state changes (joining, leaving, disconnecting, etc.).</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyMemberStateListener.Callback">
            <summary>The callback to invoke when a Galaxy lobby member changes state.</summary>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyMemberStateListener.#ctor(System.Action{Galaxy.Api.GalaxyID,Galaxy.Api.GalaxyID,Galaxy.Api.LobbyMemberStateChange})">
            <summary>Constructs an instance of the listener and registers it with the Galaxy SDK.</summary>
            <param name="callback">The callback to invoke when a Galaxy lobby member changes state.</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyMemberStateListener.OnLobbyMemberStateChanged(Galaxy.Api.GalaxyID,Galaxy.Api.GalaxyID,Galaxy.Api.LobbyMemberStateChange)">
            <summary>Handles Galaxy lobby member state changes (joining, leaving, disconnecting, etc.) and passes the information to <see cref="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyMemberStateListener.Callback"/>.</summary>
            <param name="lobbyID">The Galaxy ID of the lobby.</param>
            <param name="memberID">The Galaxy ID of the lobby member whose state changed.</param>
            <param name="memberStateChange">The updated state of the lobby member.</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyLobbyMemberStateListener.Dispose">
            <summary>Unregisters the listener from the Galaxy SDK.</summary>
        </member>
        <member name="T:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyOperationalStateChangeListener">
            <summary>Listener for changes in Galaxy's operational state (e.g. signing in and logging on).</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyOperationalStateChangeListener.Callback">
            <summary>The callback to invoke when Galaxy's operational state changes.</summary>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyOperationalStateChangeListener.#ctor(System.Action{System.UInt32})">
            <summary>Constructs an instance of the listener and registers it with the Galaxy SDK.</summary>
            <param name="callback">The callback to invoke when Galaxy's operational state changes.</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyOperationalStateChangeListener.OnOperationalStateChanged(System.UInt32)">
            <summary>Handles operational state changes, and passes the information to <see cref="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyOperationalStateChangeListener.Callback"/>.</summary>
            <param name="operationalState">A bit-field representing the operational state change.</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyOperationalStateChangeListener.Dispose">
            <summary>Unregisters the listener from the Galaxy SDK.</summary>
        </member>
        <member name="T:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyRichPresenceListener">
            <summary>Listener for any change in a Galaxy user's rich presence.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyRichPresenceListener.Callback">
            <summary>The callback to invoke when the rich presence for a Galaxy user changes.</summary>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyRichPresenceListener.#ctor(System.Action{Galaxy.Api.GalaxyID})">
            <summary>Constructs an instance of the listener and registers it with the Galaxy SDK.</summary>
            <param name="callback">The callback to invoke when the rich presence for a Galaxy user changes.</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyRichPresenceListener.OnRichPresenceUpdated(Galaxy.Api.GalaxyID)">
            <summary>Handles changes to a Galaxy user's rich presence, and passes the information to <see cref="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyRichPresenceListener.Callback"/>.</summary>
            <param name="userID">The Galaxy ID of the user whose rich presence was updated.</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxyRichPresenceListener.Dispose">
            <summary>Unregisters the listener from the Galaxy SDK.</summary>
        </member>
        <member name="T:StardewValley.SDKs.GogGalaxy.Listeners.GalaxySpecificUserDataListener">
            <summary>Listener for events related to Galaxy user data changes for any user.</summary>
        </member>
        <member name="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxySpecificUserDataListener.Callback">
            <summary>The callback to invoke when the user data changes for a Galaxy user.</summary>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxySpecificUserDataListener.#ctor(System.Action{Galaxy.Api.GalaxyID})">
            <summary>Constructs an instance of the listener and registers it with the Galaxy SDK.</summary>
            <param name="callback">The callback to invoke when the user data changes for a Galaxy user.</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxySpecificUserDataListener.OnSpecificUserDataUpdated(Galaxy.Api.GalaxyID)">
            <summary>Handles Galaxy user data changes, and passes the information to <see cref="F:StardewValley.SDKs.GogGalaxy.Listeners.GalaxySpecificUserDataListener.Callback"/>.</summary>
            <param name="userID">The Galaxy ID of the user whose data was updated.</param>
        </member>
        <member name="M:StardewValley.SDKs.GogGalaxy.Listeners.GalaxySpecificUserDataListener.Dispose">
            <summary>Unregisters the listener from the Galaxy SDK.</summary>
        </member>
        <member name="P:StardewValley.SDKs.SDKHelper.IsEnterButtonAssignmentFlipped">
            <summary>
            This property needs to be initialized to the correct value before Initialize(), so probably within EarlyInitialize().
            </summary>
        </member>
        <member name="P:StardewValley.SDKs.SDKHelper.IsJapaneseRegionRelease">
            <summary>
            This property needs to be initialized to the correct value before Initialize(), so probably within EarlyInitialize().
            </summary>
        </member>
        <member name="T:StardewValley.SDKs.Steam.Internal.ConnectionData">
            <summary>Extra bookkeeping data for a connected client.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.Internal.ConnectionData.FarmerId">
            <summary>The Farmer ID associated with the connected client.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.Internal.ConnectionData.SteamId">
            <summary>The Steam ID of the connected client.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.Internal.ConnectionData.Connection">
            <summary>The connection used to send data to the client.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.Internal.ConnectionData.Online">
            <summary>Whether the client has an active farmhand.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.Internal.ConnectionData.DisplayName">
            <summary>The Steam display name of the connected client.</summary>
        </member>
        <member name="M:StardewValley.SDKs.Steam.Internal.ConnectionData.#ctor(Steamworks.HSteamNetConnection,Steamworks.CSteamID,System.String)">
            <summary>Construct an instance.</summary>
            <param name="connection">The connection used to send data to the client.</param>
            <param name="steamId">The Steam ID of the connected client.</param>
            <param name="displayName">The Steam display name of the connected client.</param>
        </member>
        <member name="T:StardewValley.SDKs.Steam.Internal.HybridLobby">
            <summary>A lobby that can accept Steam connections, Galaxy connections, or both.</summary>
        </member>
        <member name="P:StardewValley.SDKs.Steam.Internal.HybridLobby.SteamId">
            <summary>The underlying Steam lobby ID.</summary>
        </member>
        <member name="P:StardewValley.SDKs.Steam.Internal.HybridLobby.GalaxyId">
            <summary>The underlying Galaxy lobby ID.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.Internal.HybridLobby.IsHybrid">
            <summary>Whether this is a Galaxy lobby which allows Steam connections. This is only relevant to lobbies from invite codes.</summary>
        </member>
        <member name="P:StardewValley.SDKs.Steam.Internal.HybridLobby.LobbyType">
            <summary>The type of lobby represented by this instance.</summary>
        </member>
        <member name="M:StardewValley.SDKs.Steam.Internal.HybridLobby.#ctor(Steamworks.CSteamID)">
            <summary>Constructs an instance which allows only Steam connections.</summary>
            <param name="steamID">The ID of the Steam lobby.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.Internal.HybridLobby.#ctor(Galaxy.Api.GalaxyID,System.Boolean)">
            <summary>Constructs an instance which allows GOG Galaxy (and possibly Steam) connections.</summary>
            <param name="galaxyID">The ID of the Galaxy lobby.</param>
            <param name="isHybrid">Whether the Galaxy lobby supports Steam connections.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.Internal.HybridLobby.Clear">
            <summary>Invalidates the lobby and its lobby ID members.</summary>
        </member>
        <member name="T:StardewValley.SDKs.Steam.Internal.LobbyConnectionType">
            <summary>A connection type supported by a lobby.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.Internal.LobbyConnectionType.Steam">
            <summary>A lobby which only allows Steam connections.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.Internal.LobbyConnectionType.Galaxy">
            <summary>A lobby which only allows GOG Galaxy connections.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.Internal.LobbyConnectionType.Hybrid">
            <summary>A lobby which allows both GOG Galaxy and Steam connections.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.Internal.LobbyConnectionType.Invalid">
            <summary>An invalid or cleared lobby.</summary>
        </member>
        <member name="T:StardewValley.SDKs.Steam.Internal.SteamSocketUtils">
            <summary>Simplifies interacting with Steam Networking Sockets for the Steam SDK client.</summary>
        </member>
        <member name="M:StardewValley.SDKs.Steam.Internal.SteamSocketUtils.GetNetworkingOptions">
            <summary>Gets an array of configuration values to use when creating a Steam connection.</summary>
        </member>
        <member name="M:StardewValley.SDKs.Steam.Internal.SteamSocketUtils.ProcessSteamMessage(System.IntPtr,StardewValley.Network.IncomingMessage,Steamworks.HSteamNetConnection@,StardewValley.Network.BandwidthLogger)">
            <summary>Converts a <see cref="T:Steamworks.SteamNetworkingMessage_t"/> into an <see cref="T:StardewValley.Network.IncomingMessage"/> to be used internally, decompressing the data if needed.</summary>
            <param name="messagePtr">A pointer to the <see cref="T:Steamworks.SteamNetworkingMessage_t"/> that we will process.</param>
            <param name="message">A reference to message to write the data into.</param>
            <param name="messageConnection">The connection that sent the <see cref="T:Steamworks.SteamNetworkingMessage_t"/>.</param>
            <param name="bandwidthLogger">A bandwidth logger with which to log the number of bytes received.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.Internal.SteamSocketUtils.SendMessage(Steamworks.HSteamNetConnection,StardewValley.Network.OutgoingMessage,StardewValley.Network.BandwidthLogger,System.Action{Steamworks.HSteamNetConnection})">
            <summary>Converts and sends an <see cref="T:StardewValley.Network.OutgoingMessage"/> over Steam's sockets, compressing the data if needed.</summary>
            <param name="messageConnection">The connection through which to send the message.</param>
            <param name="message">The message to be sent using Steam's sockets.</param>
            <param name="bandwidthLogger">A bandwidth logger with which to log the number of bytes sent.</param>
            <param name="onDisconnected">Cleans up all bookkeeping data about the connection if a message fails to send.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.Internal.SteamSocketUtils.CloseConnection(Steamworks.HSteamNetConnection,System.Action{Steamworks.HSteamNetConnection})">
            <summary>Closes a Steam connection if it's valid.</summary>
            <param name="connection">The connection to close.</param>
            <param name="onDisconnected">The callback invoked immediately before the connection is closed to perform any cleanup needed.</param>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetClient.ClientBufferSize">
            <summary>The max number of messages we can receive in a single frame.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetClient.SteamLobbyEnterCallResult">
            <summary>The callback used to check the result of entering a Steam lobby.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetClient.SteamNetConnectionStatusChangedCallback">
            <summary>The callback used to handle changes in the connection state (connecting, connected, disconnected, etc.).</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetClient.GalaxyLobbyDataRetrieveCallback">
            <summary>The callback used to check the result of retrieving Galaxy lobby data.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetClient.Messages">
            <summary>The pointers to received messages.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetClient.GalaxyLobby">
            <summary>The Galaxy lobby ID. If this is valid, we will fetch <see cref="F:StardewValley.SDKs.Steam.SteamNetClient.SteamLobby"/> by querying the <see cref="F:StardewValley.SDKs.GogGalaxy.GalaxySocket.SteamLobbyIdDataKey"/> lobby data.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetClient.SteamLobby">
            <summary>The Steam lobby ID. If this is valid, we will fetch <see cref="F:StardewValley.SDKs.Steam.SteamNetClient.HostId"/> by querying the lobby owner.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetClient.HostId">
            <summary>The Steam host ID that the client will connect to.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetClient.CachedHostName">
            <summary>The Steam display name of the hosting player.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetClient.Connection">
            <summary>The Steam Networking Socket connection between the client and server.</summary>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetClient.#ctor(Galaxy.Api.GalaxyID)">
            <summary>Constructs an instance that resolves the host from a Galaxy lobby.</summary>
            <param name="galaxyLobby">The Galaxy lobby that we will be querying for the Steam host ID.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetClient.#ctor(Steamworks.CSteamID)">
            <summary>Constructs an instance that resolves the host from a Steam lobby.</summary>
            <param name="steamLobby">The Steam lobby that we will be querying for the Steam host ID.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetClient.Finalize">
            <summary>Cleans up the instance and its callbacks.</summary>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetClient.OnDisconnected(Steamworks.HSteamNetConnection)">
            <summary>Handles disconnecting from the server, and cleans up the connection.</summary>
            <param name="connection">The connection to clean up.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetClient.OnSteamNetConnectionStatusChanged(Steamworks.SteamNetConnectionStatusChangedCallback_t)">
            <summary>Handles changes in the <see cref="F:StardewValley.SDKs.Steam.SteamNetClient.Connection"/> status.</summary>
            <param name="evt">The information about the connection and its new status.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetClient.ConnectToHost">
            <summary>Connects to the obtained host ID.</summary>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetClient.TryConnectSteam(Steamworks.LobbyEnter_t,System.Boolean,System.String@)">
            <summary>Attempts to fetch the host data and connect from the Steam lobby.</summary>
            <param name="evt">The data for the lobby enter event.</param>
            <param name="ioFailure">Whether joining the lobby failed due to an I/O error.</param>
            <param name="errorTranslationKey">The translation key for the UI error message, if applicable.</param>
            <returns>Returns an error indicating why connection failed, if applicable.</returns>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetClient.OnLobbyEnter(Steamworks.LobbyEnter_t,System.Boolean)">
            <summary>Handles the result of joining a Steam lobby.</summary>
            <param name="evt">The data for the Lobby enter event.</param>
            <param name="ioFailure">Whether joining the lobby failed due to an I/O error.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetClient.ConnectImplSteam">
            <summary>Starts the client connection process via Steam lobby.</summary>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetClient.CleanupLobbyDataRetrieve">
            <summary>Handles common cleanup tasks for <see cref="M:StardewValley.SDKs.Steam.SteamNetClient.OnLobbyDataRetrieveSuccess(Galaxy.Api.GalaxyID)"/> and <see cref="M:StardewValley.SDKs.Steam.SteamNetClient.OnLobbyDataRetrieveFailure(Galaxy.Api.GalaxyID,Galaxy.Api.ILobbyDataRetrieveListener.FailureReason)"/>.</summary>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetClient.TryConnectGalaxy(Galaxy.Api.GalaxyID,System.String@)">
            <summary>Attempts to fetch the host data and connect from the Galaxy lobby.</summary>
            <param name="lobbyId">The Galaxy ID of the lobby to fetch host data from.</param>
            <param name="errorTranslationKey">The translation key for the UI error message, if applicable.</param>
            <returns>Returns an error indicating why connection failed, if applicable.</returns>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetClient.OnLobbyDataRetrieveSuccess(Galaxy.Api.GalaxyID)">
            <summary>Handles a successful retrieval of data from the Galaxy lobby.</summary>
            <param name="lobbyId">The Galaxy ID of the lobby we retrieved data from.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetClient.OnLobbyDataRetrieveFailure(Galaxy.Api.GalaxyID,Galaxy.Api.ILobbyDataRetrieveListener.FailureReason)">
            <summary>Handles a failure to retrieve data from the Galaxy lobby.</summary>
            <param name="lobbyId">The Galaxy ID of the lobby we failed to retrieve data from.</param>
            <param name="failureReason">The reason why we failed to retrieve data from the lobby.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetClient.ConnectImplGalaxy">
            <summary>Starts the client connection process via Galaxy lobby.</summary>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetClient.SendMessageImpl(StardewValley.Network.OutgoingMessage)">
            <summary>Send a message to the server.</summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetClient.ShutdownConnection">
            <summary>Closes the client connection and cleans up the bookkeeping data.</summary>
            <remarks>
            In most cases, this should be used instead of calling <see cref="M:StardewValley.SDKs.Steam.Internal.SteamSocketUtils.CloseConnection(Steamworks.HSteamNetConnection,System.Action{Steamworks.HSteamNetConnection})" /> directly,
            otherwise the <see cref="M:StardewValley.SDKs.Steam.SteamNetClient.OnDisconnected(Steamworks.HSteamNetConnection)" /> handler will not get called. However, the <see cref="M:StardewValley.SDKs.Steam.SteamNetClient.OnDisconnected(Steamworks.HSteamNetConnection)" />
            handler itself should not use this method.
            </remarks>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetHelper.LobbyUpdateListeners">
            <summary>List of active listeners to call when we receive lobby update events.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetHelper.LobbyDataUpdateCallback">
            <summary>The callback used to receive lobby data updates and pass them to <see cref="F:StardewValley.SDKs.Steam.SteamNetHelper.LobbyUpdateListeners"/>.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetHelper.GameLobbyJoinRequestedCallback">
            <summary>The callback used to handle requests to join lobbies, either through Steam overlay or by invite.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetHelper.RequestedLobby">
            <summary>The lobby the player requested to join, either through Steam overlay or by invite.</summary>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetHelper.#ctor">
            <summary>Constructs an instance and registers its Steam SDK callbacks.</summary>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetHelper.Finalize">
            <summary>Cleans up the instance and unregisters its Steam SDK callbacks.</summary>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetHelper.OnGameLobbyJoinRequested(Steamworks.GameLobbyJoinRequested_t)">
            <summary>Handles a request to join a Steam lobby.</summary>
            <param name="evt">A structure containing information about the lobby join request.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetHelper.OnLobbyDataUpdate(Steamworks.LobbyDataUpdate_t)">
            <summary>Handles changes in lobby data (likely in response to <see cref="M:StardewValley.SDKs.Steam.SteamNetHelper.RequestFriendLobbyData"/>) and invokes listeners from <see cref="F:StardewValley.SDKs.Steam.SteamNetHelper.LobbyUpdateListeners"/>.</summary>
            <param name="evt">A structure containing information about the lobby whose data changed.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetHelper.FindLaunchLobby">
            <summary>Reads the command line arguments to find the launch option "+connect_lobby &lt;lobbyID&gt;".</summary>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetHelper.RequestJoinLobby(Steamworks.CSteamID)">
            <summary>Queues a request to a lobby if it's a valid Steam lobby ID.</summary>
            <param name="requestedLobby">The lobby we are requesting to join.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetHelper.CreateClientFromHybrid(StardewValley.SDKs.Steam.Internal.HybridLobby)">
            <summary>Creates a client corresponding to the type of <paramref name="lobby"/>.</summary>
            <param name="lobby">The lobby that we will be joining with the resulting client.</param>
            <returns>Returns a client that will join <paramref name="lobby"/>.</returns>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetHelper.CreateClientHelper(StardewValley.SDKs.Steam.Internal.HybridLobby)">
            <summary>Creates a client with <see cref="M:StardewValley.SDKs.Steam.SteamNetHelper.CreateClientFromHybrid(StardewValley.SDKs.Steam.Internal.HybridLobby)"/> and initializes it with <see cref="M:StardewValley.Multiplayer.InitClient(StardewValley.Network.Client)"/>.</summary>
            <param name="lobby">The lobby that we will be joining with the resulting client.</param>
            <returns>Returns an initialized client that will join <paramref name="lobby"/>.</returns>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetHelper.CreateSteamServer(StardewValley.Network.IGameServer)">
            <summary>Creates an additional Steam server with an underlying <paramref name="gameServer"/>.</summary>
            <param name="gameServer">The master game server that manages all <see cref="T:StardewValley.Network.Server"/> objects.</param>
            <returns>Returns an initialized instance of <see cref="T:StardewValley.SDKs.Steam.SteamNetServer"/>.</returns>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetServer.ServerBufferSize">
            <summary>The max number of messages we can receive in a single frame.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetServer.FlagsLobbyEntered">
            <summary>The bit mask to check if a player entered the lobby.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetServer.FlagsLobbyLeft">
            <summary>The bit mask to check if a player left the lobby for any reason.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetServer.LobbyCreatedCallResult">
            <summary>The callback used to check the result of creating a Steam lobby.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetServer.SteamNetConnectionStatusChangedCallback">
            <summary>The callback used to handle changes in the connection state (connecting, connected, disconnected, etc).</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetServer.LobbyChatUpdateCallback">
            <summary>The callback used to handle changes to chat room members (joined the lobby, left the lobby, etc).</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetServer.LobbyData">
            <summary>A local copy of the lobby data, in case the Steam lobby is not ready.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetServer.ConnectionDataMap">
            <summary>The connection data by Steam Networking Socket.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetServer.FarmerConnectionMap">
            <summary>The connection data by farmer ID.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetServer.CachedDisplayNames">
            <summary>The cached display names of Steam lobby members.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetServer.RecentlyJoined">
            <summary>The connections that changed poll groups during a call to <see cref="M:StardewValley.SDKs.Steam.SteamNetServer.PollJoiningMessages"/>.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetServer.Messages">
            <summary>The pointers to received messages.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetServer.Lobby">
            <summary>The Steam ID of the game server's lobby.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetServer.ListenSocket">
            <summary>The Steam socket used to handle incoming connections.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetServer.JoiningGroup">
            <summary>The poll group used for connections that have not selected a farmhand.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetServer.FarmhandGroup">
            <summary>The poll group used for connections currently playing as a farmhand.</summary>
        </member>
        <member name="F:StardewValley.SDKs.Steam.SteamNetServer.Privacy">
            <summary>The privacy setting for the server's lobby.</summary>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetServer.#ctor(StardewValley.Network.IGameServer)">
            <summary>Creates an instance of the <see cref="T:StardewValley.SDKs.Steam.SteamNetServer"/>.</summary>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetServer.UpdateLobbyPrivacy">
            <summary>Applies the privacy setting from <see cref="F:StardewValley.SDKs.Steam.SteamNetServer.Privacy"/> to the game server's lobby.</summary>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetServer.ConnectionDataToId(StardewValley.SDKs.Steam.Internal.ConnectionData)">
            <summary>Converts a <see cref="T:StardewValley.SDKs.Steam.Internal.ConnectionData"/> to a connection string to be used in the Stardew API.</summary>
            <param name="connection">The connection data to convert to a unique connection string.</param>
            <returns>Returns a string that uniquely corresponds to the <see cref="T:StardewValley.SDKs.Steam.Internal.ConnectionData"/>.</returns>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetServer.IdToConnectionData(System.String)">
            <summary>Gets the internal <see cref="T:StardewValley.SDKs.Steam.Internal.ConnectionData"/> for a corresponding connection string.</summary>
            <param name="connectionId">The unique connection string to fetch <see cref="T:StardewValley.SDKs.Steam.Internal.ConnectionData"/> for.</param>
            <returns>Returns the <see cref="T:StardewValley.SDKs.Steam.Internal.ConnectionData"/> bookkeeping object that corresponds to the <paramref name="connectionId"/> string, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetServer.OnConnecting(Steamworks.SteamNetConnectionStatusChangedCallback_t,Steamworks.CSteamID)">
            <summary>Handles new incoming connections, and rejects users that are banned.</summary>
            <param name="evt">The data about the incoming client connection.</param>
            <param name="steamId">The Steam ID of the connecting client.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetServer.OnConnected(Steamworks.SteamNetConnectionStatusChangedCallback_t,Steamworks.CSteamID)">
            <summary>Handles newly connected clients, and creates internal bookkeeping structures for the connection.</summary>
            <param name="evt">A structure containing data about the newly connected client.</param>
            <param name="steamId">The Steam ID of the connected client.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetServer.OnDisconnected(Steamworks.SteamNetConnectionStatusChangedCallback_t,Steamworks.CSteamID)">
            <summary>Handles client disconnects, and cleans up all bookkeeping data about the connection.</summary>
            <param name="evt">The data about the disconnected client.</param>
            <param name="steamId">The Steam ID of the disconnected client.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetServer.OnDisconnected(Steamworks.HSteamNetConnection)">
            <summary>Handles clients disconnected via <see cref="M:Steamworks.SteamNetworkingSockets.CloseConnection(Steamworks.HSteamNetConnection,System.Int32,System.String,System.Boolean)" />, and cleans up all bookkeeping data about the connection.</summary>
            <param name="connection">The connection to clean up.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetServer.OnSteamNetConnectionStatusChanged(Steamworks.SteamNetConnectionStatusChangedCallback_t)">
            <summary>Handles all changes in client connection status, and invokes the corresponding handler.</summary>
            <param name="evt">A structure containing data about the client whose connection status changed.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetServer.OnLobbyChatUpdate(Steamworks.LobbyChatUpdate_t)">
            <summary>Handles all changes in lobby member status.</summary>
            <param name="evt">A structure containing data about the changes to a lobby member.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetServer.OnLobbyCreatedHelper(Steamworks.LobbyCreated_t,System.Boolean)">
            <summary>Handles the result of Steam lobby creation.</summary>
            <param name="evt">The data for the Lobby creation event.</param>
            <param name="ioFailure">Whether creating the lobby failed due to an I/O error.</param>
            <returns>Returns an error indicating why creation failed, if applicable.</returns>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetServer.OnLobbyCreated(Steamworks.LobbyCreated_t,System.Boolean)">
            <summary>Handles the result of Steam lobby creation.</summary>
            <param name="evt">The data for the Lobby creation event.</param>
            <param name="ioFailure">Whether creating the lobby failed due to an I/O error.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetServer.HandleFarmhandRequest(StardewValley.Network.IncomingMessage,StardewValley.SDKs.Steam.Internal.ConnectionData)">
            <summary>Handles an incoming <see cref="F:StardewValley.Multiplayer.playerIntroduction"/> message.</summary>
            <param name="message">The incoming <see cref="F:StardewValley.Multiplayer.playerIntroduction"/> message containing information about the requested farmhand.</param>
            <param name="connectionData">The connection data for the player who sent the <paramref name="message"/>.</param>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetServer.PollJoiningMessages">
            <summary>Receives messages from the <see cref="F:StardewValley.SDKs.Steam.SteamNetServer.JoiningGroup"/> poll group, where all clients without farmhands should be.</summary>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetServer.PollFarmhandMessages">
            <summary>Receives messages from the <see cref="F:StardewValley.SDKs.Steam.SteamNetServer.FarmhandGroup"/> poll group, where all clients with actively playing farmhands should be.</summary>
        </member>
        <member name="M:StardewValley.SDKs.Steam.SteamNetServer.ShutdownConnection(Steamworks.HSteamNetConnection)">
            <summary>Closes a connection and cleans up the corresponding bookkeeping data.</summary>
            <param name="connection">The connection to close and clean up.</param>
            <remarks>
            In most cases, this should be used instead of calling <see cref="M:StardewValley.SDKs.Steam.Internal.SteamSocketUtils.CloseConnection(Steamworks.HSteamNetConnection,System.Action{Steamworks.HSteamNetConnection})" /> directly,
            otherwise the <see cref="M:StardewValley.SDKs.Steam.SteamNetServer.OnDisconnected(Steamworks.SteamNetConnectionStatusChangedCallback_t,Steamworks.CSteamID)" /> handler will not get called. However, the  <see cref="M:StardewValley.SDKs.Steam.SteamNetServer.OnDisconnected(Steamworks.SteamNetConnectionStatusChangedCallback_t,Steamworks.CSteamID)" />
            handler itself should not use this method.
            </remarks>
        </member>
        <member name="T:StardewValley.SerializableDictionary`2">
            <summary>A dictionary that can be read and written in the save XML.</summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:StardewValley.SerializableDictionary`2.#ctor">
            <summary>Construct an empty instance.</summary>
        </member>
        <member name="M:StardewValley.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>Construct an instance.</summary>
            <param name="data">The data to copy.</param>
        </member>
        <member name="M:StardewValley.SerializableDictionary`2.BuildFrom``1(System.Collections.Generic.IDictionary{`0,``0},System.Func{``0,`1})">
            <summary>Create an instance from a dictionary with a different value type.</summary>
            <typeparam name="TSourceValue">The value type in the source data to copy.</typeparam>
            <param name="data">The data to copy.</param>
            <param name="getValue">Get the value to use for an entry in the original data.</param>
        </member>
        <member name="M:StardewValley.SerializableDictionary`2.BuildFrom``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``0,`0},System.Func{``1,`1})">
            <summary>Create an instance from a dictionary with different key and value types.</summary>
            <typeparam name="TSourceKey">The key type in the source data to copy.</typeparam>
            <typeparam name="TSourceValue">The value type in the source data to copy.</typeparam>
            <param name="data">The data to copy.</param>
            <param name="getKey">Get the key to use for an entry in the original data.</param>
            <param name="getValue">Get the value to use for an entry in the original data.</param>
        </member>
        <member name="M:StardewValley.SerializableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Construct an instance.</summary>
            <param name="comparer">The equality comparer to use when comparing keys, or null to use the default comparer for the key type.</param>
        </member>
        <member name="M:StardewValley.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Construct an instance.</summary>
            <param name="data">The data to copy.</param>
            <param name="comparer">The equality comparer to use when comparing keys, or null to use the default comparer for the key type.</param>
        </member>
        <member name="T:StardewValley.SerializableDictionaryWithCaseInsensitiveKeys`1">
            <summary>An implementation of <see cref="T:StardewValley.SerializableDictionary`2"/> that has case-insensitive keys.</summary>
            <typeparam name="TValue">The value type.</typeparam>
            <remarks>This avoids a limitation with <see cref="T:StardewValley.SerializableDictionary`2"/> where any custom comparer is lost on deserialization.</remarks>
        </member>
        <member name="M:StardewValley.SerializableDictionaryWithCaseInsensitiveKeys`1.#ctor">
            <summary>Construct an empty instance.</summary>
        </member>
        <member name="M:StardewValley.SerializableDictionaryWithCaseInsensitiveKeys`1.#ctor(System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>Construct an instance.</summary>
            <param name="data">The data to copy.</param>
        </member>
        <member name="M:StardewValley.MapSeat.CheckSeatOccupancyIfTemporaryMap(StardewValley.Farmer,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector2},System.Boolean[]@)">
            <summary>Manually check seat occupancy if we're in a non-synced temporary location (e.g. for an event or festival).</summary>
            <param name="who">The player for which to load seats.</param>
            <param name="seatPositions">The tile positions containing seats.</param>
            <param name="seatsFilled">The flags which indicate whether each available seat is occupied.</param>
        </member>
        <member name="T:StardewValley.ISoundBank">
            <summary>The game API for getting and playing sounds.</summary>
        </member>
        <member name="P:StardewValley.ISoundBank.IsInUse">
            <summary>Whether there are any live cues in use from this sound bank.</summary>
        </member>
        <member name="P:StardewValley.ISoundBank.IsDisposed">
            <summary>Whether the sound bank has been disposed.</summary>
        </member>
        <member name="M:StardewValley.ISoundBank.GetCue(System.String)">
            <summary>Get a cue representing a sound in the sound bank.</summary>
            <param name="name">The sound ID to get.</param>
            <remarks>Cue instances are unique, even when sharing the same name. This allows multiple instances to simultaneously play.</remarks>
        </member>
        <member name="M:StardewValley.ISoundBank.PlayCue(System.String)">
            <summary>Play a sound defined in the sound bank.</summary>
            <param name="name">The sound ID to play.</param>
        </member>
        <member name="M:StardewValley.ISoundBank.PlayCue(System.String,Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)">
            <summary>Plays a sound defined in the sound bank with static 3D positional information.</summary>
            <param name="name">The sound ID to play.</param>
            <param name="listener">The listener state.</param>
            <param name="emitter">The cue emitter state.</param>
        </member>
        <member name="M:StardewValley.ISoundBank.AddCue(Microsoft.Xna.Framework.Audio.CueDefinition)">
            <summary>Add a sound to the sound bank.</summary>
            <param name="definition">The sound definition to add.</param>
        </member>
        <member name="M:StardewValley.ISoundBank.Exists(System.String)">
            <summary>Get whether a given cue currently exists in the sound bank.</summary>
            <param name="name">The cue name to find.</param>
        </member>
        <member name="M:StardewValley.ISoundBank.GetCueDefinition(System.String)">
            <summary>Get the underlying definition for a sound in the sound bank.</summary>
            <param name="name">The sound ID to get.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> doesn't match a sound in the bank.</exception>
        </member>
        <member name="T:StardewValley.SoundBankWrapper">
            <summary>The default sound bank implementation which defers to MonoGame audio.</summary>
        </member>
        <member name="F:StardewValley.SoundBankWrapper.DefaultCueName">
            <summary>The audio cue name used when a non-existent audio cue is requested to avoid a game crash.</summary>
        </member>
        <member name="F:StardewValley.SoundBankWrapper.soundBank">
            <summary>The underlying MonoGame sound bank.</summary>
        </member>
        <member name="P:StardewValley.SoundBankWrapper.IsInUse">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.SoundBankWrapper.IsDisposed">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.SoundBankWrapper.#ctor(Microsoft.Xna.Framework.Audio.SoundBank)">
            <summary>Construct an instance.</summary>
            <param name="soundBank">The underlying MonoGame sound bank.</param>
        </member>
        <member name="M:StardewValley.SoundBankWrapper.GetCue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.SoundBankWrapper.PlayCue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.SoundBankWrapper.PlayCue(System.String,Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.SoundBankWrapper.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.SoundBankWrapper.AddCue(Microsoft.Xna.Framework.Audio.CueDefinition)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.SoundBankWrapper.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.SoundBankWrapper.GetCueDefinition(System.String)">
            <inheritdoc />
        </member>
        <member name="T:StardewValley.DummySoundBank">
            <summary>A sound bank implementation which does nothing, used when the game can't play audio.</summary>
        </member>
        <member name="F:StardewValley.DummySoundBank.DummyCue">
            <summary>An empty cue instance which does nothing.</summary>
        </member>
        <member name="P:StardewValley.DummySoundBank.IsInUse">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.DummySoundBank.IsDisposed">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.DummySoundBank.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.DummySoundBank.GetCue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.DummySoundBank.PlayCue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.DummySoundBank.PlayCue(System.String,Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.DummySoundBank.AddCue(Microsoft.Xna.Framework.Audio.CueDefinition)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.DummySoundBank.GetCueDefinition(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.DummySoundBank.Dispose">
            <summary>An empty cue instance which does nothing.</summary>
        </member>
        <member name="M:StardewValley.SpecialOrders.SpecialOrder.CanStartOrderNow(System.String,StardewValley.GameData.SpecialOrders.SpecialOrderData)">
            <summary>Get whether a special order is eligible to be started now by the player.</summary>
            <param name="orderId">The order ID in <c>Data/SpecialOrders</c>.</param>
            <param name="order">The special order data.</param>
        </member>
        <member name="M:StardewValley.SpecialOrders.SpecialOrder.GetData">
            <summary>Get the special order's data from <c>Data/SpecialOrders</c>, if found.</summary>
        </member>
        <member name="M:StardewValley.SpecialOrders.SpecialOrder.TryGetData(System.String,StardewValley.GameData.SpecialOrders.SpecialOrderData@)">
            <summary>Try to get a special order's data from <c>Data/SpecialOrders</c>.</summary>
            <param name="id">The special order ID (i.e. the key in <c>Data/SpecialOrders</c>).</param>
            <param name="data">The special order data, if found.</param>
            <returns>Returns whether the special order data was found.</returns>
        </member>
        <member name="F:StardewValley.Stats.specificMonstersKilled">
            <summary>The number of each monster type killed, prefixed by the monster's internal name.</summary>
        </member>
        <member name="F:StardewValley.Stats.Values">
            <summary>The numeric metrics tracked by the game.</summary>
            <remarks>Most code should use methods like <see cref="M:StardewValley.Stats.Get(System.String)"/> or <see cref="M:StardewValley.Stats.Set(System.String,System.UInt32)"/> instead of calling this directly.</remarks>
        </member>
        <member name="F:StardewValley.Stats.obsolete_stat_dictionary">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="F:StardewValley.Stats.Values"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_averageBedtime">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.AverageBedtime"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_beveragesMade">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.BeveragesMade"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_caveCarrotsFound">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.CaveCarrotsFound"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_cheeseMade">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.CheeseMade"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_chickenEggsLayed">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.ChickenEggsLayed"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_copperFound">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.CopperFound"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_cowMilkProduced">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.CowMilkProduced"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_cropsShipped">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.CropsShipped"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_daysPlayed">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.DaysPlayed"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_diamondsFound">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.DiamondsFound"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_dirtHoed">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.DirtHoed"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_duckEggsLayed">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.DuckEggsLayed"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_fishCaught">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.FishCaught"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_geodesCracked">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.GeodesCracked"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_giftsGiven">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.GiftsGiven"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_goatCheeseMade">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.GoatCheeseMade"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_goatMilkProduced">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.GoatMilkProduced"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_goldFound">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.GoldFound"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_goodFriends">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.GoodFriends"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_individualMoneyEarned">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.IndividualMoneyEarned"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_iridiumFound">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.IridiumFound"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_ironFound">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.IronFound"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_itemsCooked">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.ItemsCooked"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_itemsCrafted">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.ItemsCrafted"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_itemsForaged">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.ItemsForaged"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_itemsShipped">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.ItemsShipped"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_monstersKilled">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.MonstersKilled"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_mysticStonesCrushed">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.MysticStonesCrushed"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_notesFound">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.NotesFound"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_otherPreciousGemsFound">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.OtherPreciousGemsFound"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_piecesOfTrashRecycled">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.PiecesOfTrashRecycled"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_preservesMade">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.PreservesMade"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_prismaticShardsFound">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.PrismaticShardsFound"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_questsCompleted">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.QuestsCompleted"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_rabbitWoolProduced">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.RabbitWoolProduced"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_rocksCrushed">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.RocksCrushed"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_sheepWoolProduced">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.SheepWoolProduced"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_slimesKilled">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.SlimesKilled"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_stepsTaken">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.StepsTaken"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_stoneGathered">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.StoneGathered"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_stumpsChopped">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.StumpsChopped"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_timesFished">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.TimesFished"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_timesUnconscious">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.TimesUnconscious"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_totalMoneyGifted">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="F:StardewValley.Constants.StatKeys.TotalMoneyGifted"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_trufflesFound">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.TrufflesFound"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_weedsEliminated">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.WeedsEliminated"/> instead.</summary>
        </member>
        <member name="F:StardewValley.Stats.obsolete_seedsSown">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="P:StardewValley.Stats.SeedsSown"/> instead.</summary>
        </member>
        <member name="M:StardewValley.Stats.Get(System.String)">
            <summary>Get the value of a tracked stat.</summary>
            <param name="key">The unique stat key, usually matching a <see cref="T:StardewValley.Constants.StatKeys"/> field.</param>
        </member>
        <member name="M:StardewValley.Stats.Set(System.String,System.UInt32)">
            <summary>Set the value of a tracked stat.</summary>
            <param name="key">The unique stat key, usually matching a <see cref="T:StardewValley.Constants.StatKeys"/> field.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:StardewValley.Stats.Set(System.String,System.Int32)">
            <summary>Set the value of a tracked stat.</summary>
            <param name="key">The unique stat key, usually matching a <see cref="T:StardewValley.Constants.StatKeys"/> field.</param>
            <param name="value">The new value to set.</param>
            <remarks>The minimum stat value is zero. Setting a negative value is equivalent to setting zero.</remarks>
        </member>
        <member name="M:StardewValley.Stats.Decrement(System.String,System.UInt32)">
            <summary>Decrease the value of a tracked stat.</summary>
            <param name="key">The unique stat key, usually matching a <see cref="T:StardewValley.Constants.StatKeys"/> field.</param>
            <param name="amount">The amount by which to decrease the stat.</param>
            <remarks>The minimum stat value is zero. Decrementing past zero is equivalent to setting zero.</remarks>
        </member>
        <member name="M:StardewValley.Stats.Increment(System.String,System.UInt32)">
            <summary>Increase the value of a tracked stat.</summary>
            <param name="key">The unique stat key, usually matching a <see cref="T:StardewValley.Constants.StatKeys"/> field.</param>
            <param name="amount">The amount by which to increase the stat.</param>
            <returns>Returns the new stat value.</returns>
        </member>
        <member name="M:StardewValley.Stats.Increment(System.String,System.Int32)">
            <summary>Increase the value of a tracked stat.</summary>
            <param name="key">The unique stat key, usually matching a <see cref="T:StardewValley.Constants.StatKeys"/> field.</param>
            <param name="amount">The amount by which to increase the stat. If this is set to a negative value, the stat will be decremented instead (up to a minimum of zero).</param>
            <returns>Returns the new stat value.</returns>
        </member>
        <member name="M:StardewValley.Stats.monsterKilled(System.String)">
            <summary>Update the stats when a monster is killed.</summary>
            <param name="name">The monster's internal name.</param>
        </member>
        <member name="M:StardewValley.Stats.getMonstersKilled(System.String)">
            <summary>Get the number of a given monster type that the player has killed.</summary>
            <param name="name">The monster's internal name.</param>
        </member>
        <member name="T:StardewValley.StringBuilderFormatEx">
            <summary>
            StringBuilder extension methods for garbage free append and format of numeric types.
            </summary>
            <remarks>
            Based on the work of Gavin Pugh.
            http://www.gavpugh.com/2010/04/05/xnac-a-garbage-free-stringbuilder-format-method/
            </remarks>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendEx(System.Text.StringBuilder,System.UInt32,System.UInt32,System.Char,System.UInt32)">
            <summary>
            Convert an unsigned integer value to a string and concatenate into StringBuilder. Any base value allowed.
            </summary>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendEx(System.Text.StringBuilder,System.UInt32)">
            <summary>
            Convert an unsigned integer value to a string and concatenate into StringBuilder. Assumes no padding and base ten.        
            </summary>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendEx(System.Text.StringBuilder,System.UInt32,System.UInt32)">
            <summary>
            Convert an unsigned integer value to a string and concatenate into StringBuilder. Assumes base ten.
            </summary>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendEx(System.Text.StringBuilder,System.UInt32,System.UInt32,System.Char)">
            <summary>
            Convert an unsigned integer value to a string and concatenate into StringBuilder. Assumes base ten.
            </summary>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendEx(System.Text.StringBuilder,System.Int32,System.UInt32,System.Char,System.UInt32)">
            <summary>
            Converts a signed integer value to a string and concatenate into StringBuilder. Any base value allowed.
            </summary>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendEx(System.Text.StringBuilder,System.Int32)">
            <summary>
            Converts a signed integer value to a string and concatenate into StringBuilder. Assumes no padding and base ten.
            </summary>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendEx(System.Text.StringBuilder,System.Int32,System.UInt32)">
            <summary>
            Convert a signed integer value to a string and concatenate into StringBuilder. Assumes base ten.
            </summary>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendEx(System.Text.StringBuilder,System.Int32,System.UInt32,System.Char)">
            <summary>
            Convert a signed integer value to a string and concatenate into StringBuilder. Assumes base ten.
            </summary>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendEx(System.Text.StringBuilder,System.UInt64,System.UInt32,System.Char,System.UInt32)">
            <summary>
            Convert an unsigned long value to a string and concatenate into StringBuilder. Any base value allowed.
            </summary>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendEx(System.Text.StringBuilder,System.UInt64)">
            <summary>
            Convert an unsigned long value to a string and concatenate into StringBuilder. Assumes no padding and base ten.        
            </summary>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendEx(System.Text.StringBuilder,System.UInt64,System.UInt32)">
            <summary>
            Convert an unsigned long value to a string and concatenate into StringBuilder. Assumes base ten.
            </summary>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendEx(System.Text.StringBuilder,System.UInt64,System.UInt32,System.Char)">
            <summary>
            Convert an unsigned long value to a string and concatenate into StringBuilder. Assumes base ten.
            </summary>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendEx(System.Text.StringBuilder,System.Int64,System.UInt32,System.Char,System.UInt32)">
            <summary>
            Converts a signed long value to a string and concatenate into StringBuilder. Any base value allowed.
            </summary>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendEx(System.Text.StringBuilder,System.Int64)">
            <summary>
            Converts a signed long value to a string and concatenate into StringBuilder. Assumes no padding and base ten.
            </summary>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendEx(System.Text.StringBuilder,System.Int64,System.UInt32)">
            <summary>
            Convert a signed long value to a string and concatenate into StringBuilder. Assumes base ten.
            </summary>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendEx(System.Text.StringBuilder,System.Int64,System.UInt32,System.Char)">
            <summary>
            Convert a signed long value to a string and concatenate into StringBuilder. Assumes base ten.
            </summary>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendEx(System.Text.StringBuilder,System.Single,System.UInt32,System.UInt32,System.Char)">
            <summary>
            Convert a float value to a string and concatenate into StringBuilder.
            </summary>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendFormatEx(System.Text.StringBuilder,System.Single)">
            <summary>
            Convert a float value to a string and concatenate into StringBuilder. Assumes five decimal places, and no padding.
            </summary>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendFormatEx(System.Text.StringBuilder,System.Single,System.UInt32,System.UInt32)">
            <summary>
            Convert a float value to a string and concatenate into StringBuilder.
            </summary>
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendFormatEx``1(System.Text.StringBuilder,System.String,``0)">
            <summary>
            Concatenate a formatted string with arguments.
            </summary> 
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendFormatEx``2(System.Text.StringBuilder,System.String,``0,``1)">
            <summary>
            Concatenate a formatted string with arguments.
            </summary> 
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendFormatEx``3(System.Text.StringBuilder,System.String,``0,``1,``2)">
            <summary>
            Concatenate a formatted string with arguments.
            </summary> 
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendFormatEx``4(System.Text.StringBuilder,System.String,``0,``1,``2,``3)">
            <summary>
            Concatenate a formatted string with arguments.
            </summary> 
        </member>
        <member name="M:StardewValley.StringBuilderFormatEx.AppendFormatEx``5(System.Text.StringBuilder,System.String,``0,``1,``2,``3,``4)">
            <summary>
            Concatenate a formatted string with arguments.
            </summary>
        </member>
        <member name="M:StardewValley.TemporaryAnimatedSprite.#ctor(System.Int32,System.Single,System.Int32,System.Int32,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Boolean,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>Construct an instance for a bomb.</summary>
        </member>
        <member name="M:StardewValley.TemporaryAnimatedSprite.PlaySound(System.String)">
            <summary>Play a sound locally, preferring the parent location if possible.</summary>
            <param name="sound">The sound to play.</param>
        </member>
        <member name="F:StardewValley.TerrainFeatures.Bush.size">
            <summary>The type of bush, usually matching a constant like <see cref="F:StardewValley.TerrainFeatures.Bush.smallBush"/>.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.Bush.townBush">
            <summary>Whether this is a cosmetic bush which produces no berries.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.Bush.inPot">
            <summary>Whether this bush is planted in a garden pot.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Bush.IsSheltered">
            <summary>Whether this bush is in a greenhouse or indoor pot.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Bush.inBloom">
            <summary>Get whether this bush is in season to produce items, regardless of whether it has any currently.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Bush.GetShakeOffItem">
            <summary>Get the qualified or unqualified item ID to produce when the bush is shaken, assuming it's in bloom.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Bush.seasonUpdate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.TerrainFeatures.Flooring.GetData">
            <summary>Get the flooring or path's data from <see cref="F:StardewValley.Game1.floorPathData"/>, if found.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Flooring.TryGetData(System.String,StardewValley.GameData.FloorsAndPaths.FloorPathData@)">
            <summary>Try to get a flooring or path's data from <see cref="F:StardewValley.Game1.floorPathData"/>.</summary>
            <param name="id">The flooring or path type ID (i.e. the key in <see cref="F:StardewValley.Game1.floorPathData"/>).</param>
            <param name="data">The flooring or path data, if found.</param>
            <returns>Returns whether the flooring or path data was found.</returns>
        </member>
        <member name="F:StardewValley.TerrainFeatures.FruitTree.DefaultTextureName">
            <summary>The asset name for the default fruit tree tilesheet.</summary>
        </member>
        <member name="P:StardewValley.TerrainFeatures.FruitTree.textureName">
            <summary>The asset name loaded for <see cref="F:StardewValley.TerrainFeatures.FruitTree.texture"/>.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.FruitTree.texture">
            <summary>The texture from which to draw the tree sprites.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.FruitTree.obsolete_treeType">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="F:StardewValley.TerrainFeatures.FruitTree.treeId"/> instead.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.FruitTree.treeId">
            <summary>The unique identifier for the underlying fruit tree data.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.FruitTree.daysUntilMature">
            <summary>The number of days until the fruit tree becomes full-grown.</summary>
            <remarks>The fruit tree is a seed at <see cref="F:StardewValley.TerrainFeatures.FruitTree.DaysUntilMaturity"/> and becomes full-grown at 0 or below.</remarks>
        </member>
        <member name="F:StardewValley.TerrainFeatures.FruitTree.obsolete_fruitsOnTree">
            <summary>Obsolete. This is only kept to preserve data from old save files. Use <see cref="F:StardewValley.TerrainFeatures.FruitTree.fruit"/> instead.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.FruitTree.greenHouseTileTree">
            <summary>Whether the tree is planted on a stone tile in the greenhouse.</summary>
        </member>
        <member name="P:StardewValley.TerrainFeatures.FruitTree.GreenHouseTileTree">
            <inheritdoc cref="F:StardewValley.TerrainFeatures.FruitTree.greenHouseTileTree"/>
        </member>
        <member name="M:StardewValley.TerrainFeatures.FruitTree.IgnoresSeasonsHere">
            <summary>Get whether the tree is in a location which ignores seasons (like the greenhouse or Ginger Island).</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.FruitTree.GetQuality">
            <summary>Get the quality of fruit currently produced by the tree, matching one of the constants like <see cref="F:StardewValley.Object.highQuality"/>.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.FruitTree.GetData">
            <summary>Get the fruit tree's data from <see cref="F:StardewValley.Game1.fruitTreeData"/>, if found.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.FruitTree.TryGetData(System.String,StardewValley.GameData.FruitTrees.FruitTreeData@)">
            <summary>Try to get a fruit tree's data from <see cref="F:StardewValley.Game1.fruitTreeData"/>.</summary>
            <param name="id">The tree type ID (i.e. the key in <see cref="F:StardewValley.Game1.fruitTreeData"/>).</param>
            <param name="data">The fruit tree data, if found.</param>
            <returns>Returns whether the fruit tree data was found.</returns>
        </member>
        <member name="M:StardewValley.TerrainFeatures.FruitTree.GetDisplayName">
            <summary>Get the translated display name for this tree, like 'Cherry' or 'Mango'.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.FruitTree.GrowthStageToDaysUntilMature(System.Int32)">
            <summary>Get the maximum <see cref="F:StardewValley.TerrainFeatures.FruitTree.daysUntilMature"/> value which would match a given growth stage.</summary>
            <param name="growthStage">The growth stage (matching a constant like <see cref="F:StardewValley.TerrainFeatures.FruitTree.treeStage"/>).</param>
        </member>
        <member name="M:StardewValley.TerrainFeatures.FruitTree.DaysUntilMatureToGrowthStage(System.Int32)">
            <summary>Get the growth stage (matching a constant like <see cref="F:StardewValley.TerrainFeatures.FruitTree.treeStage"/>) for a given <see cref="F:StardewValley.TerrainFeatures.FruitTree.daysUntilMature"/> value.</summary>
            <param name="daysUntilMature">The <see cref="F:StardewValley.TerrainFeatures.FruitTree.daysUntilMature"/> value.</param>
        </member>
        <member name="M:StardewValley.TerrainFeatures.FruitTree.TryAddFruit">
            <summary>Try to add a fruit to the tree.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.FruitTree.TryCreateFruit(StardewValley.GameData.FruitTrees.FruitTreeFruitData)">
            <summary>Create a fruit item if its fields match.</summary>
            <param name="drop">The fruit data.</param>
            <returns>Returns the produced item (if any), else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.TerrainFeatures.FruitTree.IsWinterTreeHere">
            <summary>Get whether the fruit tree is in winter mode now (e.g. with no leaves).</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.FruitTree.IsInSeasonHere">
            <summary>Get whether the fruit tree can produce fruit now.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.FruitTree.seasonUpdate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.TerrainFeatures.GiantCrop.CacheByCropId">
            <summary>A cache of giant crops by small-crop-ID for <see cref="M:StardewValley.TerrainFeatures.GiantCrop.GetGiantCropsFor(System.String)"/>.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.GiantCrop.CacheTick">
            <summary>The <see cref="F:StardewValley.Game1.ticks"/> value when the <see cref="F:StardewValley.TerrainFeatures.GiantCrop.CacheByCropId"/> was last reset.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.GiantCrop.netId">
            <summary>The backing field for <see cref="P:StardewValley.TerrainFeatures.GiantCrop.Id"/>.</summary>
        </member>
        <member name="P:StardewValley.TerrainFeatures.GiantCrop.Id">
            <summary>A unique ID for this giant crop matching its entry in <c>Data/GiantCrops</c>.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.GiantCrop.#ctor">
            <summary>Construct an empty instance.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.GiantCrop.#ctor(System.String,Microsoft.Xna.Framework.Vector2)">
            <summary>Construct an instance.</summary>
            <param name="id">A unique ID for this giant crop matching its entry in <c>Data/GiantCrops</c>.</param>
            <param name="tile">The top-left tile position for the giant crop.</param>
        </member>
        <member name="M:StardewValley.TerrainFeatures.GiantCrop.GetData">
            <summary>Get the giant crop's data from <c>Data/GiantCrops</c>, if found.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.GiantCrop.TryGetData(System.String,StardewValley.GameData.GiantCrops.GiantCropData@)">
            <summary>Try to get a giant crop's data from <c>Data/GiantCrops</c>.</summary>
            <param name="id">The giant crop ID (i.e. the key in <c>Data/GiantCrops</c>).</param>
            <param name="data">The giant crop data, if found.</param>
            <returns>Returns whether the giant crop data was found.</returns>
        </member>
        <member name="M:StardewValley.TerrainFeatures.GiantCrop.GetGiantCropsFor(System.String)">
            <summary>Get the giant crops that can grow from a given crop ID.</summary>
            <param name="cropId">The qualified or unqualified item ID for the crop's harvest item.</param>
        </member>
        <member name="M:StardewValley.TerrainFeatures.GiantCrop.RebuildCropIdCacheIfNeeded(System.Boolean)">
            <summary>Rebuild the <see cref="F:StardewValley.TerrainFeatures.GiantCrop.CacheByCropId"/> cache, if it was generated before the current tick.</summary>
            <param name="forceRebuild">Whether to force rebuilding the cache even if it was generated in the current tick.</param>
            <returns>Returns whether the cache was rebuilt.</returns>
        </member>
        <member name="M:StardewValley.TerrainFeatures.GiantCrop.TryGetDrop(StardewValley.GameData.GiantCrops.GiantCropHarvestItemData,System.Random,StardewValley.Farmer,System.Boolean,System.Single)">
            <summary>Get a dropped item if its fields match.</summary>
            <param name="drop">The drop data.</param>
            <param name="r">The RNG to use for random checks.</param>
            <param name="targetFarmer">The player interacting with the giant crop.</param>
            <param name="isShaving">Whether the item is being dropped for the Shaving enchantment (true), instead of because the giant crop was broken (false).</param>
            <param name="healthDeducted">The health points deducted by the tool hit.</param>
            <returns>Returns the produced item (if any), else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.TerrainFeatures.GiantCrop.AdjustStackSizeWhenShaving(StardewValley.Item,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Single,System.Random)">
            <summary>Adjust the item's stack size for the scaled min/max values, if set.</summary>
            <param name="item">The item whose stack size to adjust.</param>
            <param name="min">The minimum stack size to apply, scaled to the <paramref name="healthDeducted"/>.</param>
            <param name="max">The maximum stack size to apply, scaled to the <paramref name="healthDeducted"/>.</param>
            <param name="healthDeducted">The health points deducted by the tool hit.</param>
            <param name="random">The RNG to use when randomizing the stack size.</param>
        </member>
        <member name="M:StardewValley.TerrainFeatures.GiantCrop.GetIdFromLegacySpriteIndex(System.Int32)">
            <summary>Get the giant crop ID which matches a pre-1.6 parent sheet index.</summary>
            <param name="spriteIndex">The parent sheet index.</param>
        </member>
        <member name="F:StardewValley.TerrainFeatures.Grass.grassSound">
            <summary>The backing field for <see cref="M:StardewValley.TerrainFeatures.Grass.PlayGrassSound"/>.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Grass.PlayGrassSound">
            <summary>Play the sound of walking through grass, if it's not already playing.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Grass.seasonUpdate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.TerrainFeatures.Grass.TryDropItemsOnCut(StardewValley.Tool,System.Boolean)">
            <summary>Drop an item when this grass is cut, if any.</summary>
            <param name="tool">The tool used to cut the grass.</param>
            <param name="addAnimation">Whether to show animations for the cut grass.</param>
        </member>
        <member name="F:StardewValley.TerrainFeatures.HoeDirt.fertilizer">
            <summary>The qualified or unqualified item ID of the fertilizer applied to this dirt, if any.</summary>
            <remarks>See also the helper methods like <see cref="M:StardewValley.TerrainFeatures.HoeDirt.HasFertilizer"/>, <see cref="M:StardewValley.TerrainFeatures.HoeDirt.CanApplyFertilizer(System.String)"/>, <see cref="M:StardewValley.TerrainFeatures.HoeDirt.GetFertilizerSpeedBoost"/>, etc.</remarks>
        </member>
        <member name="P:StardewValley.TerrainFeatures.HoeDirt.Location">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.TerrainFeatures.HoeDirt.Tile">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.TerrainFeatures.HoeDirt.needsWatering">
            <summary>Whether this dirt contains a crop which needs water to grow further. To check whether it is watered, see <see cref="M:StardewValley.TerrainFeatures.HoeDirt.isWatered"/>.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.HoeDirt.isWatered">
            <summary>Whether this dirt is watered.</summary>
            <remarks>See also <see cref="M:StardewValley.TerrainFeatures.HoeDirt.needsWatering"/>.</remarks>
        </member>
        <member name="M:StardewValley.TerrainFeatures.HoeDirt.hasPaddyCrop">
            <summary>Get whether this dirt contains a crop which should be planted near water.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.HoeDirt.paddyWaterCheck(System.Boolean)">
            <summary>Get whether this is a paddy crop planted near water, so it should be watered automatically.</summary>
            <param name="forceUpdate">Whether to recheck the surrounding map area instead of using the cached value.</param>
        </member>
        <member name="M:StardewValley.TerrainFeatures.HoeDirt.seasonUpdate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.TerrainFeatures.HoeDirt.HasFertilizer">
            <summary>Get whether the dirt has any fertilizer applied.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.HoeDirt.CanApplyFertilizer(System.String)">
            <summary>Get whether a player can apply the given fertilizer to this dirt.</summary>
            <param name="fertilizerId">The fertilizer item ID.</param>
        </member>
        <member name="M:StardewValley.TerrainFeatures.HoeDirt.CheckApplyFertilizerRules(System.String)">
            <summary>Get a status which indicates whether fertilizer can be applied to this dirt, and the reason it can't if applicable.</summary>
            <param name="fertilizerId">The fertilizer item ID.</param>
        </member>
        <member name="M:StardewValley.TerrainFeatures.HoeDirt.GetFertilizerSpeedBoost">
            <summary>Get the crop growth speed boost from fertilizers applied to this dirt.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.HoeDirt.GetFertilizerWaterRetentionChance">
            <summary>Get the water retention chance from fertilizers applied to this dirt, as a value between 0 (no change) and 1 (100% chance of staying watered).</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.HoeDirt.GetFertilizerQualityBoostLevel">
            <summary>Get the quality boost level from fertilizers applied to this dirt, which influences the chance of producing a higher-quality crop.</summary>
            <remarks>See <see cref="M:StardewValley.Crop.harvest(System.Int32,System.Int32,StardewValley.TerrainFeatures.HoeDirt,StardewValley.Characters.JunimoHarvester,System.Boolean)"/> for the quality boost logic.</remarks>
        </member>
        <member name="M:StardewValley.TerrainFeatures.HoeDirt.GetFertilizerSourceRect">
            <summary>Get the pixel area within the dirt spritesheet to draw for any fertilizer applied to this dirt.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.HoeDirt.OnNeighborAdded(System.Byte,System.Int32)">
            <summary>Called when a neighbor is added or changed.</summary>
            <param name="direction">The direction from this dirt to the one which changed.</param>
            <param name="neighborState">The water state for the neighbor which changed.</param>
        </member>
        <member name="M:StardewValley.TerrainFeatures.HoeDirt.OnNeighborRemoved(System.Byte)">
            <summary>Called when a neighbor is removed.</summary>
            <param name="direction">The direction from this dirt to the one which was removed.</param>
        </member>
        <member name="T:StardewValley.TerrainFeatures.HoeDirtFertilizerApplyStatus">
            <summary>Indicates whether fertilizer can be applied to a given <see cref="T:StardewValley.TerrainFeatures.HoeDirt"/> instance.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.HoeDirtFertilizerApplyStatus.Okay">
            <summary>The fertilizer can be applied.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.HoeDirtFertilizerApplyStatus.HasThisFertilizer">
            <summary>The fertilizer can't be applied because the dirt already has the same fertilizer.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.HoeDirtFertilizerApplyStatus.HasAnotherFertilizer">
            <summary>The fertilizer can't be applied because the dirt already has a different fertilizer.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.HoeDirtFertilizerApplyStatus.CropAlreadySprouted">
            <summary>The fertilizer can't be applied because the crop has already sprouted, and this fertilizer must be placed before that point.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.LargeTerrainFeature.netTilePosition">
            <summary>The backing field for <see cref="P:StardewValley.TerrainFeatures.LargeTerrainFeature.Tile"/>.</summary>
        </member>
        <member name="P:StardewValley.TerrainFeatures.LargeTerrainFeature.Tile">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.TerrainFeatures.ResourceClump.netTile">
            <summary>The backing field for <see cref="P:StardewValley.TerrainFeatures.ResourceClump.Tile"/>.</summary>
        </member>
        <member name="P:StardewValley.TerrainFeatures.ResourceClump.Tile">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.TerrainFeatures.TerrainFeature.Location">
            <summary>The location containing this terrain feature.</summary>
        </member>
        <member name="P:StardewValley.TerrainFeatures.TerrainFeature.Tile">
            <summary>The top-left tile coordinate containing this terrain feature.</summary>
        </member>
        <member name="P:StardewValley.TerrainFeatures.TerrainFeature.modData">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.TerrainFeatures.TerrainFeature.modDataForSerialization">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.TerrainFeatures.TerrainFeature.NeedsUpdate">
             <summary>Whether this terrain feature's <see cref="M:StardewValley.TerrainFeatures.TerrainFeature.tickUpdate(Microsoft.Xna.Framework.GameTime)"/> method should be called on each tick.</summary>
             <remarks>
               <para>This is different from <see cref="F:StardewValley.TerrainFeatures.TerrainFeature.NeedsTick"/>, which is implemented as part of <see cref="T:Netcode.INetObject`1"/>.</para>
            
               <para>In most cases, this should only be changed by the terrain feature itself, since disabling it may prevent logic like removal on destruction. For example, terrain features can set this to true when they need to be animated (e.g. shaken), and then set to false once the animation has completed.</para>
             </remarks>
        </member>
        <member name="M:StardewValley.TerrainFeatures.TerrainFeature.seasonUpdate(System.Boolean)">
            <summary>Update the terrain feature when the season changes.</summary>
            <param name="onLoad">Whether the season is being initialized as part of loading the save, instead of an actual in-game season change.</param>
            <returns>Returns <c>true</c> if the terrain feature should be removed, else <c>false</c>.</returns>
        </member>
        <member name="F:StardewValley.TerrainFeatures.Tree._WildTreeData">
            <remarks>The backing field for <see cref="M:StardewValley.TerrainFeatures.Tree.GetWildTreeDataDictionary"/>.</remarks>
        </member>
        <member name="F:StardewValley.TerrainFeatures.Tree._WildTreeSeedLookup">
            <summary>The backing field for <see cref="M:StardewValley.TerrainFeatures.Tree.GetWildTreeSeedLookup"/>.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.Tree.bushyTree">
            <summary>The oak tree type ID in <c>Data/WildTrees</c>.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.Tree.leafyTree">
            <summary>The maple tree type ID in <c>Data/WildTrees</c>.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.Tree.pineTree">
            <summary>The pine tree type ID in <c>Data/WildTrees</c>.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.Tree.palmTree">
            <summary>The palm tree type ID (valley variant) in <c>Data/WildTrees</c>.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.Tree.mushroomTree">
            <summary>The mushroom tree type ID in <c>Data/WildTrees</c>.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.Tree.mahoganyTree">
            <summary>The mahogany tree type ID in <c>Data/WildTrees</c>.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.Tree.palmTree2">
            <summary>The palm tree type ID (Ginger Island variant) in <c>Data/WildTrees</c>.</summary>
        </member>
        <member name="P:StardewValley.TerrainFeatures.Tree.TextureName">
            <summary>The asset name for the texture loaded by <see cref="F:StardewValley.TerrainFeatures.Tree.texture"/>, if applicable.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.Tree.texture">
            <summary>The texture for the displayed tree sprites.</summary>
        </member>
        <member name="F:StardewValley.TerrainFeatures.Tree.localSeason">
            <summary>The current season for the location containing the tree.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree.GetWildTreeDataDictionary">
            <summary>Get the wild tree data from <c>Data/WildTrees</c>.</summary>
            <remarks>This is a specialized method; most code should use <see cref="M:StardewValley.TerrainFeatures.Tree.GetData"/> or <see cref="M:StardewValley.TerrainFeatures.Tree.TryGetData(System.String,StardewValley.GameData.WildTrees.WildTreeData@)"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree.GetWildTreeSeedLookup">
            <summary>Get tree types indexed by their qualified and unqualified seed item IDs.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree._LoadWildTreeData">
            <summary>Load the raw wild tree data from <c>Data/WildTrees</c>.</summary>
            <remarks>This generally shouldn't be called directly; most code should use <see cref="M:StardewValley.TerrainFeatures.Tree.GetWildTreeDataDictionary"/> or <see cref="M:StardewValley.TerrainFeatures.Tree.GetWildTreeSeedLookup"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree.ResolveTreeTypeFromSeed(System.String)">
            <summary>Get the next tree that will sprout when planting a seed item.</summary>
            <param name="itemId">The seed's qualified or unqualified item ID.</param>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree.ClearCache">
            <summary>Reset the cached wild tree data, so it's reloaded on the next request.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree.CheckForNewTexture">
            <summary>Reload the tree texture based on <see cref="F:StardewValley.GameData.WildTrees.WildTreeData.Textures"/> if a different texture would be selected now.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree.resetTexture">
            <summary>Reset the tree texture, so it'll be reselected and reloaded next time it's accessed.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree.GetData">
            <summary>Get the tree's data from <c>Data/WildTrees</c>, if found.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree.TryGetData(System.String,StardewValley.GameData.WildTrees.WildTreeData@)">
            <summary>Try to get a tree's data from <c>Data/WildTrees</c>.</summary>
            <param name="id">The tree type ID (i.e. the key in <c>Data/WildTrees</c>).</param>
            <param name="data">The tree data, if found.</param>
            <returns>Returns whether the tree data was found.</returns>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree.ChooseTexture">
            <summary>Choose an applicable texture from <see cref="F:StardewValley.GameData.WildTrees.WildTreeData.Textures"/>.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree.TryGetDrop(StardewValley.GameData.WildTrees.WildTreeItemData,System.Random,StardewValley.Farmer,System.String,System.Func{System.String,System.String},System.Nullable{System.Boolean})">
            <summary>Get a dropped item if its fields match.</summary>
            <param name="drop">The drop data.</param>
            <param name="r">The RNG to use for random checks.</param>
            <param name="targetFarmer">The player interacting with the tree.</param>
            <param name="fieldName">The field name to show in error messages if the drop is invalid.</param>
            <param name="formatItemId">Format the selected item ID before it's resolved.</param>
            <param name="isStump">Whether the tree is a stump, or <c>null</c> to use <see cref="F:StardewValley.TerrainFeatures.Tree.stump"/>.</param>
            <returns>Returns the produced item (if any), else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree.GetMaxSizeHere(System.Boolean)">
            <summary>Get the maximum size the tree can grow in its current position.</summary>
            <param name="ignoreSeason">Whether to assume the tree is in-season.</param>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree.IsInSeason">
            <summary>Get whether this tree is in-season for its current location, so it can grow if applicable.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree.IsGrowthBlockedByNearbyTree">
            <summary>Get whether growth is blocked because it's too close to another fully-grown tree.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree.seasonUpdate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree.GetChopDebrisColor">
            <summary>Get the color of the cosmetic wood chips when chopping the tree.</summary>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree.GetChopDebrisColor(StardewValley.GameData.WildTrees.WildTreeData)">
            <summary>Get the color of the cosmetic wood chips when chopping the tree.</summary>
            <param name="data">The wild tree data to read.</param>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree.UpdateTapperProduct(StardewValley.Object,StardewValley.Object,System.Boolean)">
            <summary>Update the attached tapper's held output.</summary>
            <param name="tapper">The attached tapper instance.</param>
            <param name="previousOutput">The previous item produced by the tapper, if any.</param>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree.TryGetTapperOutput(System.Collections.Generic.List{StardewValley.GameData.WildTrees.WildTreeTapItemData},System.String,System.Random,System.Single,StardewValley.Object@,System.Int32@)">
            <summary>Get a valid item that can be produced by the tree's current tapper.</summary>
            <param name="tapItems">The tap item data to choose from.</param>
            <param name="previousItemId">The previous item ID that was produced.</param>
            <param name="r">The RNG with which to randomize.</param>
            <param name="timeMultiplier">A multiplier to apply to the minutes until ready.</param>
            <param name="output">The possible tapper output.</param>
            <param name="minutesUntilReady">The number of minutes until the tapper would produce the output.</param>
        </member>
        <member name="M:StardewValley.TerrainFeatures.Tree.setSeason">
            <summary>Update the tree's season for the location it's planted in.</summary>
        </member>
        <member name="T:StardewValley.TokenizableStrings.TokenParser">
            <summary>Parses text containing tokens like "<c>It's a nice [Season] day</c>" into the resulting display text.</summary>
        </member>
        <member name="F:StardewValley.TokenizableStrings.TokenParser.Parsers">
            <summary>The supported tokens and their resolvers.</summary>
        </member>
        <member name="F:StardewValley.TokenizableStrings.TokenParser.EscapedSpace">
            <summary>The character used to escape spaces in token arguments.</summary>
        </member>
        <member name="F:StardewValley.TokenizableStrings.TokenParser.EscapedEmpty">
            <summary>The character used to escape an empty argument.</summary>
        </member>
        <member name="F:StardewValley.TokenizableStrings.TokenParser.EscapedEmptyStr">
            <summary>The character used to escape an empty argument.</summary>
        </member>
        <member name="F:StardewValley.TokenizableStrings.TokenParser.StartTokenChar">
            <summary>The character used to start a token.</summary>
        </member>
        <member name="F:StardewValley.TokenizableStrings.TokenParser.EndTokenChar">
            <summary>The character used to end a token.</summary>
        </member>
        <member name="F:StardewValley.TokenizableStrings.TokenParser.HeuristicCharactersForEscapableStrings">
            <summary>The characters which, when present in a tokenizable string, indicate that the string should be wrapped in [EscapedText] when used as an argument.</summary>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.#cctor">
            <summary>Register the default game state queries, defined as <see cref="T:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers"/> methods.</summary>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.RegisterParser(System.String,StardewValley.TokenizableStrings.TokenParserDelegate)">
            <summary>Register a custom token parser.</summary>
            <param name="tokenKey">The token key. This should only contain alphanumeric, underscore, and dot characters. For custom queries, this should be prefixed with your mod ID like <c>Example.ModId_TokenName</c>.</param>
            <param name="parser">The parses which returns the text to use for a given token tag.</param>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.EscapeSpaces(System.String)">
            <summary>Escape spaces within a tokenized string so it can be passed as an argument to tokens. The characters will automatically be converted back into spaces when parsed.</summary>
            <param name="text">The text to modify.</param>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.ParseText(System.String,System.Random,StardewValley.TokenizableStrings.TokenParserDelegate,StardewValley.Farmer)">
            <summary>Parse text containing tokens like "<c>It's a nice [Season] day</c>" into the resulting display text.</summary>
            <param name="text">The text to parse.</param>
            <param name="random">The RNG to use for randomization, or <c>null</c> to use <see cref="F:StardewValley.Game1.random"/>.</param>
            <param name="customParser">A custom token parser which will be given an opportunity to parse each token first, if any.</param>
            <param name="player">The player to use for any player-related checks, or <c>null</c> to use <see cref="P:StardewValley.Game1.player"/>.</param>
            <returns>Returns the modified text.</returns>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.LogTokenError(System.String[],System.String,System.String@)">
            <summary>Log an error indicating that a token could not be parsed.</summary>
            <param name="query">The full token string split by spaces, including the token name.</param>
            <param name="error">The error indicating why parsing failed.</param>
            <param name="replacement">The replacement value to set.</param>
            <returns>Returns <c>false</c> for convenience.</returns>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.LogTokenError(System.String[],System.Exception,System.String@)">
            <summary>Log an error indicating that a token could not be parsed.</summary>
            <param name="query">The full token string split by spaces, including the token name.</param>
            <param name="error">The error indicating why parsing failed.</param>
            <param name="replacement">The replacement value to set.</param>
            <returns>Returns <c>false</c> for convenience.</returns>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.ParseTagStartingAt(System.String@,System.Int32,System.Random,StardewValley.TokenizableStrings.TokenParserDelegate,StardewValley.Farmer)">
            <summary>Parse a tag within a text starting at the given index.</summary>
            <param name="text">The full text being parsed.</param>
            <param name="startIndex">The index at which the token appears, including the <see cref="F:StardewValley.TokenizableStrings.TokenParser.StartTokenChar"/>.</param>
            <param name="random">The RNG to use for randomization.</param>
            <param name="customParser">A custom token parser which will be given an opportunity to parse each token first, if any.</param>
            <param name="player">The player to use for any player-related checks.</param>
            <returns>Returns the index within the <paramref name="text"/> at which to resume parsing.</returns>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.ParseTag(System.String,System.String@,System.Random,StardewValley.TokenizableStrings.TokenParserDelegate,StardewValley.Farmer)">
            <summary>Parse a tag substring within a text.</summary>
            <param name="tag">The token tag to parse, excluding the <see cref="F:StardewValley.TokenizableStrings.TokenParser.StartTokenChar"/> and <see cref="F:StardewValley.TokenizableStrings.TokenParser.EndTokenChar"/> characters.</param>
            <param name="replacement">The output string with which to replace the token within the text being parsed.</param>
            <param name="random">The RNG to use for randomization.</param>
            <param name="customParser">A custom token parser which will be given an opportunity to parse each token first, if any.</param>
            <param name="player">The player to use for any player-related checks.</param>
            <returns>Returns whether the tag was successfully parsed.</returns>
        </member>
        <member name="T:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers">
            <summary>The resolvers for vanilla token strings. Most code should call <see cref="M:StardewValley.TokenizableStrings.TokenParser.ParseText(System.String,System.Random,StardewValley.TokenizableStrings.TokenParserDelegate,StardewValley.Farmer)"/> instead of using these directly.</summary>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.AchievementName(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>The translated display name for an achievement ID.</summary>
            <remarks>For example, <c>[AchievementName 5]</c> will output something like "A Complete Collection".</remarks>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.ArticleFor(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>The grammatical article ('a' or 'an') for the given word when playing in English, else blank.</summary>
            <remarks>For example: <c>[ArticleFor apple]</c> will output <c>an</c>.</remarks>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.EscapedText(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>Replaces spaces in the given text with a special character that lets you pass them into other space-delimited tokens. The characters are automatically turned back into spaces when displayed.</summary>
            <remarks>For example: <c>[EscapedText Some arbitrary text]</c>.</remarks>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.GenderedText(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>Depending on the target player's gender, show either the male text or female text. To pass text containing spaces, wrap it in <c>EscapeText</c>.</summary>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.ItemName(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>The translated display name for a qualified item ID.</summary>
            <remarks>For example, <c>[ItemName (O)128]</c> returns a value like "Pufferfish".</remarks>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.LocalizedText(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>Translation text loaded from a string key. If the translation has placeholder tokens like {0}, you can add the values after the string key. To pass arguments containing spaces, wrap them in <c>EscapeText</c>.</summary>
            <remarks>For example: <c>[LocalizedText Strings\NPCNames:OldMariner]</c>.</remarks>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.MonsterName(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>The translated display name for a monster.</summary>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.MovieName(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>The translated title for a movie ID.</summary>
            <remarks>For example, <c>[MovieTitle spring_movie_0]</c> will output something like "The Brave Little Sapling".</remarks>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.NumberWithSeparators(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>Format a number with commas based on the current language.</summary>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.PositiveAdjective(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>A random adjective from the <c>Strings\Lexicon</c> data asset's <c>RandomPositiveAdjective_PlaceOrEvent</c> entry.</summary>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.SpecialOrderName(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>The translated display name for a special order ID.</summary>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.SpouseFarmerText(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>Show different text depending on whether the target player's spouse is a player (first argument) or NPC (second argument). To pass text containing spaces, wrap it in <c>EscapeText</c>.</summary>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.SpouseGenderedText(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>Equivalent to <see cref="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.GenderedText(System.String[],System.String@,System.Random,StardewValley.Farmer)"/>, but based on the gender of the player's NPC or player spouse.</summary>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.ToolName(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>The translated display name for a qualified tool ID.</summary>
            <remarks>For example, <c>[ToolName (T)IridiumAxe]</c> returns a value like "Iridium Axe".</remarks>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.DayOfMonth(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>The numeric day of month, like <c>5</c> on spring 5.</summary>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.Season(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>The current season name, like <c>spring</c>.</summary>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.CharacterName(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>The translated display name for an NPC, given their internal name.</summary>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.FarmName(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>The farm name for the current save (without the injected "Farm" text).</summary>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.FarmerUniqueId(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>The target player's unique internal multiplayer ID.</summary>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.LocationName(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>The translated display name for a location given its ID in <c>Data/Locations</c>.</summary>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.FarmerStat(System.String[],System.String@,System.Random,StardewValley.Farmer)">
            <summary>The value of a tracked player stat.</summary>
            <inheritdoc cref="T:StardewValley.TokenizableStrings.TokenParserDelegate"/>
        </member>
        <member name="T:StardewValley.TokenizableStrings.TokenParserDelegate">
            <summary>Provides the output for a token within a text parsed by <see cref="T:StardewValley.TokenizableStrings.TokenParser"/>.</summary>
            <param name="query">The full token string split by spaces, including the token name.</param>
            <param name="replacement">The output string with which to replace the token within the text being parsed.</param>
            <param name="random">The RNG to use for randomization.</param>
            <param name="player">The player to use for any player-related checks.</param>
            <returns>Returns whether the text was handled.</returns>
        </member>
        <member name="T:StardewValley.TokenizableStrings.TokenStringBuilder">
            <summary>Creates tokenized strings in the format recognized by <see cref="T:StardewValley.TokenizableStrings.TokenParser"/>.</summary>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenStringBuilder.EscapedText(System.String,System.Boolean)">
            <summary>Build a tokenized string which wraps the input in [EscapedText] if it contains spaces.</summary>
            <param name="value">The value to escape.</param>
            <param name="skipIfNotNeeded">Whether to keep the input as-is if it likely doesn't need to be escaped.</param>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenStringBuilder.AchievementName(System.Int32)">
            <summary>Build an <see cref="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.AchievementName(System.String[],System.String@,System.Random,StardewValley.Farmer)"/> token string.</summary>
            <param name="achievementId">The achievement ID.</param>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenStringBuilder.ArticleFor(System.String)">
            <summary>Build an <see cref="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.ArticleFor(System.String[],System.String@,System.Random,StardewValley.Farmer)"/> token string.</summary>
            <param name="tokenizedString">The translation key containing the asset name and entry key, like <c>Strings\Lexicon:Pronoun_Female</c>.</param>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenStringBuilder.ItemName(System.String,System.String)">
            <summary>Build an <see cref="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.ItemName(System.String[],System.String@,System.Random,StardewValley.Farmer)"/> token string.</summary>
            <param name="itemId">The qualified item ID.</param>
            <param name="fallbackText">The text to display if the item doesn't exist; defaults to "Error Item (id)".</param>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenStringBuilder.LocalizedText(System.String)">
            <summary>Build a <see cref="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.LocalizedText(System.String[],System.String@,System.Random,StardewValley.Farmer)"/> token string.</summary>
            <param name="translationKey">The translation key containing the asset name and entry key, like <c>Strings\Lexicon:Pronoun_Female</c>.</param>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenStringBuilder.MonsterName(System.String,System.String)">
            <summary>Build an <see cref="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.MonsterName(System.String[],System.String@,System.Random,StardewValley.Farmer)"/> token string.</summary>
            <param name="monsterId">The monster ID.</param>
            <param name="fallbackText">The text to display if a localized name isn't found in data; defaults to the monster ID.</param>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenStringBuilder.MovieName(System.String)">
            <summary>Build an <see cref="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.MovieName(System.String[],System.String@,System.Random,StardewValley.Farmer)"/> token string.</summary>
            <param name="movieId">The movie ID.</param>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenStringBuilder.NumberWithSeparators(System.Int32)">
            <summary>Build an <see cref="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.NumberWithSeparators(System.String[],System.String@,System.Random,StardewValley.Farmer)"/> token string.</summary>
            <param name="number">The number to format.</param>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenStringBuilder.SpecialOrderName(System.String)">
            <summary>Build an <see cref="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.SpecialOrderName(System.String[],System.String@,System.Random,StardewValley.Farmer)"/> token string.</summary>
            <param name="orderId">The special order ID.</param>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenStringBuilder.ToolName(System.String,System.Int32)">
            <summary>Build an <see cref="M:StardewValley.TokenizableStrings.TokenParser.DefaultResolvers.ToolName(System.String[],System.String@,System.Random,StardewValley.Farmer)"/> token string.</summary>
            <param name="itemId">The qualified tool ID.</param>
            <param name="upgradeLevel">The tool upgrade level.</param>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenStringBuilder.BuildTokenWithArgumentString(System.String,System.String)">
            <summary>Build a tokenized string in the form <c>[token [EscapedText argument]]</c>.</summary>
            <param name="tokenName">The literal token name, like <c>LocalizedText</c>.</param>
            <param name="argument">The tokenized string passed as an argument to the token.</param>
        </member>
        <member name="M:StardewValley.TokenizableStrings.TokenStringBuilder.BuildTokenWithArgumentString(System.String,System.String,System.String)">
            <summary>Build a tokenized string in the form <c>[token [EscapedText argument]]</c>.</summary>
            <param name="tokenName">The literal token name, like <c>LocalizedText</c>.</param>
            <param name="arg1">The tokenized string passed as the first argument to the token.</param>
            <param name="arg2">The tokenized string passed as the second argument to the token.</param>
        </member>
        <member name="M:StardewValley.Tools.Axe.initNetFields">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.Axe.MigrateLegacyItemId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.Axe.GetOneNew">
            <inheritdoc />
        </member>
        <member name="T:StardewValley.Tools.ErrorTool">
            <summary>A broken tool used when we can't create a specific tool type.</summary>
        </member>
        <member name="M:StardewValley.Tools.ErrorTool.GetOneNew">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Tools.FishingRod.BaitIndex">
            <summary>The index in <see cref="F:StardewValley.Tool.attachments"/> for equipped bait.</summary>
        </member>
        <member name="F:StardewValley.Tools.FishingRod.TackleIndex">
            <summary>The index in <see cref="F:StardewValley.Tool.attachments"/> for equipped tackle.</summary>
        </member>
        <member name="F:StardewValley.Tools.FishingRod.castDirection">
            <summary>The underlying field for <see cref="P:StardewValley.Tools.FishingRod.CastDirection" />.</summary>
        </member>
        <member name="P:StardewValley.Tools.FishingRod.CastDirection">
            <summary>The direction in which the fishing rod was cast.</summary>
        </member>
        <member name="F:StardewValley.Tools.FishingRod.lastWaterColor">
            <summary>The cached value for <see cref="M:StardewValley.Tools.FishingRod.GetWaterColor"/>.</summary>
        </member>
        <member name="F:StardewValley.Tools.FishingRod.setFlagOnCatch">
            <summary>The mail flag to set for the current player when the current <see cref="F:StardewValley.Tools.FishingRod.whichFish"/> is successfully caught.</summary>
        </member>
        <member name="F:StardewValley.Tools.FishingRod.recastTimerMs">
            <summary>The delay (in milliseconds) before recasting if the left mouse is held down after closing the 'caught fish' display.</summary>
        </member>
        <member name="M:StardewValley.Tools.FishingRod.MigrateLegacyItemId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.FishingRod.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.FishingRod.GetTackle">
            <summary>Get the equipped tackle, if any.</summary>
        </member>
        <member name="M:StardewValley.Tools.FishingRod.GetBait">
            <summary>Get the equipped bait, if any.</summary>
        </member>
        <member name="M:StardewValley.Tools.FishingRod.HasMagicBait">
            <summary>Whether the fishing rod has Magic Bait equipped.</summary>
        </member>
        <member name="M:StardewValley.Tools.FishingRod.HasCuriosityLure">
            <summary>Whether the fishing rod has a Curiosity Lure equipped.</summary>
        </member>
        <member name="M:StardewValley.Tools.FishingRod.GetAttachmentSlotSprite(System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D@,Microsoft.Xna.Framework.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.FishingRod.canThisBeAttached(StardewValley.Object,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.FishingRod.CanUseBait">
            <summary>Whether the fishing rod has a bait attachment slot.</summary>
        </member>
        <member name="M:StardewValley.Tools.FishingRod.CanUseTackle">
            <summary>Whether the fishing rod has a tackle attachment slot.</summary>
        </member>
        <member name="M:StardewValley.Tools.FishingRod.GetWaterColor">
            <summary>Get the color of the water which the bobber is submerged in.</summary>
        </member>
        <member name="M:StardewValley.Tools.FishingRod.CreateFish">
            <summary>Create a fish instance from the raw fields like <see cref="F:StardewValley.Tools.FishingRod.whichFish"/>.</summary>
        </member>
        <member name="T:StardewValley.Tools.GenericTool">
            <summary>A generic tool instance with no logic of its own, used for cases where the logic is applied elsewhere.</summary>
        </member>
        <member name="M:StardewValley.Tools.GenericTool.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.Hoe.MigrateLegacyItemId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.Hoe.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.Lantern.GetOneNew">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Tools.MeleeWeapon.appearance">
            <summary>The qualified item ID for the item whose appearance to use, or <c>null</c> to use the weapon's default appearance.</summary>
        </member>
        <member name="P:StardewValley.Tools.MeleeWeapon.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.MeleeWeapon.MigrateLegacyItemId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.MeleeWeapon.GetData">
            <summary>Get the weapon's data from <see cref="F:StardewValley.Game1.weaponData"/>, if found.</summary>
        </member>
        <member name="M:StardewValley.Tools.MeleeWeapon.TryGetData(System.String,StardewValley.GameData.Weapons.WeaponData@)">
            <summary>Try to get a weapon's data from <see cref="F:StardewValley.Game1.weaponData"/>.</summary>
            <param name="itemId">The weapon's unqualified item ID (i.e. the key in <see cref="F:StardewValley.Game1.weaponData"/>).</param>
            <param name="data">The weapon data, if found.</param>
            <returns>Returns whether the crop data was found.</returns>
        </member>
        <member name="M:StardewValley.Tools.MeleeWeapon.CanBeLostOnDeath">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.MeleeWeapon.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.MeleeWeapon.GetOneCopyFrom(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.MeleeWeapon.getCategoryName">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.MeleeWeapon.salePrice(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.MeleeWeapon.isScythe">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.MeleeWeapon.IsScythe(System.String)">
            <summary>Get whether an item ID matches a scythe tool.</summary>
            <param name="id">The item ID.</param>
        </member>
        <member name="M:StardewValley.Tools.MeleeWeapon.GetDrawnItemId">
            <summary>Get the qualified item ID to draw for this weapon.</summary>
        </member>
        <member name="M:StardewValley.Tools.MeleeWeapon.transform(System.String)">
            <summary>Convert this weapon to a new item ID. This reloads the weapon data but keeps any previous enchantments, mod data, etc.</summary>
            <param name="newItemId">The new unqualified item ID.</param>
        </member>
        <member name="F:StardewValley.Tools.MilkPail.animal">
            <summary>The farm animal the milk pail is being used on, if any.</summary>
        </member>
        <member name="M:StardewValley.Tools.MilkPail.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.Pan.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.Pickaxe.MigrateLegacyItemId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.Pickaxe.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.Pickaxe.GetOneCopyFrom(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.Raft.GetOneNew">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Tools.Shears.animal">
            <summary>The farm animal the shears are being used on, if any.</summary>
        </member>
        <member name="M:StardewValley.Tools.Shears.GetOneNew">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Tools.Slingshot.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.Slingshot.MigrateLegacyItemId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.Slingshot.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.Slingshot.GetAmmoDamage(StardewValley.Object)">
            <summary>Get the damage inflicted by shooting an ammunition item, excluding the slingshot upgrade level multiplier.</summary>
            <param name="ammunition">The item that was shot.</param>
        </member>
        <member name="M:StardewValley.Tools.Slingshot.GetAmmoCollisionSound(StardewValley.Object)">
            <summary>Get the sound to play when the ammunition item hits.</summary>
            <param name="ammunition">The item that was shot.</param>
        </member>
        <member name="M:StardewValley.Tools.Slingshot.GetAmmoCollisionBehavior(StardewValley.Object)">
            <summary>Get the logic to apply when the ammunition item hits.</summary>
            <param name="ammunition">The item that was shot.</param>
        </member>
        <member name="M:StardewValley.Tools.Slingshot.canThisBeAttached(StardewValley.Object,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.Slingshot.GetAttachmentSlotSprite(System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D@,Microsoft.Xna.Framework.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.Wand.MigrateLegacyItemId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.Wand.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.Wand.actionWhenPurchased(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.WateringCan.MigrateLegacyItemId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.WateringCan.GetOneNew">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tools.WateringCan.OnUpgradeLevelChanged">
            <summary>Update the tool state when <see cref="F:StardewValley.Tool.upgradeLevel"/> changes.</summary>
        </member>
        <member name="F:StardewValley.Tool.swingTicker">
            <summary>
            increments every swing. Not accurate for how many times the tool has been swung
            </summary>
        </member>
        <member name="F:StardewValley.Tool.lastUser">
            <summary>The last player who used this tool, if any.</summary>
            <remarks>Most code should use <see cref="M:StardewValley.Tool.getLastFarmerToUse"/> instead.</remarks>
        </member>
        <member name="P:StardewValley.Tool.TypeDefinitionId">
            <inheritdoc />
        </member>
        <member name="F:StardewValley.Tool.displayName">
            <summary>The cached value for <see cref="P:StardewValley.Tool.DisplayName"/>.</summary>
        </member>
        <member name="P:StardewValley.Tool.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:StardewValley.Tool.Name">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tool.SetSpriteIndex(System.Int32)">
            <summary>Set the single sprite index to display for this tool.</summary>
            <param name="spriteIndex">The sprite index.</param>
            <remarks>This overrides upgrade level adjustments, so this should be called before setting the upgrade level for tools that have a dynamic sprite index.</remarks>
        </member>
        <member name="M:StardewValley.Tool.MigrateLegacyItemId">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tool.CanBeLostOnDeath">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tool.getCategoryName">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tool.GetOneCopyFrom(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tool.UpgradeFrom(StardewValley.Tool)">
            <summary>Update this tool when it's created by upgrading a previous tool.</summary>
            <param name="other">The previous tool instance being upgraded into this tool.</param>
        </member>
        <member name="M:StardewValley.Tool.getCategoryColor">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tool.GetToolData">
            <summary>Get the underlying tool data from <c>Data/Tools</c>, if available.</summary>
        </member>
        <member name="M:StardewValley.Tool.DrawAttachmentSlot(System.Int32,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32,System.Int32)">
            <summary>Draw an attachment slot at the given position.</summary>
            <param name="slot">The attachment slot index.</param>
            <param name="b">The sprite batch being drawn.</param>
            <param name="x">The X position at which to draw the slot.</param>
            <param name="y">The Y position at which to draw the slot.</param>
            <remarks>This should draw a 64x64 slot.</remarks>
        </member>
        <member name="M:StardewValley.Tool.GetAttachmentSlotSprite(System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D@,Microsoft.Xna.Framework.Rectangle@)">
            <summary>Get the sprite to draw for an attachment slot background.</summary>
            <param name="slot">The attachment slot index.</param>
            <param name="texture">The texture to draw.</param>
            <param name="sourceRect">The pixel area within the texture to draw.</param>
        </member>
        <member name="M:StardewValley.Tool.isScythe">
            <summary>Get whether this is a scythe tool.</summary>
        </member>
        <member name="M:StardewValley.Tool.salePrice(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.Tool.getLastFarmerToUse">
            <summary>Get the last player who used this tool, if any.</summary>
        </member>
        <member name="M:StardewValley.Tool.canThisBeAttached(StardewValley.Object)">
            <summary>Get whether an item can be added to or removed from an attachment slot.</summary>
            <param name="o">The item to attach, or <c>null</c> to remove an attached item.</param>
        </member>
        <member name="M:StardewValley.Tool.canThisBeAttached(StardewValley.Object,System.Int32)">
            <summary>Get whether an item can be added to or removed from an attachment slot.</summary>
            <param name="o">The item to attach.</param>
            <param name="slot">The slot index. This is always a valid index when the method is called.</param>
        </member>
        <member name="M:StardewValley.Tool.attach(StardewValley.Object)">
            <summary>Add an item to or remove it from an attachment slot.</summary>
            <param name="o">The item to attach, or <c>null</c> to remove an attached item.</param>
        </member>
        <member name="M:StardewValley.Tool.actionWhenPurchased(System.String)">
            <inheritdoc />
        </member>
        <member name="T:StardewValley.Triggers.CachedAction">
            <summary>Parsed metadata for an action that can be triggered via data assets like <see cref="M:StardewValley.DataLoader.TriggerActions(StardewValley.LocalizedContentManager)"/>.</summary>
        </member>
        <member name="P:StardewValley.Triggers.CachedAction.Args">
            <summary>The space-delimited action string, including the action name.</summary>
        </member>
        <member name="P:StardewValley.Triggers.CachedAction.Handler">
            <summary>The handler which performs the action for the action specified by <see cref="P:StardewValley.Triggers.CachedAction.Args"/>.</summary>
        </member>
        <member name="P:StardewValley.Triggers.CachedAction.Error">
            <summary>An error phrase indicating why parsing the action failed (like 'unknown action X'), if applicable.</summary>
        </member>
        <member name="P:StardewValley.Triggers.CachedAction.IsNullHandler">
            <summary>Whether <see cref="P:StardewValley.Triggers.CachedAction.Handler"/> is the null handler which does nothing when called.</summary>
        </member>
        <member name="M:StardewValley.Triggers.CachedAction.#ctor(System.String[],StardewValley.Delegates.TriggerActionDelegate,System.String,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="args">The space-delimited action string, including the action name.</param>
            <param name="handler">The handler which performs the action for the action specified by <see cref="P:StardewValley.Triggers.CachedAction.Args"/>.</param>
            <param name="error">An error phrase indicating why parsing the action failed (like 'unknown action X'), if applicable.</param>
            <param name="isNullHandler">Whether <paramref name="handler"/> is the null handler which does nothing when called.</param>
        </member>
        <member name="T:StardewValley.Triggers.CachedTriggerAction">
            <summary>A cached, pre-parsed representation of a trigger action defined in <c>Data/TriggerActions</c>.</summary>
        </member>
        <member name="P:StardewValley.Triggers.CachedTriggerAction.Data">
            <summary>The original trigger action data from <c>Data/TriggerActions</c>.</summary>
        </member>
        <member name="P:StardewValley.Triggers.CachedTriggerAction.Actions">
            <summary>The validated actions to invoke.</summary>
        </member>
        <member name="P:StardewValley.Triggers.CachedTriggerAction.ActionStrings">
            <summary>The validated space-delimited action strings.</summary>
        </member>
        <member name="M:StardewValley.Triggers.CachedTriggerAction.#ctor(StardewValley.GameData.TriggerActionData,StardewValley.Triggers.CachedAction[])">
            <summary>Construct an instance.</summary>
            <param name="data">The original trigger action data from <c>Data/TriggerActions</c>.</param>
            <param name="actions">The validated actions to invoke.</param>
        </member>
        <member name="T:StardewValley.Triggers.TriggerActionManager">
            <summary>Manages trigger actions defined in the <c>Data/TriggerActions</c> asset, which perform actions when their conditions are met.</summary>
        </member>
        <member name="T:StardewValley.Triggers.TriggerActionManager.DefaultActions">
            <summary>The low-level trigger actions defined by the base game. Most code should use <see cref="T:StardewValley.Triggers.TriggerActionManager"/> methods instead.</summary>
            <remarks>Every method within this class is an action whose name matches the method name. All actions must be static, public, and match <see cref="T:StardewValley.Delegates.TriggerActionDelegate"/>.</remarks>
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.Null(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <summary>An action which does nothing.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.If(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <summary>Perform an action if a game state query matches, with an optional fallback action.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.AddBuff(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <summary>Apply a buff to the current player.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.RemoveBuff(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <summary>Remove a buff from the current player.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.AddMail(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.RemoveMail(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.AddQuest(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.RemoveQuest(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.AddSpecialOrder(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.RemoveSpecialOrder(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.AddItem(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.RemoveItem(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.AddMoney(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.AddFriendshipPoints(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.AddConversationTopic(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.RemoveConversationTopic(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.IncrementStat(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <summary>Increment or decrement a stats value for the current player.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.MarkActionApplied(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.MarkCookingRecipeKnown(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.MarkCraftingRecipeKnown(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.MarkEventSeen(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.MarkQuestionAnswered(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.MarkSongHeard(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.RemoveTemporaryAnimatedSprites(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <summary>Remove all temporary animated sprites in the current location.</summary>
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.SetNpcInvisible(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.DefaultActions.SetNpcVisible(System.String[],StardewValley.Delegates.TriggerActionContext,System.String@)">
            <inheritdoc cref="T:StardewValley.Delegates.TriggerActionDelegate" />
        </member>
        <member name="F:StardewValley.Triggers.TriggerActionManager.trigger_dayEnding">
            <summary>The trigger type raised overnight immediately before the game changes the date, sets up the new day, and saves.</summary>
        </member>
        <member name="F:StardewValley.Triggers.TriggerActionManager.trigger_dayStarted">
            <summary>The trigger type raised when the player starts a day, after either sleeping or loading.</summary>
        </member>
        <member name="F:StardewValley.Triggers.TriggerActionManager.trigger_locationChanged">
            <summary>The trigger type raised when the player arrives in a new location.</summary>
        </member>
        <member name="F:StardewValley.Triggers.TriggerActionManager.trigger_manual">
            <summary>The trigger type used for actions that are triggered elsewhere than <c>Data/TriggerActions</c>.</summary>
        </member>
        <member name="F:StardewValley.Triggers.TriggerActionManager.ValidTriggerTypes">
            <summary>The trigger types that can be used in the <see cref="F:StardewValley.GameData.TriggerActionData.Trigger"/> field.</summary>
        </member>
        <member name="F:StardewValley.Triggers.TriggerActionManager.ActionHandlers">
            <summary>The action handlers indexed by name.</summary>
            <remarks>Action names are case-insensitive.</remarks>
        </member>
        <member name="F:StardewValley.Triggers.TriggerActionManager.ActionsByTrigger">
            <summary>A cached lookup of actions by trigger name.</summary>
        </member>
        <member name="F:StardewValley.Triggers.TriggerActionManager.ActionCache">
            <summary>A cached lookup of parsed action strings.</summary>
        </member>
        <member name="F:StardewValley.Triggers.TriggerActionManager.NullAction">
            <summary>A parsed action which does nothing.</summary>
        </member>
        <member name="F:StardewValley.Triggers.TriggerActionManager.EmptyManualContext">
            <summary>The trigger action context used for a default manual option.</summary>
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.RegisterTrigger(System.String)">
            <summary>Register a trigger type.</summary>
            <param name="name">The trigger key. This is case-insensitive.</param>
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.RegisterAction(System.String,StardewValley.Delegates.TriggerActionDelegate)">
            <summary>Register an action handler.</summary>
            <param name="name">The action name. This is case-insensitive.</param>
            <param name="action">The handler to call when the action should apply.</param>
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.Raise(System.String,System.Object[],StardewValley.GameLocation,StardewValley.Farmer,StardewValley.Item,StardewValley.Item)">
            <summary>Run all actions for a given trigger key.</summary>
            <param name="trigger">The trigger key to raise.</param>
            <param name="triggerArgs">The contextual arguments provided with the trigger, if applicable. For example, an 'item received' trigger might provide the item instance and index.</param>
            <param name="location">The location for which to check action conditions, or <c>null</c> to use the current location.</param>
            <param name="player">The player for which to check action conditions, or <c>null</c> to use the current player.</param>
            <param name="targetItem">The target item (e.g. machine output or tree fruit) for which to check action conditions, or <c>null</c> if not applicable.</param>
            <param name="inputItem">The input item (e.g. machine input) for which to check action conditions, or <c>null</c> if not applicable.</param>
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.ParseAction(System.String)">
            <summary>Parse a raw action value.</summary>
            <param name="action">The action string to parse.</param>
            <remarks>This is a low-level method. Most code should use <see cref="M:StardewValley.Triggers.TriggerActionManager.TryRunAction(System.String,System.String@,System.Exception@)"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.TryValidateActionExists(System.String,System.String@)">
            <summary>Get whether an action matches an existing action.</summary>
            <param name="action">The action string to validate.</param>
            <param name="error">An error phrase indicating why parsing the action failed (like 'unknown action X'), if applicable.</param>
            <returns>Returns whether the action was parsed successfully and matches an existing command.</returns>
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.TryRunAction(System.String,System.String@,System.Exception@)">
            <summary>Run an action if it's valid.</summary>
            <param name="action">The action string to run.</param>
            <param name="error">An error phrase indicating why parsing or running the action failed (like 'unknown action X'), if applicable.</param>
            <param name="exception">An exception which accompanies <paramref name="error"/>, if applicable.</param>
            <returns>Returns whether the action was applied successfully (regardless of whether it did anything).</returns>
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.TryRunAction(System.String,System.String,System.Object[],System.String@,System.Exception@)">
            <summary>Run an action if it's valid.</summary>
            <param name="action">The action string to run.</param>
            <param name="trigger">The trigger key to raise.</param>
            <param name="triggerArgs">The contextual arguments provided with the trigger, if applicable. For example, an 'item received' trigger might provide the item instance and index.</param>
            <param name="error">An error phrase indicating why parsing or running the action failed (like 'unknown action X'), if applicable.</param>
            <param name="exception">An exception which accompanies <paramref name="error"/>, if applicable.</param>
            <returns>Returns whether the action was applied successfully (regardless of whether it did anything).</returns>
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.TryRunAction(StardewValley.Triggers.CachedAction,StardewValley.Delegates.TriggerActionContext,System.String@,System.Exception@)">
            <summary>Run an action if it's valid.</summary>
            <param name="action">The action to run.</param>
            <param name="context">The trigger action context.</param>
            <param name="error">An error phrase indicating why parsing or running the action failed (like 'unknown action X'), if applicable.</param>
            <param name="exception">An exception which accompanies <paramref name="error"/>, if applicable.</param>
            <returns>Returns whether the action was applied successfully (regardless of whether it did anything).</returns>
            <remarks>This is a low-level method. Most code should use <see cref="M:StardewValley.Triggers.TriggerActionManager.TryRunAction(System.String,System.String@,System.Exception@)"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.TryGetActionHandler(System.String,StardewValley.Delegates.TriggerActionDelegate@)">
            <summary>Get the handler for an action key, if any.</summary>
            <param name="key">The action key. This is case-insensitive.</param>
            <param name="handler">The action handler, if found.</param>
            <returns>Returns whether a handler was found for the action key.</returns>
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.GetActionsForTrigger(System.String)">
            <summary>Get the trigger actions in <c>Data/TriggerActions</c> registered for a given trigger, or an empty list if none are registered.</summary>
            <param name="trigger">The trigger key to raise.</param>
            <remarks>This is a low-level method. Most code should use <see cref="M:StardewValley.Triggers.TriggerActionManager.TryRunAction(System.String,System.String@,System.Exception@)"/> instead.</remarks>
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.CanApply(StardewValley.GameData.TriggerActionData,StardewValley.GameLocation,StardewValley.Farmer,StardewValley.Item,StardewValley.Item)">
            <summary>Get whether an action can be applied based on its conditions and whether it has already been run.</summary>
            <param name="action">The action to check.</param>
            <param name="location">The location for which to check action conditions, or <c>null</c> to use the current location.</param>
            <param name="player">The player for which to check action conditions, or <c>null</c> to use the current player.</param>
            <param name="targetItem">The target item (e.g. machine output or tree fruit) for which to check action conditions, or <c>null</c> if not applicable.</param>
            <param name="inputItem">The input item (e.g. machine input) for which to check action conditions, or <c>null</c> if not applicable.</param>
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.ResetDataCache">
            <summary>Rebuild the cached data from <c>Data/TriggerActions</c>.</summary>
        </member>
        <member name="M:StardewValley.Triggers.TriggerActionManager.InitializeIfNeeded">
            <summary>Register the vanilla event commands and preconditions if they haven't already been registered.</summary>
        </member>
        <member name="T:StardewValley.Utility">
            <summary>Provides general utility methods for the game code.</summary>
            <remarks>See also <see cref="T:StardewValley.ItemRegistry"/> for working with item IDs.</remarks>
        </member>
        <member name="M:StardewValley.Utility.GetHorseWarpRestrictionsForFarmer(StardewValley.Farmer)">
            <summary>Get the reasons a horse can't be summoned to the player currently, if any.</summary>
            <param name="who">The player requesting a horse.</param>
        </member>
        <member name="M:StardewValley.Utility.GetHorseWarpErrorMessage(StardewValley.Utility.HorseWarpRestrictions)">
            <summary>Get the error message to show for a warp issue returned by <see cref="M:StardewValley.Utility.GetHorseWarpRestrictionsForFarmer(StardewValley.Farmer)"/>.</summary>
            <param name="issue">The current issues preventing a warp, if any.</param>
            <returns>Returns the error message to display, or <c>null</c> if none apply.</returns>
        </member>
        <member name="T:StardewValley.Utility.HorseWarpRestrictions">
            <summary>Indicates the reasons a horse can't be summoned by a player.</summary>
        </member>
        <member name="F:StardewValley.Utility.HorseWarpRestrictions.None">
            <summary>No reasons apply.</summary>
        </member>
        <member name="F:StardewValley.Utility.HorseWarpRestrictions.NoOwnedHorse">
            <summary>The player doesn't own a horse.</summary>
        </member>
        <member name="F:StardewValley.Utility.HorseWarpRestrictions.Indoors">
            <summary>The player is indoors (horses can't be summoned to an indoors location).</summary>
        </member>
        <member name="F:StardewValley.Utility.HorseWarpRestrictions.NoRoom">
            <summary>There's no room near the player to place the horse.</summary>
        </member>
        <member name="F:StardewValley.Utility.HorseWarpRestrictions.InUse">
            <summary>The player's horse is currently in use by another player.</summary>
        </member>
        <member name="M:StardewValley.Utility.isFestivalDay">
            <summary>Get whether there's a festival scheduled for today in any location.</summary>
            <remarks>This doesn't match passive festivals like the Night Market; see <see cref="M:StardewValley.Utility.IsPassiveFestivalDay"/> for those.</remarks>
        </member>
        <member name="M:StardewValley.Utility.isFestivalDay(System.String)">
            <summary>Get whether there's a festival scheduled for today in the given location context.</summary>
            <param name="locationContext">The location context to check, usually matching a constant like <see cref="F:StardewValley.LocationContexts.DefaultId"/>, or <c>null</c> for any context.</param>
            <inheritdoc cref="M:StardewValley.Utility.isFestivalDay" path="/remarks" />
        </member>
        <member name="M:StardewValley.Utility.isFestivalDay(System.Int32,StardewValley.Season)">
            <summary>Get whether there's a festival scheduled on the given day in any location. This doesn't match passive festivals like the Night Market.</summary>
            <param name="day">The day of month to check.</param>
            <param name="season">The season key to check.</param>
            <inheritdoc cref="M:StardewValley.Utility.isFestivalDay" path="/remarks" />
        </member>
        <member name="M:StardewValley.Utility.isFestivalDay(System.Int32,StardewValley.Season,System.String)">
            <summary>Get whether there's a festival scheduled on the given day and in the given location context. This doesn't match passive festivals like the Night Market.</summary>
            <param name="day">The day of month to check.</param>
            <param name="season">The season key to check.</param>
            <param name="locationContext">The location context to check, usually matching a constant like <see cref="F:StardewValley.LocationContexts.DefaultId"/>, or <c>null</c> for any context.</param>
            <inheritdoc cref="M:StardewValley.Utility.isFestivalDay" path="/remarks" />
        </member>
        <member name="M:StardewValley.Utility.ForEachLocation(System.Func{StardewValley.GameLocation,System.Boolean},System.Boolean,System.Boolean)">
            <summary>Perform an action for each location in the game.</summary>
            <param name="action">The action to perform for each location. This should return true (continue iterating) or false (stop).</param>
            <param name="includeInteriors">Whether to include instanced building interiors that aren't in <see cref="P:StardewValley.Game1.locations"/> directly.</param>
            <param name="includeGenerated">Whether to include temporary generated locations like mine or volcano dungeon levels.</param>
        </member>
        <member name="M:StardewValley.Utility.ForEachBuilding(System.Func{StardewValley.Buildings.Building,System.Boolean},System.Boolean)">
            <summary>Perform an action for each building in the game.</summary>
            <param name="action">The action to perform for each building. This should return true (continue iterating) or false (stop).</param>
            <param name="ignoreUnderConstruction">Whether to ignore buildings which haven't been fully constructed yet.</param>
        </member>
        <member name="M:StardewValley.Utility.ForEachCharacter(System.Func{StardewValley.NPC,System.Boolean},System.Boolean)">
            <summary>Perform an action for each non-playable character in the game (including villagers, horses, pets, monsters, player children, etc).</summary>
            <param name="action">The action to perform for each character. This should return true (continue iterating) or false (stop).</param>
            <param name="includeEventActors">Whether to match temporary event actors.</param>
            <remarks>See also <see cref="M:StardewValley.Utility.ForEachVillager(System.Func{StardewValley.NPC,System.Boolean},System.Boolean)"/>.</remarks>
        </member>
        <member name="M:StardewValley.Utility.ForEachVillager(System.Func{StardewValley.NPC,System.Boolean},System.Boolean)">
            <summary>Perform an action for each villager NPC in the game.</summary>
            <param name="action">The action to perform for each character. This should return true (continue iterating) or false (stop).</param>
            <param name="includeEventActors">Whether to match temporary event actors.</param>
            <remarks>See also <see cref="M:StardewValley.Utility.ForEachCharacter(System.Func{StardewValley.NPC,System.Boolean},System.Boolean)"/>.</remarks>
        </member>
        <member name="M:StardewValley.Utility.ForEachBuilding``1(System.Func{``0,System.Boolean},System.Boolean)">
            <summary>Perform an action for each building in the game.</summary>
            <typeparam name="TBuilding">The expected building type.</typeparam>
            <param name="action">The action to perform for each building. This should return true (continue iterating) or false (stop).</param>
            <param name="ignoreUnderConstruction">Whether to ignore buildings which haven't been fully constructed yet.</param>
        </member>
        <member name="M:StardewValley.Utility.ForEachCrop(System.Func{StardewValley.Crop,System.Boolean})">
            <summary>Perform an action for each planted crop in the game.</summary>
            <param name="action">The action to perform for each crop. This should return true (continue iterating) or false (stop).</param>
        </member>
        <member name="M:StardewValley.Utility.ForEachItem(System.Func{StardewValley.Item,System.Boolean})">
            <summary>Perform an action for each item in the game world, including items within items (e.g. in a chest or on a table), hats placed on children, items in player inventories, etc.</summary>
            <param name="action">The action to perform for each item. This should return true (continue iterating) or false (stop).</param>
            <returns>Returns whether to continue iterating if needed (i.e. returns false if the last <paramref name="action"/> call did).</returns>
        </member>
        <member name="M:StardewValley.Utility.ForEachItem(StardewValley.Delegates.ForEachItemDelegate)">
            <summary>Perform an action for each item in the game world, including items within items (e.g. in a chest or on a table), hats placed on children, items in player inventories, etc.</summary>
            <param name="handler">The action to perform for each item.</param>
            <returns>Returns whether to continue iterating if needed (i.e. returns false if the last <paramref name="handler"/> call did).</returns>
        </member>
        <member name="M:StardewValley.Utility.ForEachItemIn(StardewValley.GameLocation,System.Func{StardewValley.Item,System.Boolean})">
            <summary>Perform an action for each item within a location, including items within items (e.g. in a chest or on a table), hats placed on children, items in player inventories, etc.</summary>
            <param name="location">The location whose items to iterate.</param>
            <param name="action">The action to perform for each item. This should return true (continue iterating) or false (stop).</param>
            <returns>Returns whether to continue iterating if needed (i.e. returns false if the last <paramref name="action"/> call did).</returns>
        </member>
        <member name="M:StardewValley.Utility.ForEachItemIn(StardewValley.GameLocation,StardewValley.Delegates.ForEachItemDelegate)">
            <summary>Perform an action for each item within a location, including items within items (e.g. in a chest or on a table), hats placed on children, items in player inventories, etc.</summary>
            <param name="location">The location whose items to iterate.</param>
            <param name="handler">The action to perform for each item.</param>
            <returns>Returns whether to continue iterating if needed (i.e. returns false if the last <paramref name="handler"/> call did).</returns>
        </member>
        <member name="M:StardewValley.Utility.TryParseEnum``1(System.String,``0@)">
            <summary>Try to parse a string as a valid enum value.</summary>
            <typeparam name="TEnum">The enum type.</typeparam>
            <param name="value">The raw value to parse. This is not case-sensitive.</param>
            <param name="parsed">The parsed enum value, if valid.</param>
            <returns>Returns whether the value was successfully parsed as an enum.</returns>
        </member>
        <member name="M:StardewValley.Utility.GetEnumOrDefault``1(``0,``0)">
            <summary>Get an enum value if it's valid, else get a default value.</summary>
            <typeparam name="TEnum">The enum type.</typeparam>
            <param name="value">The unvalidated enum value.</param>
            <param name="defaultValue">The value to return if invalid.</param>
            <returns>Returns <paramref name="value"/> if it matches one of the enum constants, else <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:StardewValley.Utility.TrimLines(System.String)">
            <summary>Trim whitespace at the start and end of each line in the given text.</summary>
            <param name="text">The text whose lines to trim.</param>
        </member>
        <member name="M:StardewValley.Utility.fuzzySearch(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>Find the best match for a search term based on fuzzy compare rules.</summary>
            <param name="query">The fuzzy search query to match.</param>
            <param name="terms">The terms from which to choose a match.</param>
            <returns>Returns the best match for the query, or <c>null</c> if no match was found.</returns>
        </member>
        <member name="M:StardewValley.Utility.fuzzyCompare(System.String,System.String)">
            <summary>Get whether a term is a fuzzy match for a search query.</summary>
            <param name="query">The fuzzy search query to match.</param>
            <param name="term">The actual value to compare against the query.</param>
            <returns>Returns the numeric match priority (where lower values are a better match), or <c>null</c> if the term doesn't match the query.</returns>
        </member>
        <member name="M:StardewValley.Utility.getDefaultWarpLocation(System.String,System.Int32@,System.Int32@)">
            <summary>Get the default tile position where the player should be placed when they arrive in a location, if arriving from a warp that didn't specify a tile position.</summary>
            <param name="locationName">The <see cref="P:StardewValley.GameLocation.Name"/> value for the target location.</param>
            <param name="x">The default X tile position.</param>
            <param name="y">The default Y tile position.</param>
        </member>
        <member name="M:StardewValley.Utility.makeSafe(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Return the adjusted renderPos such that bounds implied by renderSize
             is within the TitleSafeArea.
            
             If it already is, renderPos is returned unmodified.
             </summary>
        </member>
        <member name="M:StardewValley.Utility.CreateDaySaveRandom(System.Double,System.Double,System.Double)">
            <summary>Create a <see cref="T:System.Random"/> instance using the save ID and days played as a seed.</summary>
            <param name="seedA">The first extra value to add to the RNG seed, if any.</param>
            <param name="seedB">The second extra value to add to the RNG seed, if any.</param>
            <param name="seedC">The third extra value to add to the RNG seed, if any.</param>
        </member>
        <member name="M:StardewValley.Utility.TryCreateIntervalRandom(System.String,System.String,System.Random@,System.String@)">
            <summary>Get an RNG seeded with the same value when called within the specified period.</summary>
            <param name="interval">The time interval within which the random seed should be consistent.</param>
            <param name="key">A key which identifies the random instance being created, if any. Instances with a different key will have a different seed.</param>
            <param name="random">The created RNG, if valid.</param>
            <param name="error">An error indicating why the RNG could not be created, if applicable.</param>
            <returns>Returns whether the interval is valid and the RNG was created.</returns>
        </member>
        <member name="M:StardewValley.Utility.CreateRandom(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Create a <see cref="T:System.Random"/> instance which safely combines the given seed values.</summary>
            <param name="seedA">The first seed value to combine.</param>
            <param name="seedB">The second seed value to combine.</param>
            <param name="seedC">The third seed value to combine.</param>
            <param name="seedD">The fourth seed value to combine.</param>
            <param name="seedE">The fifth seed value to combine.</param>
        </member>
        <member name="M:StardewValley.Utility.CreateRandomSeed(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Safely combine seed values for use as a <see cref="T:System.Random"/> seed.</summary>
            <param name="seedA">The first seed value to combine.</param>
            <param name="seedB">The second seed value to combine.</param>
            <param name="seedC">The third seed value to combine.</param>
            <param name="seedD">The fourth seed value to combine.</param>
            <param name="seedE">The fifth seed value to combine.</param>
        </member>
        <member name="M:StardewValley.Utility.TryGetRandom``2(System.Collections.Generic.IDictionary{``0,``1},``0@,``1@,System.Random)">
            <summary>Get a random entry from a dictionary.</summary>
            <typeparam name="TKey">The dictionary key type.</typeparam>
            <typeparam name="TValue">The dictionary value type.</typeparam>
            <param name="dictionary">The list whose entries to get.</param>
            <param name="key">The random entry's key, if found.</param>
            <param name="value">The random entry's value, if found.</param>
            <param name="random">The RNG to use, or <c>null</c> for <see cref="F:StardewValley.Game1.random"/>.</param>
            <returns>Returns whether an entry was found.</returns>
        </member>
        <member name="M:StardewValley.Utility.TryGetRandom``5(Netcode.NetDictionary{``0,``1,``2,``3,``4},``0@,``1@,System.Random)">
            <inheritdoc cref="M:StardewValley.Utility.TryGetRandom``2(System.Collections.Generic.IDictionary{``0,``1},``0@,``1@,System.Random)" />
        </member>
        <member name="M:StardewValley.Utility.TryGetRandom(StardewValley.Network.OverlaidDictionary,Microsoft.Xna.Framework.Vector2@,StardewValley.Object@,System.Random)">
            <inheritdoc cref="M:StardewValley.Utility.TryGetRandom``2(System.Collections.Generic.IDictionary{``0,``1},``0@,``1@,System.Random)" />
        </member>
        <member name="M:StardewValley.Utility.TryGetRandomExcept``1(System.Collections.Generic.IList{``0},System.Collections.Generic.ISet{``0},System.Random,``0@)">
            <summary>Get a random entry from a list, ignoring specific values.</summary>
            <typeparam name="T">The list item type.</typeparam>
            <param name="list">The values to choose from.</param>
            <param name="except">The values to ignore in the <paramref name="list"/>.</param>
            <param name="random">The random number generator to use.</param>
            <param name="selected">The selected value.</param>
            <returns>Returns whether a value was selected.</returns>
        </member>
        <member name="M:StardewValley.Utility.getGiftFromNPC(StardewValley.NPC)">
            <summary>Get a random Winter Star gift which an NPC can give to players.</summary>
            <param name="who">The NPC giving the gift.</param>
        </member>
        <member name="M:StardewValley.Utility.getHighestSkill(StardewValley.Farmer)">
            <summary>Get which of a player's skills has the highest number of experience points.</summary>
            <param name="who">The player whose skills to check.</param>
        </member>
        <member name="M:StardewValley.Utility.getSeasonKey(StardewValley.Season)">
            <summary>Get the unique key for a season (one of <c>spring</c>, <c>summer</c>, <c>fall</c>, or <c>winter</c>).</summary>
            <param name="season">The season value.</param>
        </member>
        <member name="M:StardewValley.Utility.getPositionsInClusterAroundThisTile(Microsoft.Xna.Framework.Vector2,System.Int32)">
            <summary>
            uses Game1.random so this will not be the same each time it's called in the same context.
            </summary>
            <param name="startTile"></param>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:StardewValley.Utility.getWeddingEvent(StardewValley.Farmer)">
            <summary>Create a generated event to marry a player's current NPC or player spouse.</summary>
            <param name="farmer">The player getting married.</param>
        </member>
        <member name="M:StardewValley.Utility.DrawSquare(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Rectangle,System.Int32,System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>Draw a box to the screen.</summary>
            <param name="b">The sprite batch being drawn.</param>
            <param name="pixelArea">The pixel area of the box to draw.</param>
            <param name="borderWidth">The width of the border to draw.</param>
            <param name="borderColor">The color of the border to draw, or <c>null</c> for black.</param>
            <param name="backgroundColor">The background color to draw, or <c>null</c> for none.</param>
        </member>
        <member name="M:StardewValley.Utility.DrawErrorTexture(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Rectangle,System.Single)">
            <summary>Draw a missing-texture image to the screen.</summary>
            <param name="spriteBatch">The sprite batch being drawn.</param>
            <param name="screenArea">The pixel area within the <see cref="F:StardewValley.Game1.viewport"/> to cover with the error texture.</param>
            <param name="layerDepth">The layer depth at which to draw the error texture in the <paramref name="spriteBatch"/>.</param>
        </member>
        <member name="M:StardewValley.Utility.doesItemExistAnywhere(System.String)">
            <summary>Get whether an item exists anywhere in the world.</summary>
            <param name="itemId">The qualified or unqualified item ID.</param>
        </member>
        <member name="M:StardewValley.Utility.CalculateMinutesUntilMorning(System.Int32)">
            <summary>Get the number of minutes until 6am tomorrow.</summary>
            <param name="currentTime">The starting time of day, in 26-hour format.</param>
        </member>
        <member name="M:StardewValley.Utility.CalculateMinutesUntilMorning(System.Int32,System.Int32)">
            <summary>Get the number of minutes until 6am on a given day.</summary>
            <param name="currentTime">The starting time of day, in 26-hour format.</param>
            <param name="daysElapsed">The day offset (e.g. 1 for tomorrow).</param>
        </member>
        <member name="M:StardewValley.Utility.CalculateMinutesBetweenTimes(System.Int32,System.Int32)">
            <summary>Get the number of minutes between two times.</summary>
            <param name="startTime">The starting time of day, in 26-hour format.</param>
            <param name="endTime">The ending time of day, in 26-hour format.</param>
        </member>
        <member name="M:StardewValley.Utility.ModifyTime(System.Int32,System.Int32)">
            <summary>Apply a minute offset to a time of day.</summary>
            <param name="timestamp">The initial time of day, in 26-hour format.</param>
            <param name="minutes_to_add">The number of minutes to add to the time.</param>
        </member>
        <member name="M:StardewValley.Utility.ConvertMinutesToTime(System.Int32)">
            <summary>Get the time of day given the number of minutes since midnight.</summary>
            <param name="minutes">The number of minutes since midnight.</param>
        </member>
        <member name="M:StardewValley.Utility.ConvertTimeToMinutes(System.Int32)">
            <summary>Get the number of minutes since midnight for a time.</summary>
            <param name="time_stamp">The time of day, in 26-hour format.</param>
        </member>
        <member name="M:StardewValley.Utility.GetUnseenSecretNotes(StardewValley.Farmer,System.Boolean,System.Int32@)">
            <summary>Get a list of secret notes or journal scraps that have not been seen.</summary>
            <param name="who">The farmer to check for unseen secret notes or journal scraps.</param>
            <param name="journal">Whether to get journal scraps (true) or secret notes (false).</param>
            <param name="totalNotes">The total number of secret notes or journal scraps (depending on <paramref name="journal"/>), including seen ones.</param>
        </member>
        <member name="M:StardewValley.Utility.percentGameComplete">
            <summary>Get the overall perfection score for this save, accounting for all players.</summary>
            <remarks>See also <see cref="M:StardewValley.Game1.UpdateFarmPerfection"/> for the overnight changes if perfection was reached.</remarks>
            <returns>Returns a number between 0 (no perfection requirements met) and 1 (all requirements met).</returns>
        </member>
        <member name="M:StardewValley.Utility.GetObeliskTypesBuilt">
            <summary>Get the number of unique obelisk building types constructed anywhere in the world.</summary>
        </member>
        <member name="M:StardewValley.Utility.getQuestOfTheDay">
            <summary>Get the help-wanted quest to show on Pierre's bulletin board today, if any.</summary>
        </member>
        <member name="M:StardewValley.Utility.StringToColor(System.String)">
            <summary>Get a MonoGame color from a string representation.</summary>
            <param name="rawColor">The raw color value to parse. This can be a <see cref="T:Microsoft.Xna.Framework.Color"/> property name (like <c>SkyBlue</c>), RGB or RGBA hex code (like <c>#AABBCC</c> or <c>#AABBCCDD</c>), or 8-bit RGB or RGBA code (like <c>34 139 34</c> or <c>34 139 34 255</c>).</param>
            <returns>Returns the matching color (if any), else <c>null</c>.</returns>
        </member>
        <member name="M:StardewValley.Utility.getDateStringFor(System.Int32,System.Int32,System.Int32)">
            <summary>Get a translated display text for a calendar date.</summary>
            <param name="day">The calendar day of month.</param>
            <param name="season">The calendar season.</param>
            <param name="year">The calendar year.</param>
        </member>
        <member name="M:StardewValley.Utility.overnightLightning(System.Int32)">
            <summary>Apply overnight lightning strikes after the player goes to sleep.</summary>
            <param name="timeWentToSleep">The time of day when the player went to sleep, in 26-hour format.</param>
        </member>
        <member name="M:StardewValley.Utility.getItemFromStandardTextDescription(System.String,StardewValley.Farmer,System.Char)">
            <summary>
            "Standard" description is as follows:
            (Item type [Object (O), BigObject (BO), Weapon (W), Ring (R), Hat (H), Boot (B), Blueprint (BL), Big Object Blueprint(BBL)], follwed by item index, then stack amount)
            </summary>
            <returns>the described Item object</returns>
        </member>
        <member name="M:StardewValley.Utility.getItemFromStandardTextDescription(System.String,System.String,System.Int32,StardewValley.Farmer)">
            <summary>
            "Standard" description is as follows:
            (Item type [Object (O), BigObject (BO), Weapon (W), Ring (R), Hat (H), Boot (B), Blueprint (BL), Big Object Blueprint(BBL)], follwed by item index, then stack amount)
            </summary>
            <returns>the described Item object</returns>
        </member>
        <member name="M:StardewValley.Utility.GetJukeboxTracks(StardewValley.Farmer,StardewValley.GameLocation)">
            <summary>Get the cue names that can be played from a jukebox for the current player.</summary>
            <param name="player">The player for whom to get music.</param>
            <param name="location">The location for whom to get music.</param>
            <remarks>See also <see cref="M:StardewValley.Utility.getSongTitleFromCueName(System.String)"/>.</remarks>
        </member>
        <member name="M:StardewValley.Utility.IsValidTrackName(System.String)">
            <summary>Get whether an audio cue name is valid for the jukebox, regardless of whether it's disabled in <see cref="F:StardewValley.Game1.jukeboxTrackData"/>.</summary>
            <param name="name">The audio cue name to check.</param>
            <remarks>This only checks whether the cue *could* be played by the jukebox. To check whether it's actually available, see <see cref="M:StardewValley.Utility.GetJukeboxTracks(StardewValley.Farmer,StardewValley.GameLocation)"/>.</remarks>
        </member>
        <member name="M:StardewValley.Utility.getSongTitleFromCueName(System.String)">
            <summary>Get the jukebox display name for a cue name.</summary>
            <param name="cueName">The cue name being played.</param>
            <remarks>See also <see cref="M:StardewValley.Utility.GetJukeboxTracks(StardewValley.Farmer,StardewValley.GameLocation)"/>.</remarks>
        </member>
        <member name="M:StardewValley.Utility.TryOpenShopMenu(System.String,System.String,System.Boolean)">
            <summary>Open a menu to buy items from a shop, if it exists, using the specified NPC regardless of whether they're present.</summary>
            <param name="shopId">The shop ID matching the entry in <c>Data/Shops</c>.</param>
            <param name="ownerName">The internal name of the NPC running the shop, or <c>null</c> to open the shop with no NPC portrait/dialogue.</param>
            <param name="playOpenSound">Whether to play the open-menu sound.</param>
            <returns>Returns whether the shop menu was opened.</returns>
        </member>
        <member name="M:StardewValley.Utility.TryOpenShopMenu(System.String,StardewValley.GameLocation,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Action{System.String})">
            <summary>Open a menu to buy items from a shop, if it exists and an NPC who can run it is within the specified range.</summary>
            <param name="shopId">The shop ID matching the entry in <c>Data/Shops</c>.</param>
            <param name="location">The location in which to open the shop menu.</param>
            <param name="ownerArea">The tile area to search for an NPC who can run the shop (or <c>null</c> to search the entire location). If no NPC within the area matches the shop's <see cref="F:StardewValley.GameData.Shops.ShopData.Owners"/>, the shop won't be opened (unless <paramref name="forceOpen"/> is <c>true</c>).</param>
            <param name="maxOwnerY">The maximum Y tile position for an owner NPC, or <c>null</c> for no maximum. This is used for shops that only work if the NPC is behind the counter.</param>
            <param name="forceOpen">Whether to open the menu regardless of whether an owner NPC was found.</param>
            <param name="playOpenSound">Whether to play the open-menu sound.</param>
            <param name="showClosedMessage">Custom logic to handle the closed message if it shouldn't be shown directly.</param>
            <returns>Returns whether the shop menu was opened.</returns>
        </member>
        <member name="M:StardewValley.Utility.ApplyQuantityModifiers(System.Single,System.Collections.Generic.IList{StardewValley.GameData.QuantityModifier},StardewValley.GameData.QuantityModifier.QuantityModifierMode,StardewValley.GameLocation,StardewValley.Farmer,StardewValley.Item,StardewValley.Item,System.Random)">
            <summary>Apply a set of modifiers to a value.</summary>
            <param name="value">The base value to which to apply modifiers.</param>
            <param name="modifiers">The modifiers to apply.</param>
            <param name="mode">How multiple quantity modifiers should be combined.</param>
            <param name="location">The location for which to check queries, or <c>null</c> for the current location.</param>
            <param name="player">The player for which to check queries, or <c>null</c> for the current player.</param>
            <param name="targetItem">The target item (e.g. machine output or tree fruit) for which to check queries, or <c>null</c> if not applicable.</param>
            <param name="inputItem">The input item (e.g. machine input) for which to check queries, or <c>null</c> if not applicable.</param>
            <param name="random">The random number generator to use, or <c>null</c> for <see cref="F:StardewValley.Game1.random"/>.</param>
        </member>
        <member name="M:StardewValley.Utility.isGreenRainDay">
            <summary>Get whether there's green rain scheduled for today.</summary>
        </member>
        <member name="M:StardewValley.Utility.isGreenRainDay(System.Int32,StardewValley.Season)">
            <summary>Get whether there's green rain scheduled on the given day.</summary>
            <param name="day">The day of month to check.</param>
            <param name="season">The season key to check.</param>
        </member>
        <member name="M:StardewValley.Utility.GetNpcsWithinDistance(Microsoft.Xna.Framework.Vector2,System.Int32,StardewValley.GameLocation)">
            <summary>Get all NPCs within a given distance of a tile.</summary>
            <param name="centerTile">The tile location around which to find NPCs.</param>
            <param name="tilesAway">The maximum tile distance (including diagonal) within which to match NPCs.</param>
            <param name="location">The location to search.</param>
        </member>
        <member name="M:StardewValley.Utility.GetPlayersWithinDistance(Microsoft.Xna.Framework.Vector2,System.Int32,StardewValley.GameLocation)">
            <summary>Get all players within a given distance of a tile.</summary>
            <param name="centerTile">The tile location around which to find NPCs.</param>
            <param name="tilesAway">The maximum tile distance (including diagonal) within which to match NPCs.</param>
            <param name="location">The location to search.</param>
        </member>
        <member name="M:StardewValley.Utility.TryGetPassiveFestivalDataForDay(System.Int32,StardewValley.Season,System.String,System.String@,StardewValley.GameData.PassiveFestivalData@,System.Boolean)">
            <summary>Get the passive festival which is active on a given date.</summary>
            <param name="dayOfMonth">The day of month to check.</param>
            <param name="season">The season to check.</param>
            <param name="locationContextId">The location context to check, or <c>null</c> for any location context.</param>
            <param name="id">The passive festival ID, if found.</param>
            <param name="data">The passive festival data, if found.</param>
            <param name="ignoreConditionsCheck">Whether to ignore the custom passive festival conditions, if any.</param>
        </member>
        <member name="M:StardewValley.Utility.IsPassiveFestivalDay">
            <summary>Get whether there's a passive festival scheduled for today.</summary>
            <remarks>This doesn't match active festivals like the Flower Dance; see <see cref="M:StardewValley.Utility.isFestivalDay"/> for those.</remarks>
        </member>
        <member name="M:StardewValley.Utility.IsPassiveFestivalDay(System.Int32,StardewValley.Season,System.String)">
            <summary>Get whether there's a passive festival scheduled for the given day.</summary>
            <param name="day">The day of month to check.</param>
            <param name="season">The season to check.</param>
            <param name="locationContextId">The location context to check, or <c>null</c> for any location context.</param>
            <remarks>This doesn't match active festivals like the Flower Dance; see <see cref="M:StardewValley.Utility.isFestivalDay(System.Int32,StardewValley.Season)"/> for those.</remarks>
        </member>
        <member name="M:StardewValley.Utility.IsPassiveFestivalDay(System.String)">
            <summary>Get whether a given passive festival is scheduled for today.</summary>
            <param name="festivalId">The passive festival ID.</param>
            <remarks>This doesn't match active festivals like the Flower Dance; see <see cref="M:StardewValley.Utility.isFestivalDay"/> for those.</remarks>
        </member>
        <member name="M:StardewValley.Utility.getAllCharacters">
            <summary>Get all characters of any type (including villagers, horses, pets, monsters, player children, etc).</summary>
            <remarks>This creates a new list each time it's called, which is inefficient for hot paths. Consider using <see cref="M:StardewValley.Utility.ForEachCharacter(System.Func{StardewValley.NPC,System.Boolean},System.Boolean)"/> if you don't need an actual list (e.g. you just need to iterate them once).</remarks>
        </member>
        <member name="M:StardewValley.Utility.getAllVillagers">
            <summary>Get all villager NPCs (excluding horses, pets, monsters, player children, etc).</summary>
            <remarks>This creates a new list each time it's called, which is inefficient for hot paths. Consider using <see cref="M:StardewValley.Utility.ForEachVillager(System.Func{StardewValley.NPC,System.Boolean},System.Boolean)"/> if you don't need an actual list (e.g. you just need to iterate them once).</remarks>
        </member>
        <member name="M:StardewValley.Utility.PerformSpecialItemPlaceReplacement(StardewValley.Item)">
            <summary>Apply special conversion rules when equipping an item. For example, this is used to convert a Copper Pan tool into a hat.</summary>
            <param name="placedItem">The item being equipped.</param>
        </member>
        <member name="M:StardewValley.Utility.PerformSpecialItemGrabReplacement(StardewValley.Item)">
            <summary>Apply special conversion rules when un-equipping an item. For example, this is used to convert a Copper Pan hat back into a tool.</summary>
            <param name="placedItem">The item being equipped.</param>
        </member>
        <member name="M:StardewValley.Utility.iterateChestsAndStorage(System.Action{StardewValley.Item})">
            <summary>Perform an action for every item stored in chests or storage furniture, or placed on furniture.</summary>
            <param name="action">The action to perform.</param>
            <remarks>See also <see cref="M:StardewValley.Utility.ForEachItem(System.Func{StardewValley.Item,System.Boolean})"/> to iterate all items, regardless of where they are.</remarks>
        </member>
        <member name="M:StardewValley.Utility.getRandomTownNPC(System.Random)">
            <summary>Get a random available NPC listed in <c>Data/Characters</c> whose <see cref="F:StardewValley.GameData.Characters.CharacterData.HomeRegion"/> is <see cref="F:StardewValley.NPC.region_town"/>.</summary>
            <param name="random">The RNG with which to choose an NPC.</param>
            <remarks>See also <see cref="M:StardewValley.Utility.getRandomNpcFromHomeRegion(System.String,System.Random)"/>.</remarks>
        </member>
        <member name="M:StardewValley.Utility.getRandomNpcFromHomeRegion(System.String,System.Random)">
            <summary>Get a random available NPC listed in <c>Data/Characters</c> with a given <see cref="F:StardewValley.GameData.Characters.CharacterData.HomeRegion"/>.</summary>
            <param name="region">The region to match.</param>
            <param name="random">The RNG with which to choose an NPC.</param>
        </member>
        <member name="M:StardewValley.Utility.GetRandomWinterStarParticipant(System.Func{System.String,System.Boolean})">
            <summary>Get a random available NPC listed in <c>Data/Characters</c> which can give or receive gifts at the Feast of the Winter Star.</summary>
            <param name="ignoreNpc">Whether to exclude an NPC from the selection.</param>
        </member>
        <member name="M:StardewValley.Utility.GetRandomNpc(System.Func{System.String,StardewValley.GameData.Characters.CharacterData,System.Boolean},System.Random,System.Boolean)">
            <summary>Get a random available NPC listed in <c>Data/Characters</c>.</summary>
            <param name="match">A predicate matching the NPCs to include, or <c>null</c> to allow any valid match.</param>
            <param name="random">The RNG with which to choose an NPC.</param>
            <param name="mustBeSocial">Whether to only include NPCs whose <see cref="P:StardewValley.NPC.CanSocialize"/> property is true.</param>
        </member>
        <member name="M:StardewValley.Utility.getGrandpaScore">
             <summary>
             Can range from 0 to 21.
            
                if (points >= 12) 4
                 if (points >= 8) 3
               if (points >= 4)  2
                else 1
             those are the number of candles that will be light on grandpa's shrine.
             </summary>
             <returns></returns>
        </member>
        <member name="M:StardewValley.Utility.TryParseDirection(System.String,System.Int32@)">
            <summary>Parse a raw direction string into a number matching one of the constants like <see cref="F:StardewValley.Game1.up"/>.</summary>
            <param name="direction">The raw direction value. This can be a case-insensitive name (<c>up</c>, <c>down</c>, <c>left</c>, or <c>right</c>) or a numeric value matching a contant like <see cref="F:StardewValley.Game1.up"/>.</param>
            <param name="parsed">The parsed value matching a constant like <see cref="F:StardewValley.Game1.up"/>, or <c>-1</c> if not valid.</param>
            <returns>Returns whether the value was successfully parsed.</returns>
        </member>
        <member name="M:StardewValley.Utility.addItemToThisInventoryList(StardewValley.Item,System.Collections.Generic.IList{StardewValley.Item},System.Int32)">
            <summary>Add an item to an inventory list if there's room for it.</summary>
            <param name="i">The item to add.</param>
            <param name="list">The inventory list to add it to.</param>
            <param name="listMaxSpace">The maximum number of item slots allowed in the <paramref name="list"/>, or <c>-1</c> for no limit.</param>
            <returns>If the item was fully added to the inventory, returns <c>null</c>. Else returns the input item with its stack reduced to the amount that couldn't be added.</returns>
        </member>
        <member name="M:StardewValley.Utility.addItemToInventory(StardewValley.Item,System.Int32,System.Collections.Generic.IList{StardewValley.Item},StardewValley.Menus.ItemGrabMenu.behaviorOnItemSelect)">
            <summary>Add an item to an inventory list at a specific index position. If there's already an item at that position, the stacks are merged (if possible) else they're swapped.</summary>
            <param name="item">The item to add.</param>
            <param name="position">The index position within the list at which to add the item.</param>
            <param name="items">The inventory list to add it to.</param>
            <param name="onAddFunction">The callback to invoke when an item is added to the inventory.</param>
            <returns>If the item was fully added to the inventory, returns <c>null</c>. If it replaced an item stack previously at that position, returns the replaced item stack. Else returns the input item with its stack reduced to the amount that couldn't be added.</returns>
        </member>
        <member name="M:StardewValley.Utility.trySpawnRareObject(StardewValley.Farmer,Microsoft.Xna.Framework.Vector2,StardewValley.GameLocation,System.Double,System.Double,System.Int32,System.Random)">
            <summary>
            called on monster kill, breakable container open, tree chop, tree shake w/ seed, diggable spots. ChanceModifier is adjusted per each source to account for the frequency of source hits
            </summary>
        </member>
        <member name="M:StardewValley.Utility.toggleMuteMusic">
            <summary>
            return true if music becomes muted
            </summary>
            <returns></returns>
        </member>
        <member name="M:StardewValley.Utility.getHoursMinutesStringFromMilliseconds(System.UInt64)">
            <summary>Get a timestamp with hours and minutes from a milliseconds count, like <c>27:46</c> for 100,000,000 milliseconds.</summary>
            <param name="milliseconds">The number of milliseconds.</param>
        </member>
        <member name="M:StardewValley.Utility.getMinutesSecondsStringFromMilliseconds(System.Int32)">
            <summary>Get a timestamp with minutes and seconds from a milliseconds count, like <c>1:40</c> for 100,000 milliseconds.</summary>
            <param name="milliseconds">The number of milliseconds.</param>
        </member>
        <member name="M:StardewValley.Utility.distanceFromScreen(Microsoft.Xna.Framework.Vector2)">
            <summary>Get the pixel distance between a position in the world and the player's screen viewport, where 0 is within the viewport.</summary>
            <param name="pixelPosition">The pixel position.</param>
        </member>
        <member name="M:StardewValley.Utility.isOnScreen(Microsoft.Xna.Framework.Vector2,System.Int32)">
            <summary>Get whether a pixel position is within the current player's screen viewport.</summary>
            <param name="positionNonTile">The pixel position.</param>
            <param name="acceptableDistanceFromScreen">The maximum pixel distance outside the screen viewport to allow.</param>
        </member>
        <member name="M:StardewValley.Utility.isOnScreen(Microsoft.Xna.Framework.Point,System.Int32,StardewValley.GameLocation)">
            <summary>Get whether a tile position is within the current player's screen viewport.</summary>
            <param name="positionTile">The tile position.</param>
            <param name="acceptableDistanceFromScreenNonTile">The maximum tile distance outside the screen viewport to allow.</param>
            <param name="location">The location whose position to check.</param>
        </member>
        <member name="M:StardewValley.Utility.FilterUserName(System.String)">
            <summary>
            This is used to filter out special characters from user entered 
            names to avoid crashes and other bugs in Dialogue.cs parsing.
            
            The characters are replaced with spaces.
            </summary>
        </member>
        <member name="M:StardewValley.Utility.WrapIndex(System.Int32,System.Int32)">
            <summary>Constrain an index to a range by wrapping out-of-bounds values to the other side (e.g. last index + 1 is the first index).</summary>
            <param name="index">The index to constrain.</param>
            <param name="count">The number of values in the range.</param>
        </member>
        <member name="T:StardewValley.WorldDate">
            <summary>An in-game calendar date.</summary>
        </member>
        <member name="F:StardewValley.WorldDate.MonthsPerYear">
            <summary>The number of months in a year.</summary>
        </member>
        <member name="F:StardewValley.WorldDate.DaysPerMonth">
            <summary>The number of days per month.</summary>
        </member>
        <member name="F:StardewValley.WorldDate.DaysPerYear">
            <summary>The number of days per year.</summary>
        </member>
        <member name="F:StardewValley.WorldDate.year">
            <summary>The backing field for <see cref="P:StardewValley.WorldDate.Year"/>.</summary>
        </member>
        <member name="F:StardewValley.WorldDate.season">
            <summary>The backing field for <see cref="P:StardewValley.WorldDate.Season"/>.</summary>
        </member>
        <member name="F:StardewValley.WorldDate.dayOfMonth">
            <summary>The backing field for <see cref="P:StardewValley.WorldDate.DayOfMonth"/>.</summary>
        </member>
        <member name="P:StardewValley.WorldDate.Year">
            <summary>The calendar year.</summary>
        </member>
        <member name="P:StardewValley.WorldDate.SeasonIndex">
            <summary>The index of the calendar season (where 0 is spring, 1 is summer, 2 is fall, and 3 is winter).</summary>
        </member>
        <member name="P:StardewValley.WorldDate.DayOfMonth">
            <summary>The calendar day of month.</summary>
        </member>
        <member name="P:StardewValley.WorldDate.DayOfWeek">
            <summary>The day of week.</summary>
        </member>
        <member name="P:StardewValley.WorldDate.Season">
            <summary>The calendar season.</summary>
        </member>
        <member name="P:StardewValley.WorldDate.SeasonKey">
            <summary>The unique key for the calendar season (one of <c>spring</c>, <c>summer</c>, <c>fall</c>, or <c>winter</c>).</summary>
        </member>
        <member name="P:StardewValley.WorldDate.TotalDays">
            <summary>The number of days since the game began (starting at 1 for the first day of spring in Y1).</summary>
        </member>
        <member name="P:StardewValley.WorldDate.TotalWeeks">
            <summary>The number of weeks since the game began (starting at 1 for the first day of spring in Y1).</summary>
        </member>
        <member name="P:StardewValley.WorldDate.TotalSundayWeeks">
            <summary>The number of Sundays since the game began (starting at 1 for the first day of spring in Y1).</summary>
        </member>
        <member name="M:StardewValley.WorldDate.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewValley.WorldDate.#ctor(StardewValley.WorldDate)">
            <summary>Construct an instance.</summary>
            <param name="other">The date to copy.</param>
        </member>
        <member name="M:StardewValley.WorldDate.#ctor(System.Int32,StardewValley.Season,System.Int32)">
            <summary>Construct an instance.</summary>
            <param name="year">The calendar year.</param>
            <param name="season">The calendar season.</param>
            <param name="dayOfMonth">The calendar day of month.</param>
        </member>
        <member name="M:StardewValley.WorldDate.#ctor(System.Int32,System.String,System.Int32)">
            <summary>Construct an instance.</summary>
            <param name="year">The calendar year.</param>
            <param name="seasonKey">The unique key for the calendar season (one of <c>spring</c>, <c>summer</c>, <c>fall</c>, or <c>winter</c>).</param>
            <param name="dayOfMonth">The calendar day of month.</param>
        </member>
        <member name="M:StardewValley.WorldDate.Localize">
            <summary>Get a translated display text for the calendar date.</summary>
        </member>
        <member name="M:StardewValley.WorldDate.ToString">
            <summary>Get a non-translated string representation for debug purposes.</summary>
        </member>
        <member name="M:StardewValley.WorldDate.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.WorldDate.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:StardewValley.WorldDate.op_Equality(StardewValley.WorldDate,StardewValley.WorldDate)">
            <summary>Get whether two dates are equal.</summary>
            <param name="a">The first date to check.</param>
            <param name="b">The second date to check.</param>
        </member>
        <member name="M:StardewValley.WorldDate.op_Inequality(StardewValley.WorldDate,StardewValley.WorldDate)">
            <summary>Get whether two dates are not equal.</summary>
            <param name="a">The first date to check.</param>
            <param name="b">The second date to check.</param>
        </member>
        <member name="M:StardewValley.WorldDate.op_LessThan(StardewValley.WorldDate,StardewValley.WorldDate)">
            <summary>Get whether one date precedes another.</summary>
            <param name="a">The left date to check.</param>
            <param name="b">The right date to check.</param>
        </member>
        <member name="M:StardewValley.WorldDate.op_GreaterThan(StardewValley.WorldDate,StardewValley.WorldDate)">
            <summary>Get whether one date postdates another.</summary>
            <param name="a">The left date to check.</param>
            <param name="b">The right date to check.</param>
        </member>
        <member name="M:StardewValley.WorldDate.op_LessThanOrEqual(StardewValley.WorldDate,StardewValley.WorldDate)">
            <summary>Get whether one date precedes or is equal to another.</summary>
            <param name="a">The left date to check.</param>
            <param name="b">The right date to check.</param>
        </member>
        <member name="M:StardewValley.WorldDate.op_GreaterThanOrEqual(StardewValley.WorldDate,StardewValley.WorldDate)">
            <summary>Get whether one date postdates or is equal to another.</summary>
            <param name="a">The left date to check.</param>
            <param name="b">The right date to check.</param>
        </member>
        <member name="M:StardewValley.WorldDate.GetDayOfWeekFor(System.Int32)">
            <summary>Get the day of week for a day number.</summary>
            <param name="dayOfMonth">The day of month, between 1 and 28.</param>
        </member>
        <member name="M:StardewValley.WorldDate.Now">
            <summary>Get the current in-game date.</summary>
        </member>
        <member name="M:StardewValley.WorldDate.ForDaysPlayed(System.Int32)">
            <summary>Get the in-game date for a number of days played.</summary>
            <param name="daysPlayed">The number of days since the game began (starting at 1 for the first day of spring in Y1).</param>
        </member>
        <member name="M:StardewValley.WorldDate.TryGetDayOfWeekFor(System.String,System.DayOfWeek@)">
            <summary>Get the day of week from a string value, if valid.</summary>
            <param name="day">The numeric day of month (between 1 and 28), short English day name (like 'Mon'), or full English day name (like 'Monday').</param>
            <param name="dayOfWeek">The parsed day of week, if valid.</param>
            <returns>Returns whether the day of week was successfully parsed.</returns>
        </member>
        <member name="T:StardewValley.WorldMaps.MapArea">
            <summary>A smaller section of the map which is linked to one or more in-game locations. The map area might be edited/swapped depending on the context, have its own tooltip(s), or have its own player marker positions.</summary>
        </member>
        <member name="F:StardewValley.WorldMaps.MapArea.CachedTextures">
            <summary>The cached value for <see cref="M:StardewValley.WorldMaps.MapArea.GetTextures"/>.</summary>
        </member>
        <member name="F:StardewValley.WorldMaps.MapArea.CachedTooltips">
            <summary>The cached value for <see cref="M:StardewValley.WorldMaps.MapArea.GetTooltips"/>.</summary>
        </member>
        <member name="F:StardewValley.WorldMaps.MapArea.CachedWorldPositions">
            <summary>The cached value for <see cref="M:StardewValley.WorldMaps.MapArea.GetWorldPositions"/>.</summary>
        </member>
        <member name="F:StardewValley.WorldMaps.MapArea.CachedScrollText">
            <summary>The cached value for <see cref="M:StardewValley.WorldMaps.MapArea.GetScrollText"/>.</summary>
        </member>
        <member name="P:StardewValley.WorldMaps.MapArea.Id">
            <summary>The unique identifier for the area.</summary>
        </member>
        <member name="P:StardewValley.WorldMaps.MapArea.Region">
            <summary>The large-scale part of the world (like the Valley) which contains this area.</summary>
        </member>
        <member name="P:StardewValley.WorldMaps.MapArea.Data">
            <summary>The underlying data.</summary>
        </member>
        <member name="M:StardewValley.WorldMaps.MapArea.#ctor(StardewValley.WorldMaps.MapRegion,StardewValley.GameData.WorldMaps.WorldMapAreaData)">
            <summary>Construct an instance.</summary>
            <param name="region">The large-scale part of the world (like the Valley) which contains this area.</param>
            <param name="data">The underlying data.</param>
        </member>
        <member name="M:StardewValley.WorldMaps.MapArea.GetTextures">
            <summary>Get the textures to draw onto the map (adjusted for pixel zoom), if any.</summary>
        </member>
        <member name="M:StardewValley.WorldMaps.MapArea.GetTooltips">
            <summary>Get the tooltips to draw onto the map, if any.</summary>
        </member>
        <member name="M:StardewValley.WorldMaps.MapArea.GetWorldPositions">
            <summary>Get all valid world positions in this area.</summary>
        </member>
        <member name="M:StardewValley.WorldMaps.MapArea.GetWorldPosition(System.String,System.String,Microsoft.Xna.Framework.Point)">
            <summary>Get a valid world position matching the given values, if any.</summary>
            <param name="locationName">The location name containing the tile.</param>
            <param name="contextName">The location's context name.</param>
            <param name="tile">The tile coordinate to match.</param>
        </member>
        <member name="M:StardewValley.WorldMaps.MapArea.GetScrollText">
            <summary>Get the translated tooltip text to display when hovering the cursor over the map area.</summary>
        </member>
        <member name="M:StardewValley.WorldMaps.MapArea.GetTexture(System.String)">
            <summary>Get the texture to load for an asset name.</summary>
            <param name="assetName">The asset name to load.</param>
        </member>
        <member name="T:StardewValley.WorldMaps.MapAreaPosition">
            <summary>Maps in-game locations and tile positions to the parent <see cref="T:StardewValley.WorldMaps.MapArea"/>.</summary>
        </member>
        <member name="F:StardewValley.WorldMaps.MapAreaPosition.CachedMapPixelArea">
            <summary>The cached map pixel area for <see cref="M:StardewValley.WorldMaps.MapAreaPosition.GetMapPixelPosition(StardewValley.GameLocation,Microsoft.Xna.Framework.Point)"/>, adjusted for zoom.</summary>
        </member>
        <member name="F:StardewValley.WorldMaps.MapAreaPosition.CachedScrollText">
            <summary>The cached value for <see cref="M:StardewValley.WorldMaps.MapAreaPosition.GetScrollText(Microsoft.Xna.Framework.Point)"/>.</summary>
        </member>
        <member name="F:StardewValley.WorldMaps.MapAreaPosition.IsFixedMapPosition">
            <summary>Whether this is mapped to a fixed pixel coordinate on the map.</summary>
        </member>
        <member name="P:StardewValley.WorldMaps.MapAreaPosition.Region">
            <summary>The map region which contains this position.</summary>
        </member>
        <member name="P:StardewValley.WorldMaps.MapAreaPosition.Area">
            <summary>The map area which contains this position.</summary>
        </member>
        <member name="P:StardewValley.WorldMaps.MapAreaPosition.Data">
            <summary>The underlying map position data.</summary>
        </member>
        <member name="M:StardewValley.WorldMaps.MapAreaPosition.#ctor(StardewValley.WorldMaps.MapArea,StardewValley.GameData.WorldMaps.WorldMapAreaPositionData)">
            <summary>Construct an instance.</summary>
            <param name="mapArea">The map area which contains this position.</param>
            <param name="data">The underlying map position data.</param>
        </member>
        <member name="M:StardewValley.WorldMaps.MapAreaPosition.Matches(System.String,System.String,Microsoft.Xna.Framework.Point)">
            <summary>Get whether this position matches the given values.</summary>
            <param name="locationName">The location name containing the tile.</param>
            <param name="contextName">The location's context name.</param>
            <param name="tile">The tile coordinate to match.</param>
        </member>
        <member name="M:StardewValley.WorldMaps.MapAreaPosition.GetPixelArea">
            <summary>Get the pixel area covered by this position, adjusted for pixel zoom.</summary>
        </member>
        <member name="M:StardewValley.WorldMaps.MapAreaPosition.GetMapPixelPosition(StardewValley.GameLocation,Microsoft.Xna.Framework.Point)">
            <summary>Get the pixel position within the world map which corresponds to an in-game location's tile within the map area, adjusted for pixel zoom.</summary>
            <param name="location">The in-game location containing the tile.</param>
            <param name="tileLocation">The tile position within the location.</param>
        </member>
        <member name="M:StardewValley.WorldMaps.MapAreaPosition.GetScrollText(Microsoft.Xna.Framework.Point)">
            <summary>Get the translated display name to show when the player is in this position.</summary>
            <param name="playerTile">The player's tile position within the position.</param>
        </member>
        <member name="M:StardewValley.WorldMaps.MapAreaPosition.GetPositionRatioIfValid(StardewValley.GameLocation,Microsoft.Xna.Framework.Point)">
            <summary>Get the player's position as a percentage along the X and Y axes.</summary>
            <param name="location">The in-game location containing the tile.</param>
            <param name="tile">The tile position within the location.</param>
        </member>
        <member name="M:StardewValley.WorldMaps.MapAreaPosition.IsTileWithinZone(Microsoft.Xna.Framework.Point)">
            <summary>Get whether a tile position is within the bounds of this position data.</summary>
            <param name="tile">The tile position within the location.</param>
        </member>
        <member name="P:StardewValley.WorldMaps.MapAreaTexture.Texture">
            <summary>The texture to draw when the area is applied to the map.</summary>
        </member>
        <member name="P:StardewValley.WorldMaps.MapAreaTexture.SourceRect">
            <summary>The pixel area within the <see cref="P:StardewValley.WorldMaps.MapAreaTexture.Texture"/> to draw.</summary>
        </member>
        <member name="P:StardewValley.WorldMaps.MapAreaTexture.MapPixelArea">
            <summary>The pixel area within the map area to draw the texture to, adjusted for <see cref="F:StardewValley.Game1.pixelZoom"/>.</summary>
        </member>
        <member name="M:StardewValley.WorldMaps.MapAreaTexture.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
            <summary>Construct an instance.</summary>
            <param name="texture">The texture to draw when the area is applied to the map.</param>
            <param name="sourceRect">The pixel area within the <paramref name="texture"/> to draw.</param>
            <param name="mapPixelArea">The pixel area within the map area to draw the texture to, adjusted for <see cref="F:StardewValley.Game1.pixelZoom"/>.</param>
        </member>
        <member name="M:StardewValley.WorldMaps.MapAreaTexture.GetOffsetMapPixelArea(System.Int32,System.Int32)">
            <summary>Get the <see cref="P:StardewValley.WorldMaps.MapAreaTexture.MapPixelArea"/> offset for the given map position.</summary>
            <param name="x">The X pixel position of the map being drawn.</param>
            <param name="y">The Y pixel position of the map being drawn.</param>
        </member>
        <member name="T:StardewValley.WorldMaps.MapAreaTooltip">
            <summary>A tooltip shown when hovering over parts of a larger <see cref="T:StardewValley.WorldMaps.MapArea"/> on the world map.</summary>
        </member>
        <member name="F:StardewValley.WorldMaps.MapAreaTooltip.CachedPixelArea">
            <summary>The cached value for <see cref="M:StardewValley.WorldMaps.MapAreaTooltip.GetPixelArea"/>.</summary>
        </member>
        <member name="P:StardewValley.WorldMaps.MapAreaTooltip.Area">
            <summary>The map area which contains this position.</summary>
        </member>
        <member name="P:StardewValley.WorldMaps.MapAreaTooltip.Data">
            <summary>The underlying tooltip data.</summary>
        </member>
        <member name="P:StardewValley.WorldMaps.MapAreaTooltip.Text">
            <summary>The tooltip text to display.</summary>
        </member>
        <member name="P:StardewValley.WorldMaps.MapAreaTooltip.NamespacedId">
            <summary>A unique ID for this tooltip within the map region.</summary>
        </member>
        <member name="M:StardewValley.WorldMaps.MapAreaTooltip.#ctor(StardewValley.WorldMaps.MapArea,StardewValley.GameData.WorldMaps.WorldMapTooltipData,System.String)">
            <summary>Construct an instance.</summary>
            <param name="mapArea">The map area which contains this position.</param>
            <param name="data">The underlying map position data.</param>
            <param name="text">The tooltip text to display.</param>
        </member>
        <member name="M:StardewValley.WorldMaps.MapAreaTooltip.GetPixelArea">
            <summary>Get the pixel area within the map which can be hovered to show this tooltip, adjusted for pixel zoom.</summary>
        </member>
        <member name="T:StardewValley.WorldMaps.MapRegion">
            <inheritdoc cref="T:StardewValley.GameData.WorldMaps.WorldMapRegionData"/>
        </member>
        <member name="F:StardewValley.WorldMaps.MapRegion.CachedPixelBounds">
            <summary>The cached value for <see cref="M:StardewValley.WorldMaps.MapRegion.GetMapPixelBounds"/>.</summary>
        </member>
        <member name="F:StardewValley.WorldMaps.MapRegion.CachedMapAreas">
            <summary>The cached value for <see cref="M:StardewValley.WorldMaps.MapRegion.GetAreas"/>.</summary>
        </member>
        <member name="F:StardewValley.WorldMaps.MapRegion.CachedBaseTexture">
            <summary>The cached value for <see cref="M:StardewValley.WorldMaps.MapRegion.GetBaseTexture"/>.</summary>
        </member>
        <member name="P:StardewValley.WorldMaps.MapRegion.Id">
            <summary>The unique identifier for the region.</summary>
        </member>
        <member name="P:StardewValley.WorldMaps.MapRegion.Data">
            <summary>The underlying data.</summary>
        </member>
        <member name="M:StardewValley.WorldMaps.MapRegion.#ctor(System.String,StardewValley.GameData.WorldMaps.WorldMapRegionData)">
            <summary>Construct an instance.</summary>
            <param name="id">The area ID.</param>
            <param name="data">The underlying data.</param>
        </member>
        <member name="M:StardewValley.WorldMaps.MapRegion.GetMapPixelBounds">
            <summary>Get a pixel area on screen which contains all the map areas being drawn, centered on-screen.</summary>
        </member>
        <member name="M:StardewValley.WorldMaps.MapRegion.GetBaseTexture">
            <summary>Get the base texture to draw under the map areas (adjusted for pixel zoom), if any.</summary>
        </member>
        <member name="M:StardewValley.WorldMaps.MapRegion.GetAreas">
            <summary>Get all areas that are part of the region.</summary>
        </member>
        <member name="M:StardewValley.WorldMaps.MapRegion.GetPositionData(StardewValley.GameLocation,Microsoft.Xna.Framework.Point)">
            <summary>Get the map position which contains a given location and tile coordinate, if any.</summary>
            <param name="location">The in-game location.</param>
            <param name="tile">The tile coordinate within the location.</param>
        </member>
        <member name="M:StardewValley.WorldMaps.MapRegion.GetLocationName(StardewValley.GameLocation)">
            <summary>Get a location's name as it appears in <c>Data/WorldMap</c>.</summary>
            <param name="location">The location whose name to get.</param>
            <remarks>For example, mine levels have internal names like <c>UndergroundMine14</c>, but they're all covered by <c>Mines</c> or <c>SkullCave</c> in <c>Data/Maps</c>.</remarks>
        </member>
        <member name="M:StardewValley.WorldMaps.MapRegion.GetTexture(System.String)">
            <summary>Get the texture to load for an asset name.</summary>
            <param name="assetName">The asset name to load.</param>
        </member>
        <member name="T:StardewValley.WorldMaps.WorldMapManager">
            <summary>Manages data related to the world map shown in the game menu.</summary>
        </member>
        <member name="F:StardewValley.WorldMaps.WorldMapManager.NextClearCacheTick">
            <summary>The <see cref="F:StardewValley.Game1.ticks"/> value when cached data should be reset.</summary>
        </member>
        <member name="F:StardewValley.WorldMaps.WorldMapManager.MaxCacheTicks">
            <summary>The maximum update ticks before any cached data should be refreshed.</summary>
        </member>
        <member name="F:StardewValley.WorldMaps.WorldMapManager.Regions">
            <summary>The cached map regions.</summary>
        </member>
        <member name="M:StardewValley.WorldMaps.WorldMapManager.#cctor">
            <summary>Initialize before the class is first accessed.</summary>
        </member>
        <member name="M:StardewValley.WorldMaps.WorldMapManager.ReloadData">
            <summary>Load the raw world map data.</summary>
        </member>
        <member name="M:StardewValley.WorldMaps.WorldMapManager.GetMapRegions">
            <summary>Get all map regions in the underlying data which are currently valid.</summary>
        </member>
        <member name="M:StardewValley.WorldMaps.WorldMapManager.GetPositionData(StardewValley.GameLocation,Microsoft.Xna.Framework.Point)">
            <summary>Get the map position which contains a given location and tile coordinate, if any.</summary>
            <param name="location">The in-game location.</param>
            <param name="tile">The tile coordinate within the location.</param>
        </member>
        <member name="M:StardewValley.WorldMaps.WorldMapManager.ReloadDataIfStale">
            <summary>Update the world map data if needed.</summary>
        </member>
        <member name="M:StardewValley.WorldMaps.WorldMapManager.GetPositionDataWithoutFallback(StardewValley.GameLocation,Microsoft.Xna.Framework.Point)">
            <summary>Get the map position which contains a given location and tile coordinate, if any, without checking for parent buildings or locations.</summary>
            <param name="location">The in-game location.</param>
            <param name="tile">The tile coordinate within the location.</param>
        </member>
        <member name="T:LWJGL.LZ4">
            <summary>Provides LZ4 compression methods from the Lightweight Java Game Library (LWJGL)</summary>
        </member>
        <member name="M:LWJGL.LZ4.lwjgl_compressBound(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>Compute the maximum size (in bytes) needed to store a compressed representation of <paramref name="inputSize"/> bytes.</summary>
            <param name="env">Unused.</param>
            <param name="clazz">Unused.</param>
            <param name="inputSize">The length (in bytes) of the data to compress.</param>
        </member>
        <member name="M:LWJGL.LZ4.lwjgl_compress_default(System.IntPtr,System.IntPtr,System.Byte[],System.IntPtr,System.Int32,System.Int32)">
            <summary>Compress data from <paramref name="src"/> and store it in <paramref name="dest"/>.</summary>
            <param name="env">Unused.</param>
            <param name="clazz">Unused.</param>
            <param name="src">The byte array representation of the data to compress.</param>
            <param name="dest">A user-provided buffer to store compressed data.</param>
            <param name="srcSize">The number of bytes to read from <paramref name="src"/>, starting from index 0.</param>
            <param name="dstCapacity">The size of the buffer provided by <paramref name="dest"/>.</param>
        </member>
        <member name="M:LWJGL.LZ4.lwjgl_decompress_safe(System.IntPtr,System.IntPtr,System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>Decompress data from <paramref name="src"/> and store it in <paramref name="dest"/>.</summary>
            <param name="env">Unused.</param>
            <param name="clazz">Unused.</param>
            <param name="src">A buffer that holds the compressed data.</param>
            <param name="dest">A user-provided byte array to store decompressed data.</param>
            <param name="compressedSize">The number of bytes to read from the <paramref name="src"/> buffer.</param>
            <param name="dstCapacity">The size of the byte array provided by <paramref name="dest"/>.</param>
        </member>
        <member name="M:LWJGL.LZ4.CompressBound(System.Int32)">
            <summary>Compute the maximum size (in bytes) needed to store a compressed representation of <paramref name="inputSize"/> bytes.</summary>
            <param name="inputSize">The length (in bytes) of the data to compress.</param>
        </member>
        <member name="M:LWJGL.LZ4.CompressDefault(System.Byte[],System.IntPtr,System.Int32,System.Int32)">
            <summary>Compress data from <paramref name="src"/> and store it in <paramref name="dest"/>.</summary>
            <param name="src">The byte array representation of the data to compress.</param>
            <param name="dest">A user-provided buffer to store compressed data.</param>
            <param name="srcSize">The number of bytes to read from <paramref name="src"/>, starting from index 0.</param>
            <param name="dstCapacity">The size of the buffer provided by <paramref name="dest"/>.</param>
        </member>
        <member name="M:LWJGL.LZ4.DecompressSafe(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>Decompress data from <paramref name="src"/> and store it in <paramref name="dest"/>.</summary>
            <param name="src">A buffer that holds the compressed data.</param>
            <param name="dest">A user-provided byte array to store decompressed data.</param>
            <param name="compressedSize">The number of bytes to read from the <paramref name="src"/> buffer.</param>
            <param name="dstCapacity">The size of the byte array provided by <paramref name="dest"/>.</param>
        </member>
        <member name="T:Netcode.FieldChange`2">
            <summary>A delegate which handles a field value changing.</summary>
            <param name="field">The field instance.</param>
            <param name="oldValue">The previous field value.</param>
            <param name="newValue">The new field value.</param>
        </member>
        <member name="P:Netcode.INetSerializable.Name">
            <summary>A name for this net field, used for troubleshooting network sync.</summary>
        </member>
        <member name="M:Netcode.AbstractNetSerializable.ResetNewestReceivedChangeVersion">
            <summary>
            Use this when you want to always use the update from the other end, even if
            it is "older" (such as us updating a position every frame, but we receive
            a better position from the host from a couple frames ago)
            </summary>
        </member>
        <member name="P:Netcode.AbstractNetSerializable.Name">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetCollection`1.TryGetValue(System.Guid,`0@)">
            <summary>Try to get a value from the collection by its ID.</summary>
            <param name="id">The entry ID.</param>
            <param name="value">The entry value, if found.</param>
            <returns>Returns whether a matching entry was found.</returns>
        </member>
        <member name="M:Netcode.NetCollection`1.RemoveWhere(System.Func{`0,System.Boolean})">
            <summary>Remove all elements that match a condition.</summary>
            <param name="match">The predicate matching values to remove.</param>
        </member>
        <member name="P:Netcode.NetDictionary`5.Length">
            <summary>The number of key/value pairs in the dictionary.</summary>
        </member>
        <member name="M:Netcode.NetDictionary`5.Add(`0,`1)">
            <summary>Add an entry to the dictionary.</summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
            <exception cref="T:System.ArgumentException">The key is already present in the dictionary.</exception>
        </member>
        <member name="M:Netcode.NetDictionary`5.Add(`0,`2)">
            <summary>Add an entry to the dictionary.</summary>
            <param name="key">The key of the element to add.</param>
            <param name="field">The net field to add.</param>
            <exception cref="T:System.ArgumentException">The key is already present in the dictionary.</exception>
        </member>
        <member name="M:Netcode.NetDictionary`5.TryAdd(`0,`1)">
            <summary>Add an entry to the dictionary if the key isn't already present.</summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
            <returns>Returns whether the value was successfully added.</returns>
        </member>
        <member name="M:Netcode.NetDictionary`5.RemoveWhere(System.Func{System.Collections.Generic.KeyValuePair{`0,`1},System.Boolean})">
            <summary>Remove all elements that match a condition.</summary>
            <param name="match">The predicate matching values to remove.</param>
        </member>
        <member name="E:Netcode.NetFieldBase`2.fieldChangeEvent">
            <summary>An event raised when this field's value is set (either locally or remotely). Not triggered by changes due to interpolation. May be triggered before the change is visible on the field, if InterpolationTicks > 0.</summary>
        </member>
        <member name="E:Netcode.NetFieldBase`2.fieldChangeVisibleEvent">
            <summary>An event raised after this field's value is set and interpolated.</summary>
        </member>
        <member name="M:Netcode.NetInt.op_Implicit(Netcode.NetInt)~System.Int32">
            <remarks>Deprecated. Implicit conversion of net fields may cause unneeded copy/allocations or have unintended effects (like null values not equal to null).</remarks>
        </member>
        <member name="M:Netcode.NetBool.op_Implicit(Netcode.NetBool)~System.Boolean">
            <remarks>Deprecated. Implicit conversion of net fields may cause unneeded copy/allocations or have unintended effects (like null values not equal to null).</remarks>
        </member>
        <member name="M:Netcode.NetString.op_Implicit(Netcode.NetString)~System.String">
            <remarks>Deprecated. Implicit conversion of net fields may cause unneeded copy/allocations or have unintended effects (like null values not equal to null).</remarks>
        </member>
        <member name="F:Netcode.NetFields.ShouldValidateNetFields">
            <summary>Whether to run detailed validation checks to detect possible bugs with net fields (e.g. fields which aren't added to the owner's <see cref="T:Netcode.NetFields"/> collection).</summary>
            <remarks>These validation checks are expensive and should normally be disabled.</remarks>
        </member>
        <member name="P:Netcode.NetFields.Name">
            <summary>A name for this net field collection, used for troubleshooting network sync.</summary>
        </member>
        <member name="P:Netcode.NetFields.Owner">
            <summary>The object instance which owns this collection.</summary>
            <remarks>This is the instance which has the <see cref="T:Netcode.NetFields"/> property; see also <see cref="P:Netcode.AbstractNetSerializable.Parent"/> for the net field it's synced through (if any). For example, <see cref="P:StardewValley.Character.NetFields"/>'s owner is a <see cref="T:StardewValley.Character"/> and its parent is another <see cref="T:Netcode.NetFields"/>.</remarks>
        </member>
        <member name="F:Netcode.NetFields.fields">
            <summary>The net fields within the collection to synchronize between players.</summary>
        </member>
        <member name="M:Netcode.NetFields.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="name">A name for this net field collection, used for troubleshooting network sync.</param>
        </member>
        <member name="M:Netcode.NetFields.SetOwner(Netcode.INetObject{Netcode.NetFields})">
            <summary>Set the object instance which owns this collection, used to enable validation and simplify troubleshooting.</summary>
            <param name="owner">The instance which owns this net field collection.</param>
        </member>
        <member name="M:Netcode.NetFields.GetNameForInstance``1(``0)">
            <summary>Get a suggested name for an instance's net field collection, for cases where it's useful to show the name of the subtype.</summary>
            <typeparam name="TBaseType">The base type which defines the net field collection.</typeparam>
            <param name="instance">The instance which inherits the net field collection.</param>
        </member>
        <member name="M:Netcode.NetFields.GetFields">
            <summary>Get the fields that are in the collection.</summary>
        </member>
        <member name="M:Netcode.NetFields.AddField(Netcode.INetSerializable,System.String)">
            <summary>Add a net field to this collection.</summary>
            <param name="field">The field to sync as part of this collection.</param>
            <param name="name">A readable name for the field within the collection, used for troubleshooting network sync. This should usually be omitted so it's auto-generated from the expression passed to <paramref name="field"/>.</param>
            <exception cref="T:System.InvalidOperationException">The field is already part of another collection, or this collection has already been fully initialized.</exception>
            <remarks><see cref="M:Netcode.NetFields.SetOwner(Netcode.INetObject{Netcode.NetFields})"/> should be called before any fields are added to enable readable error logs.</remarks>
        </member>
        <member name="M:Netcode.NetFields.ValidateNetFields">
            <summary>Detect and log warnings for common issues like net fields not added to the collection.</summary>
        </member>
        <member name="P:Netcode.NetHashSet`1.Count">
            <inheritdoc />
        </member>
        <member name="P:Netcode.NetHashSet`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.Equals(Netcode.NetHashSet{`0})">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.RemoveWhere(System.Predicate{`0})">
            <summary>Remove all elements that match a condition.</summary>
            <param name="match">The predicate matching values to remove.</param>
            <returns>Returns the number of values removed from the set.</returns>
        </member>
        <member name="M:Netcode.NetHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.System#Collections#Generic#ICollection{TValue}#Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.Read(System.IO.BinaryReader,Netcode.NetVersion)">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.Write(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.ReadFull(System.IO.BinaryReader,Netcode.NetVersion)">
            <inheritdoc />
        </member>
        <member name="M:Netcode.NetHashSet`1.WriteFull(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="T:Netcode.NetHelper">
            <summary>Provides utility methods for implementing net fields.</summary>
        </member>
        <member name="M:Netcode.NetHelper.LogWarning(System.String)">
            <summary>Log a validation warning to the console.</summary>
            <param name="message">The warning text to log.</param>
        </member>
        <member name="M:Netcode.NetHelper.LogVerbose(System.String)">
            <summary>Log a validation trace message to the console.</summary>
            <param name="message">The warning text to log.</param>
        </member>
        <member name="M:Netcode.NetList`2.RemoveWhere(System.Func{`0,System.Boolean})">
            <summary>Remove all elements that match a condition.</summary>
            <param name="match">The predicate matching values to remove.</param>
        </member>
        <member name="M:Netcode.NetList`2.Filter(System.Func{`0,System.Boolean})">
            <summary>Remove all entries which don't match the filter.</summary>
            <param name="f">Get whether to keep the given item.</param>
        </member>
        <member name="T:Netcode.Validation.NetFieldValidator">
            <summary>A utility which auto-detects common net field issues.</summary>
        </member>
        <member name="M:Netcode.Validation.NetFieldValidator.ValidateNetFields(Netcode.INetObject{Netcode.NetFields},System.Action{System.String})">
            <summary>Detect and log warnings for common issues like net fields not added to the collection.</summary>
            <param name="owner">The object instance whose net fields to validate.</param>
            <param name="onError">The method to call when an error occurs.</param>
        </member>
        <member name="M:Netcode.Validation.NetFieldValidator.GetFieldError(System.String,Netcode.Validation.NetFieldValidatorEntry,System.String)">
            <summary>Get a human-readable error message for a field validation error.</summary>
            <param name="collectionName">The name of the net fields collection being validated.</param>
            <param name="entry">The validator entry for the net field being validated.</param>
            <param name="phrase">A short phrase which indicates why it failed validation, like <c>is null</c>.</param>
        </member>
        <member name="M:Netcode.Validation.NetFieldValidator.IsInCollection(System.Collections.Generic.HashSet{Netcode.INetSerializable},System.Object)">
            <summary>Get whether the net field is in the owner's <see cref="P:Netcode.INetObject`1.NetFields"/> collection.</summary>
            <param name="trackedFields">The fields that are synced as part of the collection.</param>
            <param name="netField">The net field instance to find.</param>
        </member>
        <member name="T:Netcode.Validation.NetFieldValidatorEntry">
            <summary>The metadata for a field being validated by <see cref="T:Netcode.Validation.NetFieldValidator"/>.</summary>
        </member>
        <member name="P:Netcode.Validation.NetFieldValidatorEntry.Name">
            <summary>The name of the net field being synced.</summary>
        </member>
        <member name="P:Netcode.Validation.NetFieldValidatorEntry.Value">
            <summary>The synchronized field value.</summary>
        </member>
        <member name="P:Netcode.Validation.NetFieldValidatorEntry.FromField">
            <summary>The C# field on the owner.</summary>
        </member>
        <member name="M:Netcode.Validation.NetFieldValidatorEntry.#ctor(System.String,System.Object,System.Reflection.FieldInfo)">
            <summary>Construct an instance.</summary>
            <param name="name">The name of the net field being synced.</param>
            <param name="value">The raw net field.</param>
            <param name="fromField">The C# field or property on the owner.</param>
        </member>
        <member name="M:Netcode.Validation.NetFieldValidatorEntry.TryGetNetField(Netcode.INetObject{Netcode.NetFields},System.Reflection.FieldInfo,Netcode.Validation.NetFieldValidatorEntry@)">
            <summary>Get a validator entry for a C# field or property, if it's a net field.</summary>
            <param name="owner">The object instance whose net fields are being read.</param>
            <param name="field">The C# field or property to read.</param>
            <param name="netField">The validator entry, if it's a net field.</param>
        </member>
        <member name="M:Netcode.Validation.NetFieldValidatorEntry.IsMarkedNotNetField">
            <summary>Get whether a field is marked with <see cref="T:Netcode.Validation.NotNetFieldAttribute"/>.</summary>
        </member>
        <member name="M:Netcode.Validation.NetFieldValidatorEntry.IsMarkedNotImplicitNetField(System.Type)">
            <summary>Get whether a type is marked with <see cref="T:Netcode.Validation.NotImplicitNetFieldAttribute"/>.</summary>
            <param name="type">The type to check.</param>
        </member>
        <member name="T:Netcode.Validation.NotImplicitNetFieldAttribute">
            <summary>Indicates that a field of this type isn't automatically a synchronized net field, even if it implements <see cref="T:Netcode.INetSerializable"/> or <see cref="T:Netcode.INetObject`1"/>.</summary>
        </member>
        <member name="T:Netcode.Validation.NotNetFieldAttribute">
            <summary>Indicates that the field isn't synchronized in multiplayer, so there's no need to validate it as such in <see cref="T:Netcode.Validation.NetFieldValidator"/>.</summary>
        </member>
        <member name="T:Sickhead.Engine.Util.MemberInfoExtensions">
            <summary>
            Allows Set/GetValue of MemberInfo(s) so that code does not need to
            be written to work specifically on PropertyInfo or FieldInfo.
            </summary>
        </member>
        <member name="M:Sickhead.Engine.Util.MemberInfoExtensions.CanBeSet(System.Reflection.MemberInfo)">
            <summary>
            Returns true if this is a property or field that is accessible to be set via reflection
            on all platforms. Note: windows phone can only set public or internal scope members.
            </summary>        
        </member>
        <member name="M:Sickhead.Engine.Util.MemberInfoExtensions.CreateDelegate(System.Reflection.MethodInfo,System.Type,System.Object)">
            <summary>
            In Win8 the static Delegate.Create was removed and added
            instead as an instance method on MethodInfo. Therefore it 
            is most portable if the new api is used and this extension
            translates it to the older API on those platforms.
            </summary>        
        </member>
        <member name="T:Ionic.Crc.CRC32">
            <summary>
              Computes a CRC-32. The CRC-32 algorithm is parameterized - you
              can set the polynomial and enable or disable bit
              reversal. This can be used for GZIP, BZip2, or ZIP.
            </summary>
            <remarks>
              This type is used internally by DotNetZip; it is generally not used
              directly by applications wishing to create, read, or manipulate zip
              archive files.
            </remarks>
        </member>
        <member name="P:Ionic.Crc.CRC32.TotalBytesRead">
            <summary>
              Indicates the total number of bytes applied to the CRC.
            </summary>
        </member>
        <member name="P:Ionic.Crc.CRC32.Crc32Result">
            <summary>
            Indicates the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="M:Ionic.Crc.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Ionic.Crc.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the
            output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Ionic.Crc.CRC32.ComputeCrc32(System.Int32,System.Byte)">
            <summary>
              Get the CRC32 for the given (word,byte) combo.  This is a
              computation defined by PKzip for PKZIP 2.0 (weak) encryption.
            </summary>
            <param name="W">The word to start with.</param>
            <param name="B">The byte to combine it with.</param>
            <returns>The CRC-ized result.</returns>
        </member>
        <member name="M:Ionic.Crc.CRC32.SlurpBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update the value for the running CRC32 using the given block of bytes.
            This is useful when using the CRC32() class in a Stream.
            </summary>
            <param name="block">block of bytes to slurp</param>
            <param name="offset">starting point in the block</param>
            <param name="count">how many bytes within the block to slurp</param>
        </member>
        <member name="M:Ionic.Crc.CRC32.UpdateCRC(System.Byte)">
            <summary>
              Process one byte in the CRC.
            </summary>
            <param name = "b">the byte to include into the CRC .  </param>
        </member>
        <member name="M:Ionic.Crc.CRC32.UpdateCRC(System.Byte,System.Int32)">
            <summary>
              Process a run of N identical bytes into the CRC.
            </summary>
            <remarks>
              <para>
                This method serves as an optimization for updating the CRC when a
                run of identical bytes is found. Rather than passing in a buffer of
                length n, containing all identical bytes b, this method accepts the
                byte value and the length of the (virtual) buffer - the length of
                the run.
              </para>
            </remarks>
            <param name = "b">the byte to include into the CRC.  </param>
            <param name = "n">the number of times that byte should be repeated. </param>
        </member>
        <member name="M:Ionic.Crc.CRC32.Combine(System.Int32,System.Int32)">
            <summary>
              Combines the given CRC32 value with the current running total.
            </summary>
            <remarks>
              This is useful when using a divide-and-conquer approach to
              calculating a CRC.  Multiple threads can each calculate a
              CRC32 on a segment of the data, and then combine the
              individual CRC32 values at the end.
            </remarks>
            <param name="crc">the crc value to be combined with this one</param>
            <param name="length">the length of data the CRC value was calculated on</param>
        </member>
        <member name="M:Ionic.Crc.CRC32.#ctor">
            <summary>
              Create an instance of the CRC32 class using the default settings: no
              bit reversal, and a polynomial of 0xEDB88320.
            </summary>
        </member>
        <member name="M:Ionic.Crc.CRC32.#ctor(System.Boolean)">
            <summary>
              Create an instance of the CRC32 class, specifying whether to reverse
              data bits or not.
            </summary>
            <param name='reverseBits'>
              specify true if the instance should reverse data bits.
            </param>
            <remarks>
              <para>
                In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                want a CRC32 with compatibility with BZip2, you should pass true
                here. In the CRC-32 used by GZIP and PKZIP, the bits are not
                reversed; Therefore if you want a CRC32 with compatibility with
                those, you should pass false.
              </para>
            </remarks>
        </member>
        <member name="M:Ionic.Crc.CRC32.#ctor(System.Int32,System.Boolean)">
             <summary>
               Create an instance of the CRC32 class, specifying the polynomial and
               whether to reverse data bits or not.
             </summary>
             <param name='polynomial'>
               The polynomial to use for the CRC, expressed in the reversed (LSB)
               format: the highest ordered bit in the polynomial value is the
               coefficient of the 0th power; the second-highest order bit is the
               coefficient of the 1 power, and so on. Expressed this way, the
               polynomial for the CRC-32C used in IEEE 802.3, is 0xEDB88320.
             </param>
             <param name='reverseBits'>
               specify true if the instance should reverse data bits.
             </param>
            
             <remarks>
               <para>
                 In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                 want a CRC32 with compatibility with BZip2, you should pass true
                 here for the <c>reverseBits</c> parameter. In the CRC-32 used by
                 GZIP and PKZIP, the bits are not reversed; Therefore if you want a
                 CRC32 with compatibility with those, you should pass false for the
                 <c>reverseBits</c> parameter.
               </para>
             </remarks>
        </member>
        <member name="M:Ionic.Crc.CRC32.Reset">
            <summary>
              Reset the CRC-32 class - clear the CRC "remainder register."
            </summary>
            <remarks>
              <para>
                Use this when employing a single instance of this class to compute
                multiple, distinct CRCs on multiple, distinct data blocks.
              </para>
            </remarks>
        </member>
        <member name="T:Ionic.Crc.CrcCalculatorStream">
             <summary>
             A Stream that calculates a CRC32 (a checksum) on all bytes read,
             or on all bytes written.
             </summary>
            
             <remarks>
             <para>
             This class can be used to verify the CRC of a ZipEntry when
             reading from a stream, or to calculate a CRC when writing to a
             stream.  The stream should be used to either read, or write, but
             not both.  If you intermix reads and writes, the results are not
             defined.
             </para>
            
             <para>
             This class is intended primarily for use internally by the
             DotNetZip library.
             </para>
             </remarks>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream)">
            <summary>
            The default constructor.
            </summary>
            <remarks>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().  The stream uses the default CRC32
                algorithm, which implies a polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
              The constructor allows the caller to specify how to handle the
              underlying stream at close.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close().
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean,Ionic.Crc.CRC32)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close(), and the CRC32 instance to use.
            </summary>
            <remarks>
              <para>
                The stream uses the specified CRC32 instance, which allows the
                application to specify how the CRC gets calculated.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
            <param name="crc32">the CRC32 instance to use to calculate the CRC32</param>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.TotalBytesSlurped">
             <summary>
               Gets the total number of bytes run through the CRC32 calculator.
             </summary>
            
             <remarks>
               This is either the total number of bytes read, or the total number of
               bytes written, depending on the direction of this stream.
             </remarks>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.Crc">
            <summary>
              Provides the current CRC for all blocks slurped in.
            </summary>
            <remarks>
              <para>
                The running total of the CRC is kept as data is written or read
                through the stream.  read this property after all reads or writes to
                get an accurate CRC for the entire stream.
              </para>
            </remarks>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.LeaveOpen">
            <summary>
              Indicates whether the underlying stream will be left open when the
              <c>CrcCalculatorStream</c> is Closed.
            </summary>
            <remarks>
              <para>
                Set this at any point before calling <see cref="M:Ionic.Crc.CrcCalculatorStream.Close"/>.
              </para>
            </remarks>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream.
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.CanRead">
            <summary>
            Indicates whether the stream supports reading.
            </summary>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.CanSeek">
            <summary>
              Indicates whether the stream supports seeking.
            </summary>
            <remarks>
              <para>
                Always returns false.
              </para>
            </remarks>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.CanWrite">
            <summary>
            Indicates whether the stream supports writing.
            </summary>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.Length">
            <summary>
              Returns the length of the underlying stream.
            </summary>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.Position">
            <summary>
              The getter for this property returns the total bytes read.
              If you use the setter, it will throw
            <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeking is not supported on this stream. This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="offset">N/A</param>
            <param name="origin">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.SetLength(System.Int64)">
            <summary>
            This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="value">N/A</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.GZipStream">
             <summary>
               A class for compressing and decompressing GZIP streams.
             </summary>
             <remarks>
            
             <para>
               The <c>GZipStream</c> is a <see
               href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a
               <see cref="T:System.IO.Stream"/>. It adds GZIP compression or decompression to any
               stream.
             </para>
            
             <para>
               Like the <c>System.IO.Compression.GZipStream</c> in the .NET Base Class Library, the
               <c>Ionic.Zlib.GZipStream</c> can compress while writing, or decompress while
               reading, but not vice versa.  The compression method used is GZIP, which is
               documented in <see href="http://www.ietf.org/rfc/rfc1952.txt">IETF RFC
               1952</see>, "GZIP file format specification version 4.3".</para>
            
             <para>
               A <c>GZipStream</c> can be used to decompress data (through <c>Read()</c>) or
               to compress data (through <c>Write()</c>), but not both.
             </para>
            
             <para>
               If you wish to use the <c>GZipStream</c> to compress data, you must wrap it
               around a write-able stream. As you call <c>Write()</c> on the <c>GZipStream</c>, the
               data will be compressed into the GZIP format.  If you want to decompress data,
               you must wrap the <c>GZipStream</c> around a readable stream that contains an
               IETF RFC 1952-compliant stream.  The data will be decompressed as you call
               <c>Read()</c> on the <c>GZipStream</c>.
             </para>
            
             <para>
               Though the GZIP format allows data from multiple files to be concatenated
               together, this stream handles only a single segment of GZIP format, typically
               representing a single file.
             </para>
            
             <para>
               This class is similar to <see cref="T:Ionic.Zlib.ZlibStream"/> and <see cref="!:DeflateStream"/>.
               <c>ZlibStream</c> handles RFC1950-compliant streams.  <see cref="!:DeflateStream"/>
               handles RFC1951-compliant streams. This class handles RFC1952-compliant streams.
             </para>
            
             </remarks>
            
             <seealso cref="!:DeflateStream" />
             <seealso cref="T:Ionic.Zlib.ZlibStream" />
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Comment">
             <summary>
               The comment on the GZIP stream.
             </summary>
            
             <remarks>
             <para>
               The GZIP format allows for each file to optionally have an associated
               comment stored with the file.  The comment is encoded with the ISO-8859-1
               code page.  To include a comment in a GZIP stream you create, set this
               property before calling <c>Write()</c> for the first time on the
               <c>GZipStream</c>.
             </para>
            
             <para>
               When using <c>GZipStream</c> to decompress, you can retrieve this property
               after the first call to <c>Read()</c>.  If no comment has been set in the
               GZIP bytestream, the Comment property will return <c>null</c>
               (<c>Nothing</c> in VB).
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.FileName">
             <summary>
               The FileName for the GZIP stream.
             </summary>
            
             <remarks>
            
             <para>
               The GZIP format optionally allows each file to have an associated
               filename.  When compressing data (through <c>Write()</c>), set this
               FileName before calling <c>Write()</c> the first time on the <c>GZipStream</c>.
               The actual filename is encoded into the GZIP bytestream with the
               ISO-8859-1 code page, according to RFC 1952. It is the application's
               responsibility to insure that the FileName can be encoded and decoded
               correctly with this code page.
             </para>
            
             <para>
               When decompressing (through <c>Read()</c>), you can retrieve this value
               any time after the first <c>Read()</c>.  In the case where there was no filename
               encoded into the GZIP bytestream, the property will return <c>null</c> (<c>Nothing</c>
               in VB).
             </para>
             </remarks>
        </member>
        <member name="F:Ionic.Zlib.GZipStream.LastModified">
             <summary>
               The last modified time for the GZIP stream.
             </summary>
            
             <remarks>
               GZIP allows the storage of a last modified time with each GZIP entry.
               When compressing data, you can set this before the first call to
               <c>Write()</c>.  When decompressing, you can retrieve this value any time
               after the first call to <c>Read()</c>.
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Crc32">
            <summary>
            The CRC on the GZIP stream.
            </summary>
            <remarks>
            This is used for internal error checking. You probably don't need to look at this property.
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>GZipStream</c> will use the
               default compression level.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with
               <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a GZipStream to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <example>
             This example shows how to use a GZipStream to uncompress a file.
             <code>
             private void GunZipFile(string filename)
             {
                 if (!filename.EndsWith(".gz))
                     throw new ArgumentException("filename");
                 var DecompressedFile = filename.Substring(0,filename.Length-3);
                 byte[] working = new byte[WORKING_BUFFER_SIZE];
                 int n= 1;
                 using (System.IO.Stream input = System.IO.File.OpenRead(filename))
                 {
                     using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                     {
                         using (var output = System.IO.File.Create(DecompressedFile))
                         {
                             while (n !=0)
                             {
                                 n= decompressor.Read(working, 0, working.Length);
                                 if (n > 0)
                                 {
                                     output.Write(working, 0, n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub GunZipFile(ByVal filename as String)
                 If Not (filename.EndsWith(".gz)) Then
                     Throw New ArgumentException("filename")
                 End If
                 Dim DecompressedFile as String = filename.Substring(0,filename.Length-3)
                 Dim working(WORKING_BUFFER_SIZE) as Byte
                 Dim n As Integer = 1
                 Using input As Stream = File.OpenRead(filename)
                     Using decompressor As Stream = new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, True)
                         Using output As Stream = File.Create(UncompressedFile)
                             Do
                                 n= decompressor.Read(working, 0, working.Length)
                                 If n > 0 Then
                                     output.Write(working, 0, n)
                                 End IF
                             Loop While (n  > 0)
                         End Using
                     End Using
                 End Using
             End Sub
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
             <remarks>
            
             <para>
               The <c>CompressionMode</c> (Compress or Decompress) also establishes the
               "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A
               <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a <c>GZipStream</c> to compress a file into a .gz file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".gz"))
                 {
                     using (Stream compressor = new GZipStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".gz")
                     Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>GZipStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the stream should be left open after Deflation
               or Inflation.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to leave
               the stream open.
             </para>
            
             <para>
               The <see cref="T:Ionic.Zlib.CompressionMode"/> (Compress or Decompress) also
               establishes the "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A <c>GZipStream</c>
               with <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             <para>
               The <c>GZipStream</c> will use the default compression level. If you want
               to specify the compression level, see <see cref="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)"/>.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the "captive"
               stream in other places in this documentation.
             </param>
            
             <param name="mode">Indicates whether the GZipStream will compress or decompress.
             </param>
            
             <param name="leaveOpen">
               true if the application would like the base stream to remain open after
               inflation/deflation.
             </param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and the
               specified <c>CompressionLevel</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to
               leave the stream open.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a <c>GZipStream</c> to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                This method may be invoked in two distinct scenarios.  If disposing
                == true, the method has been called directly or indirectly by a
                user's code, for example via the public Dispose() method. In this
                case, both managed and unmanaged resources can be referenced and
                disposed.  If disposing == false, the method has been called by the
                runtime from inside the object finalizer and this method should not
                reference other objects; in that case only unmanaged resources must
                be referenced or disposed.
              </para>
            </remarks>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see
               cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read and decompress data from the source stream.
             </summary>
            
             <remarks>
               With a <c>GZipStream</c>, decompression is done through reading.
             </remarks>
            
             <example>
             <code>
             byte[] working = new byte[WORKING_BUFFER_SIZE];
             using (System.IO.Stream input = System.IO.File.OpenRead(_CompressedFile))
             {
                 using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                 {
                     using (var output = System.IO.File.Create(_DecompressedFile))
                     {
                         int n;
                         while ((n= decompressor.Read(working, 0, working.Length)) !=0)
                         {
                             output.Write(working, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
             <param name="buffer">The buffer into which the decompressed data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">irrelevant; it will always throw!</param>
            <param name="origin">irrelevant; it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.SetLength(System.Int64)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">irrelevant; this method will always throw!</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
             <para>
               If you wish to use the <c>GZipStream</c> to compress data while writing,
               you can create a <c>GZipStream</c> with <c>CompressionMode.Compress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that <c>GZipStream</c>,
               providing uncompressed data as input.  The data sent to the output stream
               will be the compressed form of the data written.
             </para>
            
             <para>
               A <c>GZipStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not
               both. Writing implies compression.  Reading implies decompression.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a single string.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing GZIP-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a byte array.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing data that has been compressed with GZip.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.Tree.DistanceCode(System.Int32)">
            <summary>
            Map from a distance to a distance code.
            </summary>
            <remarks> 
            No side effects. _dist_code[256] and _dist_code[257] are never used.
            </remarks>
        </member>
        <member name="T:Ionic.Zlib.FlushType">
            <summary>
            Describes how to flush the current deflate operation.
            </summary>
            <remarks>
            The different FlushType values are useful when using a Deflate in a streaming application.
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.FlushType.None">
            <summary>No flush at all.</summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Partial">
            <summary>Closes the current block, but doesn't flush it to
            the output. Used internally only in hypothetical
            scenarios.  This was supposed to be removed by Zlib, but it is
            still in use in some edge cases.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Sync">
            <summary>
            Use this during compression to specify that all pending output should be
            flushed to the output buffer and the output should be aligned on a byte
            boundary.  You might use this in a streaming communication scenario, so that
            the decompressor can get all input data available so far.  When using this
            with a ZlibCodec, <c>AvailableBytesIn</c> will be zero after the call if
            enough output space has been provided before the call.  Flushing will
            degrade compression and so it should be used only when necessary.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Full">
            <summary>
            Use this during compression to specify that all output should be flushed, as
            with <c>FlushType.Sync</c>, but also, the compression state should be reset
            so that decompression can restart from this point if previous compressed
            data has been damaged or if random access is desired.  Using
            <c>FlushType.Full</c> too often can significantly degrade the compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Finish">
            <summary>Signals the end of the compression/decompression stream.</summary>
        </member>
        <member name="T:Ionic.Zlib.CompressionLevel">
            <summary>
            The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.None">
            <summary>
            None means that the data will be simply stored, with no change at all.
            If you are producing ZIPs for use on Mac OSX, be aware that archives produced with CompressionLevel.None
            cannot be opened with the default zip reader. Use a different CompressionLevel.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level0">
            <summary>
            Same as None.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.BestSpeed">
            <summary>
            The fastest but least effective compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level1">
            <summary>
            A synonym for BestSpeed.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level2">
            <summary>
            A little slower, but better, than level 1.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level3">
            <summary>
            A little slower, but better, than level 2.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level4">
            <summary>
            A little slower, but better, than level 3.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level5">
            <summary>
            A little slower than level 4, but with better compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Default">
            <summary>
            The default compression level, with a good balance of speed and compression efficiency.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level6">
            <summary>
            A synonym for Default.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level7">
            <summary>
            Pretty good compression!
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level8">
            <summary>
             Better compression than Level7!
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.BestCompression">
            <summary>
            The "best" compression, where best means greatest reduction in size of the input data stream.
            This is also the slowest compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level9">
            <summary>
            A synonym for BestCompression.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.CompressionStrategy">
            <summary>
            Describes options for how the compression algorithm is executed.  Different strategies
            work better on different sorts of data.  The strategy parameter can affect the compression
            ratio and the speed of compression but not the correctness of the compresssion.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionStrategy.Default">
            <summary>
            The default strategy is probably the best for normal data.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionStrategy.Filtered">
            <summary>
            The <c>Filtered</c> strategy is intended to be used most effectively with data produced by a
            filter or predictor.  By this definition, filtered data consists mostly of small
            values with a somewhat random distribution.  In this case, the compression algorithm
            is tuned to compress them better.  The effect of <c>Filtered</c> is to force more Huffman
            coding and less string matching; it is a half-step between <c>Default</c> and <c>HuffmanOnly</c>.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionStrategy.HuffmanOnly">
            <summary>
            Using <c>HuffmanOnly</c> will force the compressor to do Huffman encoding only, with no
            string matching.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.CompressionMode">
            <summary>
            An enum to specify the direction of transcoding - whether to compress or decompress.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionMode.Compress">
            <summary>
            Used to specify that the stream should compress the data.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionMode.Decompress">
            <summary>
            Used to specify that the stream should decompress the data.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.ZlibException">
            <summary>
            A general purpose exception class for exceptions in the Zlib library.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ZlibException.#ctor">
            <summary>
            The ZlibException class captures exception information generated
            by the Zlib library.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ZlibException.#ctor(System.String)">
            <summary>
            This ctor collects a message attached to the exception.
            </summary>
            <param name="s">the message for the exception.</param>
        </member>
        <member name="M:Ionic.Zlib.SharedUtils.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Ionic.Zlib.SharedUtils.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
             <summary>
               Reads a number of characters from the current source TextReader and writes
               the data to the target array at the specified index.
             </summary>
            
             <param name="sourceTextReader">The source TextReader to read from</param>
             <param name="target">Contains the array of characteres read from the source TextReader.</param>
             <param name="start">The starting index of the target array.</param>
             <param name="count">The maximum number of characters to read from the source TextReader.</param>
            
             <returns>
               The number of characters read. The number will be less than or equal to
               count depending on the data available in the source TextReader. Returns -1
               if the end of the stream is reached.
             </returns>
        </member>
        <member name="T:Ionic.Zlib.Adler">
             <summary>
             Computes an Adler-32 checksum.
             </summary>
             <remarks>
             The Adler checksum is similar to a CRC checksum, but faster to compute, though less
             reliable.  It is used in producing RFC1950 compressed streams.  The Adler checksum
             is a required part of the "ZLIB" standard.  Applications will almost never need to
             use this class directly.
             </remarks>
            
             <exclude/>
        </member>
        <member name="M:Ionic.Zlib.Adler.Adler32(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
              Calculates the Adler32 checksum.
            </summary>
            <remarks>
              <para>
                This is used within ZLIB.  You probably don't need to use this directly.
              </para>
            </remarks>
            <example>
               To compute an Adler32 checksum on a byte array:
             <code>
               var adler = Adler.Adler32(0, null, 0, 0);
               adler = Adler.Adler32(adler, buffer, index, length);
             </code>
            </example>
        </member>
        <member name="T:Ionic.Zlib.ZlibCodec">
             <summary>
             Encoder and Decoder for ZLIB and DEFLATE (IETF RFC1950 and RFC1951).
             </summary>
            
             <remarks>
             This class compresses and decompresses data according to the Deflate algorithm
             and optionally, the ZLIB format, as documented in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950 - ZLIB</see> and <see
             href="http://www.ietf.org/rfc/rfc1951.txt">RFC 1951 - DEFLATE</see>.
             </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.InputBuffer">
            <summary>
            The buffer from which data is taken.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.NextIn">
            <summary>
            An index into the InputBuffer array, indicating where to start reading. 
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.AvailableBytesIn">
            <summary>
            The number of bytes available in the InputBuffer, starting at NextIn. 
            </summary>
            <remarks>
            Generally you should set this to InputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.TotalBytesIn">
            <summary>
            Total number of bytes read so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.OutputBuffer">
            <summary>
            Buffer to store output data.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.NextOut">
            <summary>
            An index into the OutputBuffer array, indicating where to start writing. 
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.AvailableBytesOut">
            <summary>
            The number of bytes available in the OutputBuffer, starting at NextOut. 
            </summary>
            <remarks>
            Generally you should set this to OutputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.TotalBytesOut">
            <summary>
            Total number of bytes written to the output so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.Message">
            <summary>
            used for diagnostics, when something goes wrong!
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.CompressLevel">
            <summary>
            The compression level to use in this codec.  Useful only in compression mode.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.WindowBits">
            <summary>
            The number of Window Bits to use.  
            </summary>
            <remarks>
            This gauges the size of the sliding window, and hence the 
            compression effectiveness as well as memory consumption. It's best to just leave this 
            setting alone if you don't know what it is.  The maximum value is 15 bits, which implies
            a 32k window.  
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.Strategy">
            <summary>
            The compression strategy to use.
            </summary>
            <remarks>
            This is only effective in compression.  The theory offered by ZLIB is that different
            strategies could potentially produce significant differences in compression behavior
            for different data sets.  Unfortunately I don't have any good recommendations for how
            to set it differently.  When I tested changing the strategy I got minimally different
            compression performance. It's best to leave this property alone if you don't have a
            good feel for it.  Or, you may want to produce a test harness that runs through the
            different strategy options and evaluates them on different file types. If you do that,
            let me know your results.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ZlibCodec.Adler32">
            <summary>
            The Adler32 checksum on the data transferred through the codec so far. You probably don't need to look at this.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.#ctor">
            <summary>
            Create a ZlibCodec.
            </summary>
            <remarks>
            If you use this default constructor, you will later have to explicitly call 
            InitializeInflate() or InitializeDeflate() before using the ZlibCodec to compress 
            or decompress. 
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.#ctor(Ionic.Zlib.CompressionMode)">
            <summary>
            Create a ZlibCodec that either compresses or decompresses.
            </summary>
            <param name="mode">
            Indicates whether the codec should compress (deflate) or decompress (inflate).
            </param>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate">
            <summary>
            Initialize the inflation state. 
            </summary>
            <remarks>
            It is not necessary to call this before using the ZlibCodec to inflate data; 
            It is implicitly called when you call the constructor.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate(System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to
             govern the handling of RFC1950 header bytes.
             </summary>
            
             <remarks>
             By default, the ZLIB header defined in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950</see> is expected.  If
             you want to read a zlib stream you should specify true for
             expectRfc1950Header.  If you have a deflate stream, you will want to specify
             false. It is only necessary to invoke this initializer explicitly if you
             want to specify false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte
             pair when reading the stream of data to be inflated.</param>
            
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate(System.Int32)">
            <summary>
            Initialize the ZlibCodec for inflation, with the specified number of window bits. 
            </summary>
            <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
            then you shouldn't be calling this initializer.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate(System.Int32,System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to govern the handling of
             RFC1950 header bytes. 
             </summary>
            
             <remarks>
             If you want to read a zlib stream you should specify true for
             expectRfc1950Header. In this case, the library will expect to find a ZLIB
             header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
             1950</see>, in the compressed stream.  If you will be reading a DEFLATE or
             GZIP stream, which does not have such a header, you will want to specify
             false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading 
             the stream of data to be inflated.</param>
             <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
             then you shouldn't be calling this initializer.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.Inflate(Ionic.Zlib.FlushType)">
             <summary>
             Inflate the data in the InputBuffer, placing the result in the OutputBuffer.
             </summary>
             <remarks>
             You must have set InputBuffer and OutputBuffer, NextIn and NextOut, and AvailableBytesIn and 
             AvailableBytesOut  before calling this method.
             </remarks>
             <example>
             <code>
             private void InflateBuffer()
             {
                 int bufferSize = 1024;
                 byte[] buffer = new byte[bufferSize];
                 ZlibCodec decompressor = new ZlibCodec();
             
                 Console.WriteLine("\n============================================");
                 Console.WriteLine("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
                 MemoryStream ms = new MemoryStream(DecompressedBytes);
             
                 int rc = decompressor.InitializeInflate();
             
                 decompressor.InputBuffer = CompressedBytes;
                 decompressor.NextIn = 0;
                 decompressor.AvailableBytesIn = CompressedBytes.Length;
             
                 decompressor.OutputBuffer = buffer;
             
                 // pass 1: inflate 
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.None);
             
                     if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 // pass 2: finish and flush
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.Finish);
             
                     if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
                         ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 decompressor.EndInflate();
             }
            
             </code>
             </example>
             <param name="flush">The flush to use when inflating.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.EndInflate">
            <summary>
            Ends an inflation session. 
            </summary>
            <remarks>
            Call this after successively calling Inflate().  This will cause all buffers to be flushed. 
            After calling this you cannot call Inflate() without a intervening call to one of the
            InitializeInflate() overloads.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.SyncInflate">
            <summary>
            I don't know what this does!
            </summary>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate">
            <summary>
            Initialize the ZlibCodec for deflation operation.
            </summary>
            <remarks>
            The codec will use the MAX window bits and the default level of compression.
            </remarks>
            <example>
            <code>
             int bufferSize = 40000;
             byte[] CompressedBytes = new byte[bufferSize];
             byte[] DecompressedBytes = new byte[bufferSize];
             
             ZlibCodec compressor = new ZlibCodec();
             
             compressor.InitializeDeflate(CompressionLevel.Default);
             
             compressor.InputBuffer = System.Text.ASCIIEncoding.ASCII.GetBytes(TextToCompress);
             compressor.NextIn = 0;
             compressor.AvailableBytesIn = compressor.InputBuffer.Length;
             
             compressor.OutputBuffer = CompressedBytes;
             compressor.NextOut = 0;
             compressor.AvailableBytesOut = CompressedBytes.Length;
             
             while (compressor.TotalBytesIn != TextToCompress.Length &amp;&amp; compressor.TotalBytesOut &lt; bufferSize)
             {
               compressor.Deflate(FlushType.None);
             }
             
             while (true)
             {
               int rc= compressor.Deflate(FlushType.Finish);
               if (rc == ZlibConstants.Z_STREAM_END) break;
             }
             
             compressor.EndDeflate();
              
            </code>
            </example>
            <returns>Z_OK if all goes well. You generally don't need to check the return code.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified
            CompressionLevel.  It will emit a ZLIB stream as it compresses.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the explicit flag governing whether to emit an RFC1950 header byte pair.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified CompressionLevel.
            If you want to generate a zlib stream, you should specify true for
            wantRfc1950Header. In this case, the library will emit a ZLIB
            header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
            1950</see>, in the compressed stream.  
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel,System.Int32)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the specified number of window bits. 
            </summary>
            <remarks>
            The codec will use the specified number of window bits and the specified CompressionLevel.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel,System.Int32,System.Boolean)">
             <summary>
             Initialize the ZlibCodec for deflation operation, using the specified
             CompressionLevel, the specified number of window bits, and the explicit flag
             governing whether to emit an RFC1950 header byte pair.
             </summary>
            
             <param name="level">The compression level for the codec.</param>
             <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
             <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
             <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.Deflate(Ionic.Zlib.FlushType)">
            <summary>
            Deflate one batch of data.
            </summary>
            <remarks>
            You must have set InputBuffer and OutputBuffer before calling this method.
            </remarks>
            <example>
            <code>
            private void DeflateBuffer(CompressionLevel level)
            {
                int bufferSize = 1024;
                byte[] buffer = new byte[bufferSize];
                ZlibCodec compressor = new ZlibCodec();
            
                Console.WriteLine("\n============================================");
                Console.WriteLine("Size of Buffer to Deflate: {0} bytes.", UncompressedBytes.Length);
                MemoryStream ms = new MemoryStream();
            
                int rc = compressor.InitializeDeflate(level);
            
                compressor.InputBuffer = UncompressedBytes;
                compressor.NextIn = 0;
                compressor.AvailableBytesIn = UncompressedBytes.Length;
            
                compressor.OutputBuffer = buffer;
            
                // pass 1: deflate 
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.None);
            
                    if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                        throw new Exception("deflating: " + compressor.Message);
            
                    ms.Write(compressor.OutputBuffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                // pass 2: finish and flush
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.Finish);
            
                    if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                        throw new Exception("deflating: " + compressor.Message);
            
                    if (buffer.Length - compressor.AvailableBytesOut &gt; 0)
                        ms.Write(buffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                compressor.EndDeflate();
            
                ms.Seek(0, SeekOrigin.Begin);
                CompressedBytes = new byte[compressor.TotalBytesOut];
                ms.Read(CompressedBytes, 0, CompressedBytes.Length);
            }
            </code>
            </example>
            <param name="flush">whether to flush all data as you deflate. Generally you will want to 
            use Z_NO_FLUSH here, in a series of calls to Deflate(), and then call EndDeflate() to 
            flush everything. 
            </param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.EndDeflate">
            <summary>
            End a deflation session.
            </summary>
            <remarks>
            Call this after making a series of one or more calls to Deflate(). All buffers are flushed.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.ResetDeflate">
            <summary>
            Reset a codec for another deflation session.
            </summary>
            <remarks>
            Call this to reset the deflation state.  For example if a thread is deflating
            non-consecutive blocks, you can call Reset() after the Deflate(Sync) of the first
            block and before the next Deflate(None) of the second block.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.SetDeflateParams(Ionic.Zlib.CompressionLevel,Ionic.Zlib.CompressionStrategy)">
            <summary>
            Set the CompressionStrategy and CompressionLevel for a deflation session.
            </summary>
            <param name="level">the level of compression to use.</param>
            <param name="strategy">the strategy to use for compression.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.SetDictionary(System.Byte[])">
            <summary>
            Set the dictionary to be used for either Inflation or Deflation.
            </summary>
            <param name="dictionary">The dictionary bytes to use.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="T:Ionic.Zlib.ZlibConstants">
            <summary>
            A bunch of constants used in the Zlib interface.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WindowBitsMax">
            <summary>
            The maximum number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WindowBitsDefault">
            <summary>
            The default number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_OK">
            <summary>
            indicates everything is A-OK
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_STREAM_END">
            <summary>
            Indicates that the last operation reached the end of the stream.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_NEED_DICT">
            <summary>
            The operation ended in need of a dictionary. 
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_STREAM_ERROR">
            <summary>
            There was an error with the stream - not enough data, not open and readable, etc.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_DATA_ERROR">
            <summary>
            There was an error with the data - not enough data, bad data, etc.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_BUF_ERROR">
            <summary>
            There was an error with the working buffer.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WorkingBufferSizeDefault">
            <summary>
            The size of the working buffer used in the ZlibCodec class. Defaults to 8192 bytes.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WorkingBufferSizeMin">
            <summary>
            The minimum size of the working buffer used in the ZlibCodec class.  Currently it is 128 bytes.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.ZlibStream">
             <summary>
             Represents a Zlib stream for compression or decompression.
             </summary>
             <remarks>
            
             <para>
             The ZlibStream is a <see
             href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see
             cref="T:System.IO.Stream"/>.  It adds ZLIB compression or decompression to any
             stream.
             </para>
            
             <para> Using this stream, applications can compress or decompress data via
             stream <c>Read()</c> and <c>Write()</c> operations.  Either compresssion or
             decompression can occur through either reading or writing. The compression
             format used is ZLIB, which is documented in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">IETF RFC 1950</see>, "ZLIB Compressed
             Data Format Specification version 3.3". This implementation of ZLIB always uses
             DEFLATE as the compression method.  (see <see
             href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
             Compressed Data Format Specification version 1.3.") </para>
            
             <para>
             The ZLIB format allows for varying compression methods, window sizes, and dictionaries.
             This implementation always uses the DEFLATE compression method, a preset dictionary,
             and 15 window bits by default.
             </para>
            
             <para>
             This class is similar to <see cref="!:DeflateStream"/>, except that it adds the
             RFC1950 header and trailer bytes to a compressed stream when compressing, or expects
             the RFC1950 header and trailer bytes when decompressing.  It is also similar to the
             <see cref="T:Ionic.Zlib.GZipStream"/>.
             </para>
             </remarks>
             <seealso cref="!:DeflateStream" />
             <seealso cref="T:Ionic.Zlib.GZipStream" />
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode)">
             <summary>
             Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c>
               will use the default compression level. The "captive" stream will be
               closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
             This example uses a <c>ZlibStream</c> to compress a file, and writes the
             compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
               The "captive" stream will be closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
               This example uses a <c>ZlibStream</c> to compress data from a file, and writes the
               compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                     Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the captive stream should be left open after
               Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c> will use
               the default compression level.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream
               open.
             </para>
            
             <para>
             See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">The stream which will be read or written. This is called the
             "captive" stream in other places in this documentation.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain
             open after inflation/deflation.</param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify
               whether the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive
               stream remain open after the deflation or inflation occurs.  By
               default, after <c>Close()</c> is called on the stream, the captive
               stream is also closed. In some cases this is not desired, for example
               if the stream is a <see cref="T:System.IO.MemoryStream"/> that will be
               re-read after compression.  Specify true for the <paramref
               name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a ZlibStream to compress the data from a file,
             and store the result into another file. The filestream remains open to allow
             additional data to be written to it.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".zlib"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
            
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
            
             <param name="leaveOpen">
             true if the application would like the stream to remain open after
             inflation/deflation.
             </param>
            
             <param name="level">
             A tuning knob to trade speed for effectiveness. This parameter is
             effective only when mode is <c>CompressionMode.Compress</c>.
             </param>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            Sorry, though, not sure exactly how to describe all the various settings.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes. The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                This method may be invoked in two distinct scenarios.  If disposing
                == true, the method has been called directly or indirectly by a
                user's code, for example via the public Dispose() method. In this
                case, both managed and unmanaged resources can be referenced and
                disposed.  If disposing == false, the method has been called by the
                runtime from inside the object finalizer and this method should not
                reference other objects; in that case only unmanaged resources must
                be referenced or disposed.
              </para>
            </remarks>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see
               cref="T:System.NotSupportedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while reading,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               providing an uncompressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data read will be compressed.  If you wish to
               use the <c>ZlibStream</c> to decompress data while reading, you can create
               a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, providing a
               readable compressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data will be decompressed as it is read.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but
               not both.
             </para>
            
             </remarks>
            
             <param name="buffer">
             The buffer into which the read data should be placed.</param>
            
             <param name="offset">
             the offset within that data array to put the first byte read.</param>
            
             <param name="count">the number of bytes to read.</param>
            
             <returns>the number of bytes read</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
             <summary>
             Calling this method always throws a <see cref="T:System.NotSupportedException"/>.
             </summary>
             <param name="offset">
               The offset to seek to....
               IF THIS METHOD ACTUALLY DID ANYTHING.
             </param>
             <param name="origin">
               The reference specifying how to apply the offset....  IF
               THIS METHOD ACTUALLY DID ANYTHING.
             </param>
            
             <returns>nothing. This method always throws.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">
              The new value for the stream length....  IF
              THIS METHOD ACTUALLY DID ANYTHING.
            </param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Write data to the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while writing,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               and a writable output stream.  Then call <c>Write()</c> on that
               <c>ZlibStream</c>, providing uncompressed data as input.  The data sent to
               the output stream will be the compressed form of the data written.  If you
               wish to use the <c>ZlibStream</c> to decompress data while writing, you
               can create a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that stream,
               providing previously compressed data. The data sent to the output stream
               will be the decompressed form of the data written.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressString(System.String)"/>
            
             <param name="s">
               A string to compress.  The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
             A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a single string.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a byte array.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="T:Force.DeepCloner.DeepClonerExtensions">
            <summary>
            Extensions for object cloning
            </summary>
        </member>
        <member name="M:Force.DeepCloner.DeepClonerExtensions.DeepClone``1(``0)">
            <summary>
            Performs deep (full) copy of object and related graph
            </summary>
        </member>
        <member name="M:Force.DeepCloner.DeepClonerExtensions.DeepCloneTo``2(``0,``1)">
            <summary>
            Performs deep (full) copy of object and related graph to existing object
            </summary>
            <returns>existing filled object</returns>
            <remarks>Method is valid only for classes, classes should be descendants in reality, not in declaration</remarks>
        </member>
        <member name="M:Force.DeepCloner.DeepClonerExtensions.ShallowCloneTo``2(``0,``1)">
            <summary>
            Performs shallow copy of object to existing object
            </summary>
            <returns>existing filled object</returns>
            <remarks>Method is valid only for classes, classes should be descendants in reality, not in declaration</remarks>
        </member>
        <member name="M:Force.DeepCloner.DeepClonerExtensions.ShallowClone``1(``0)">
            <summary>
            Performs shallow (only new object returned, without cloning of dependencies) copy of object
            </summary>
        </member>
        <member name="M:Force.DeepCloner.Helpers.DeepClonerCache.ClearCache">
            <summary>
            This method can be used when we switch between safe / unsafe variants (for testing)
            </summary>
        </member>
        <member name="T:Force.DeepCloner.Helpers.DeepClonerSafeTypes">
            <summary>
            Safe types are types, which can be copied without real cloning. e.g. simple structs or strings (it is immutable)
            </summary>
        </member>
        <member name="T:Force.DeepCloner.Helpers.ShallowObjectCloner">
            <summary>
            Internal class but due implementation restriction should be public
            </summary>
        </member>
        <member name="M:Force.DeepCloner.Helpers.ShallowObjectCloner.DoCloneObject(System.Object)">
            <summary>
            Abstract method for real object cloning
            </summary>
        </member>
        <member name="M:Force.DeepCloner.Helpers.ShallowObjectCloner.CloneObject(System.Object)">
            <summary>
            Performs real shallow object clone
            </summary>
        </member>
        <member name="M:Force.DeepCloner.Helpers.ShallowObjectCloner.SwitchTo(System.Boolean)">
            <summary>
            Purpose of this method is testing variants
            </summary>
        </member>
    </members>
</doc>
